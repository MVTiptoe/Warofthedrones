{"version":3,"file":"index-IaYM6-T7.js","sources":["../../src/utils/MapStore.js","../../src/components/maps/terrain/OriginalTerrain.jsx","../../src/components/Terrain.jsx","../../src/components/Road.jsx","../../src/components/maps/objects/OriginalEnvironmentObjects.jsx","../../src/utils/GameContext.jsx","../../src/components/KeyboardControls.jsx","../../src/components/player/PlayerController.jsx","../../src/utils/VehicleHealthSystem.jsx","../../src/utils/WeaponPhysics.jsx","../../src/components/effects/Explosion.jsx","../../src/components/effects/ExplosionsManager.jsx","../../src/components/effects/DamageIndicator.jsx","../../src/components/effects/ShotgunMuzzleFlash.jsx","../../src/components/effects/ShotgunEffectsManager.jsx","../../src/components/drones/Grenadier.jsx","../../src/components/drones/Kamikaze.jsx","../../src/components/drones/Bomber.jsx","../../src/components/DroneSwitcher.jsx","../../src/components/vehicles/TankVehicles.jsx","../../src/components/vehicles/IFVVehicles.jsx","../../src/components/vehicles/TruckVehicles.jsx","../../src/components/vehicles/CarVehicles.jsx","../../src/components/vehicles/index.js","../../src/components/vehicles/withVehicleHealth.jsx","../../src/components/vehicles/enhancedVehicles.js","../../src/components/VehiclesOnRoad.jsx","../../src/components/VehicleSelector.jsx","../../src/components/maps/OriginalMap.jsx","../../src/components/maps/terrain/DesertTerrain.jsx","../../src/components/maps/objects/DesertEnvironmentObjects.jsx","../../src/components/maps/DesertMap.jsx","../../src/components/MapContainer.jsx","../../src/components/Scene.jsx","../../src/components/DroneSelector.jsx","../../src/components/ui/VehicleHealthHUD.jsx","../../src/components/ui/ControlsList.jsx","../../src/components/DroneHUDs.jsx","../../src/components/MapSelector.jsx","../../src/App.jsx","../../src/main.jsx"],"sourcesContent":["import { create } from 'zustand';\n\n// Map store for managing different map types\nexport const useMapStore = create((set) => ({\n    currentMapType: 'original', // Default to original map\n    mapData: {\n        original: {\n            name: 'Original Map',\n            terrainSize: 2000,\n            type: 'grassland',\n            loaded: false\n        },\n        desert: {\n            name: 'Desert Map',\n            terrainSize: 2000,\n            type: 'desert',\n            loaded: false\n        }\n    },\n    // Function to switch maps - completely changes the rendered map\n    setMapType: (mapType) => set({\n        currentMapType: mapType,\n        // Reset other state if needed during map change\n        mapData: state => ({\n            ...state.mapData,\n            [mapType]: {\n                ...state.mapData[mapType],\n                loaded: true\n            }\n        })\n    })\n})); ","import React, { useMemo, useRef } from 'react';\nimport * as THREE from 'three';\nimport { useFrame } from '@react-three/fiber';\n\n// Constants for original terrain configuration\nexport const ORIGINAL_TERRAIN_SIZE = 2000; // 2000m x 2000m\nconst CHUNK_SIZE = 205; // Increased from 200 to add slight overlap\nconst OVERLAP_FACTOR = 5; // 5 units of overlap between chunks\n\nexport default function OriginalTerrain() {\n    // Calculate chunks count\n    const terrainSize = ORIGINAL_TERRAIN_SIZE;\n    const chunksCount = useMemo(() => {\n        const count = Math.ceil(terrainSize / (CHUNK_SIZE - OVERLAP_FACTOR));\n        return { x: count, z: count };\n    }, [terrainSize]);\n\n    const SEGMENTS = 200; // Segment resolution for the entire terrain\n    const segmentsPerChunk = useMemo(() => ({\n        x: Math.floor(SEGMENTS / chunksCount.x),\n        z: Math.floor(SEGMENTS / chunksCount.z)\n    }), [chunksCount]);\n\n    // Create the terrain geometry\n    const planeGeometry = useMemo(() => {\n        return new THREE.PlaneGeometry(CHUNK_SIZE, CHUNK_SIZE, segmentsPerChunk.x, segmentsPerChunk.z);\n    }, [segmentsPerChunk]);\n\n    // Green, grassy material for original terrain\n    const planeMaterial = useMemo(() => {\n        return new THREE.MeshStandardMaterial({\n            color: '#4d7f38', // Green color for the ground\n            roughness: 0.8,\n            metalness: 0.1,\n            flatShading: false // Disable for smoother appearance\n        });\n    }, []);\n\n    // Use instanced mesh for efficient rendering of multiple chunks\n    const instancedMeshRef = useRef();\n    const tempObject = useMemo(() => new THREE.Object3D(), []);\n\n    // Create the chunks based on the terrain size\n    const chunks = useMemo(() => {\n        const result = [];\n        const halfSize = terrainSize / 2;\n        const chunkOffset = (CHUNK_SIZE - OVERLAP_FACTOR) / 2;\n\n        for (let x = 0; x < chunksCount.x; x++) {\n            for (let z = 0; z < chunksCount.z; z++) {\n                result.push({\n                    position: [\n                        -halfSize + x * (CHUNK_SIZE - OVERLAP_FACTOR) + chunkOffset,\n                        0,\n                        -halfSize + z * (CHUNK_SIZE - OVERLAP_FACTOR) + chunkOffset\n                    ],\n                    rotation: [-Math.PI / 2, 0, 0] // Rotate to make it horizontal\n                });\n            }\n        }\n\n        return result;\n    }, [terrainSize, chunksCount]);\n\n    // Setup the instanced mesh on the first render\n    useFrame(() => {\n        if (instancedMeshRef.current) {\n            chunks.forEach((chunk, i) => {\n                const [x, y, z] = chunk.position;\n                const [rx, ry, rz] = chunk.rotation;\n\n                tempObject.position.set(x, y, z);\n                tempObject.rotation.set(rx, ry, rz);\n                tempObject.updateMatrix();\n\n                instancedMeshRef.current.setMatrixAt(i, tempObject.matrix);\n            });\n\n            instancedMeshRef.current.instanceMatrix.needsUpdate = true;\n\n            // Only need to run this once to set up the instances\n            return null;\n        }\n    }, [chunks]);\n\n    return (\n        <instancedMesh\n            ref={instancedMeshRef}\n            args={[planeGeometry, planeMaterial, chunks.length]}\n            receiveShadow\n        />\n    );\n} ","import React, { useMemo, useRef } from 'react';\nimport * as THREE from 'three';\nimport { useFrame } from '@react-three/fiber';\nimport { useMapStore } from '../utils/MapStore';\n\n// Constants for terrain configuration\nexport const ORIGINAL_TERRAIN_SIZE = 2000; // 2000m x 2000m\n// Half width map will use the same height but half the width\nexport const HALF_WIDTH_TERRAIN_SIZE = { width: ORIGINAL_TERRAIN_SIZE / 2, height: ORIGINAL_TERRAIN_SIZE };\n// Desert map will use the same dimensions as the original map\nexport const DESERT_TERRAIN_SIZE = { width: ORIGINAL_TERRAIN_SIZE, height: ORIGINAL_TERRAIN_SIZE };\n\nconst CHUNK_SIZE = 205; // Increased from 200 to add slight overlap\nconst OVERLAP_FACTOR = 5; // 5 units of overlap between chunks\n\nexport default function Terrain() {\n    // Get current map type from the store\n    const { currentMapType } = useMapStore();\n\n    // Determine terrain size based on current map type\n    const terrainSize = useMemo(() => {\n        if (currentMapType === 'half-width') {\n            return HALF_WIDTH_TERRAIN_SIZE;\n        } else if (currentMapType === 'desert') {\n            return DESERT_TERRAIN_SIZE;\n        }\n        return { width: ORIGINAL_TERRAIN_SIZE, height: ORIGINAL_TERRAIN_SIZE };\n    }, [currentMapType]);\n\n    // Calculate chunks count\n    const chunksCount = useMemo(() => {\n        if (currentMapType === 'half-width') {\n            return {\n                x: Math.ceil(terrainSize.width / (CHUNK_SIZE - OVERLAP_FACTOR)),\n                z: Math.ceil(terrainSize.height / (CHUNK_SIZE - OVERLAP_FACTOR))\n            };\n        }\n        const count = Math.ceil(ORIGINAL_TERRAIN_SIZE / (CHUNK_SIZE - OVERLAP_FACTOR));\n        return { x: count, z: count };\n    }, [currentMapType, terrainSize]);\n\n    const SEGMENTS = 200; // Segment resolution for the entire terrain\n    const segmentsPerChunk = useMemo(() => ({\n        x: Math.floor(SEGMENTS / chunksCount.x),\n        z: Math.floor(SEGMENTS / chunksCount.z)\n    }), [chunksCount]);\n\n    // Create the terrain using instanced rendering for performance\n    // Use a single geometry and material for the entire terrain\n    const planeGeometry = useMemo(() => {\n        return new THREE.PlaneGeometry(CHUNK_SIZE, CHUNK_SIZE, segmentsPerChunk.x, segmentsPerChunk.z);\n    }, [segmentsPerChunk]);\n\n    // Use a simple material with optimized settings\n    const planeMaterial = useMemo(() => {\n        let color, roughness, metalness;\n\n        // Set material properties based on map type\n        if (currentMapType === 'desert') {\n            color = '#DEB887'; // Sandy color for desert\n            roughness = 0.9;\n            metalness = 0.05;\n        } else {\n            color = '#4d7f38'; // Green color for the ground\n            roughness = 0.8;\n            metalness = 0.1;\n        }\n\n        return new THREE.MeshStandardMaterial({\n            color: color,\n            roughness: roughness,\n            metalness: metalness,\n            flatShading: false // Disable for smoother appearance\n        });\n    }, [currentMapType]);\n\n    // Use instanced mesh for efficient rendering of multiple chunks\n    const instancedMeshRef = useRef();\n    const tempObject = useMemo(() => new THREE.Object3D(), []);\n\n    // Create the chunks based on the terrain size\n    const chunks = useMemo(() => {\n        const result = [];\n\n        if (currentMapType === 'half-width') {\n            const halfWidth = terrainSize.width / 2;\n            const halfHeight = terrainSize.height / 2;\n            const chunkOffset = (CHUNK_SIZE - OVERLAP_FACTOR) / 2;\n\n            for (let x = 0; x < chunksCount.x; x++) {\n                for (let z = 0; z < chunksCount.z; z++) {\n                    result.push({\n                        position: [\n                            -halfWidth + x * (CHUNK_SIZE - OVERLAP_FACTOR) + chunkOffset,\n                            0,\n                            -halfHeight + z * (CHUNK_SIZE - OVERLAP_FACTOR) + chunkOffset\n                        ],\n                        rotation: [-Math.PI / 2, 0, 0] // Rotate to make it horizontal\n                    });\n                }\n            }\n        } else {\n            const halfSize = terrainSize.width / 2;\n            const chunkOffset = (CHUNK_SIZE - OVERLAP_FACTOR) / 2;\n\n            for (let x = 0; x < chunksCount.x; x++) {\n                for (let z = 0; z < chunksCount.z; z++) {\n                    result.push({\n                        position: [\n                            -halfSize + x * (CHUNK_SIZE - OVERLAP_FACTOR) + chunkOffset,\n                            0,\n                            -halfSize + z * (CHUNK_SIZE - OVERLAP_FACTOR) + chunkOffset\n                        ],\n                        rotation: [-Math.PI / 2, 0, 0] // Rotate to make it horizontal\n                    });\n                }\n            }\n        }\n\n        return result;\n    }, [currentMapType, terrainSize, chunksCount]);\n\n    // Setup the instanced mesh on the first render\n    useFrame(() => {\n        if (instancedMeshRef.current) {\n            chunks.forEach((chunk, i) => {\n                const [x, y, z] = chunk.position;\n                const [rx, ry, rz] = chunk.rotation;\n\n                tempObject.position.set(x, y, z);\n                tempObject.rotation.set(rx, ry, rz);\n                tempObject.updateMatrix();\n\n                instancedMeshRef.current.setMatrixAt(i, tempObject.matrix);\n            });\n\n            instancedMeshRef.current.instanceMatrix.needsUpdate = true;\n\n            // Only need to run this once to set up the instances\n            return null;\n        }\n    }, [chunks]);\n\n    return (\n        <>\n            {/* Use an instanced mesh for all chunks */}\n            <instancedMesh\n                ref={instancedMeshRef}\n                args={[planeGeometry, planeMaterial, chunks.length]}\n            />\n        </>\n    );\n} ","import React, { useMemo } from 'react';\nimport * as THREE from 'three';\nimport { ORIGINAL_TERRAIN_SIZE, HALF_WIDTH_TERRAIN_SIZE } from './Terrain';\nimport { useMapStore } from '../utils/MapStore';\n\n// Road constants\nexport const ROAD_WIDTH = 88;\nexport const ROAD_EXTENSION = 8;\nexport const TOTAL_ROAD_WIDTH = ROAD_WIDTH + (ROAD_EXTENSION * 2); // Total width including extensions\nexport const ROAD_SPACING = 300; // Space between the two parallel roads (increased from 200 to 300, 50% more)\nexport const LANE_WIDTH = ROAD_WIDTH / 4; // Now 4 lanes per road\nexport const LANE_MARKER_WIDTH = 0.75; // Increased from 0.5 (1.5x width)\nexport const LANE_MARKER_LENGTH = 5;\nexport const LANE_MARKER_GAP = 10;\nexport const ROAD_HEIGHT = 0.5; // Increased from 0.11 to prevent z-fighting\nexport const ROADSIDE_STRIPE_WIDTH = 9; // Width of brown stripes alongside the road (increased from 6 to 9, 1.5x wider)\n\nexport default function Road({ mapType = 'original' }) {\n    // Get current map type from store\n    const { currentMapType } = useMapStore();\n\n    // Get the terrain size based on the current map type\n    const terrainSize = useMemo(() => {\n        if (mapType === 'half-width') {\n            return HALF_WIDTH_TERRAIN_SIZE;\n        }\n        return { width: ORIGINAL_TERRAIN_SIZE, height: ORIGINAL_TERRAIN_SIZE };\n    }, [mapType]);\n\n    // Create the road shape with a plane along the X axis (now wider with extensions)\n    const roadGeometry = useMemo(() => {\n        return new THREE.PlaneGeometry(terrainSize.width, ROAD_WIDTH, 1, 1);\n    }, [terrainSize]);\n\n    // Create the road extension geometry\n    const roadExtensionGeometry = useMemo(() => {\n        return new THREE.PlaneGeometry(terrainSize.width, ROAD_EXTENSION, 1, 1);\n    }, [terrainSize]);\n\n    // Create asphalt color based on map type\n    const asphaltColor = useMemo(() => {\n        return mapType === 'desert' ? '#444444' : '#333333'; // Slightly lighter for desert\n    }, [mapType]);\n\n    // Create the asphalt material\n    const asphaltMaterial = useMemo(() =>\n        new THREE.MeshStandardMaterial({\n            color: asphaltColor,\n            roughness: 0.7,\n            metalness: 0.1,\n            polygonOffset: true,\n            polygonOffsetFactor: -1,\n            polygonOffsetUnits: 1\n        }),\n        [asphaltColor]\n    );\n\n    // Create the center line material (yellow)\n    const centerLineMaterial = useMemo(() =>\n        new THREE.MeshStandardMaterial({\n            color: '#FFCC00',\n            roughness: 0.5,\n            metalness: 0.1,\n            polygonOffset: true,\n            polygonOffsetFactor: -2,\n            polygonOffsetUnits: 1\n        }),\n        []\n    );\n\n    // Create the side line material (white)\n    const sideLineMaterial = useMemo(() =>\n        new THREE.MeshStandardMaterial({\n            color: '#FFFFFF',\n            roughness: 0.5,\n            metalness: 0.1,\n            polygonOffset: true,\n            polygonOffsetFactor: -2,\n            polygonOffsetUnits: 1\n        }),\n        []\n    );\n\n    // Create the roadside stripe material (based on map type)\n    const roadstripeColor = useMemo(() => {\n        return mapType === 'desert' ? '#A67F4E' : '#8B5A2B'; // More orange-toned for desert\n    }, [mapType]);\n\n    // Create the roadside stripe material\n    const roadsideStripeMaterial = useMemo(() =>\n        new THREE.MeshStandardMaterial({\n            color: roadstripeColor,\n            roughness: 0.85,\n            metalness: 0.02,\n            polygonOffset: true,\n            polygonOffsetFactor: -1.5,\n            polygonOffsetUnits: 1\n        }),\n        [roadstripeColor]\n    );\n\n    // Create the lane markers (dashed lines)\n    const laneMarkers = useMemo(() => {\n        const markers = [];\n        const roadLength = terrainSize.width;\n        const totalMarkers = Math.floor(roadLength / (LANE_MARKER_LENGTH + LANE_MARKER_GAP));\n        const startOffset = -roadLength / 2;\n\n        for (let i = 0; i < totalMarkers; i++) {\n            const markerPosition = startOffset + (i * (LANE_MARKER_LENGTH + LANE_MARKER_GAP)) + LANE_MARKER_LENGTH / 2;\n            markers.push({\n                position: markerPosition\n            });\n        }\n\n        return markers;\n    }, [terrainSize]);\n\n    // Component to render a single road with all its markings\n    const SingleRoad = ({ zPosition }) => (\n        <group position={[0, ROAD_HEIGHT, zPosition]}>\n            {/* Main road surface */}\n            <mesh\n                geometry={roadGeometry}\n                material={asphaltMaterial}\n                rotation={[-Math.PI / 2, 0, 0]}\n            />\n\n            {/* Left road extension */}\n            <mesh\n                position={[0, 0, -ROAD_WIDTH / 2 - ROAD_EXTENSION / 2]}\n                rotation={[-Math.PI / 2, 0, 0]}\n            >\n                <primitive object={roadExtensionGeometry} />\n                <primitive object={asphaltMaterial} />\n            </mesh>\n\n            {/* Right road extension */}\n            <mesh\n                position={[0, 0, ROAD_WIDTH / 2 + ROAD_EXTENSION / 2]}\n                rotation={[-Math.PI / 2, 0, 0]}\n            >\n                <primitive object={roadExtensionGeometry} />\n                <primitive object={asphaltMaterial} />\n            </mesh>\n\n            {/* Left brown stripe */}\n            <mesh\n                position={[0, 0.01, -TOTAL_ROAD_WIDTH / 2 - ROADSIDE_STRIPE_WIDTH / 2]}\n                rotation={[-Math.PI / 2, 0, 0]}\n            >\n                <planeGeometry args={[terrainSize.width, ROADSIDE_STRIPE_WIDTH]} />\n                <primitive object={roadsideStripeMaterial} />\n            </mesh>\n\n            {/* Right brown stripe */}\n            <mesh\n                position={[0, 0.01, TOTAL_ROAD_WIDTH / 2 + ROADSIDE_STRIPE_WIDTH / 2]}\n                rotation={[-Math.PI / 2, 0, 0]}\n            >\n                <planeGeometry args={[terrainSize.width, ROADSIDE_STRIPE_WIDTH]} />\n                <primitive object={roadsideStripeMaterial} />\n            </mesh>\n\n            {/* Center line (solid yellow) */}\n            <mesh\n                position={[0, 0.02, 0]}\n                rotation={[-Math.PI / 2, 0, 0]}\n            >\n                <planeGeometry args={[terrainSize.width, LANE_MARKER_WIDTH]} />\n                <primitive object={centerLineMaterial} />\n            </mesh>\n\n            {/* Left edge line (solid white) */}\n            <mesh\n                position={[0, 0.02, -ROAD_WIDTH / 2 + 0.5]}\n                rotation={[-Math.PI / 2, 0, 0]}\n            >\n                <planeGeometry args={[terrainSize.width, LANE_MARKER_WIDTH]} />\n                <primitive object={sideLineMaterial} />\n            </mesh>\n\n            {/* Right edge line (solid white) */}\n            <mesh\n                position={[0, 0.02, ROAD_WIDTH / 2 - 0.5]}\n                rotation={[-Math.PI / 2, 0, 0]}\n            >\n                <planeGeometry args={[terrainSize.width, LANE_MARKER_WIDTH]} />\n                <primitive object={sideLineMaterial} />\n            </mesh>\n\n            {/* Lane markers (dashed white lines) between lanes */}\n            {/* Left side - between outer and inner lane */}\n            {laneMarkers.map((marker, index) => (\n                <mesh\n                    key={`left-outer-${index}`}\n                    position={[marker.position, 0.02, -ROAD_WIDTH / 4]}\n                    rotation={[-Math.PI / 2, 0, 0]}\n                >\n                    <planeGeometry args={[LANE_MARKER_LENGTH, LANE_MARKER_WIDTH]} />\n                    <primitive object={sideLineMaterial} />\n                </mesh>\n            ))}\n\n            {/* Right side - between outer and inner lane */}\n            {laneMarkers.map((marker, index) => (\n                <mesh\n                    key={`right-outer-${index}`}\n                    position={[marker.position, 0.02, ROAD_WIDTH / 4]}\n                    rotation={[-Math.PI / 2, 0, 0]}\n                >\n                    <planeGeometry args={[LANE_MARKER_LENGTH, LANE_MARKER_WIDTH]} />\n                    <primitive object={sideLineMaterial} />\n                </mesh>\n            ))}\n        </group>\n    );\n\n    return (\n        <>\n            {/* Upper road */}\n            <SingleRoad zPosition={ROAD_SPACING / 2} />\n\n            {/* Lower road */}\n            <SingleRoad zPosition={-ROAD_SPACING / 2} />\n        </>\n    );\n} ","import React, { useMemo, useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { useFrame, useThree } from '@react-three/fiber';\r\nimport { ORIGINAL_TERRAIN_SIZE } from '../terrain/OriginalTerrain';\r\n\r\n// Constants for original environment objects\r\nconst ROAD_WIDTH = 140;\r\nconst ROAD_SPACING = 300;\r\nconst MIN_SCALE = 1.2;\r\nconst MAX_SCALE = 1.8;\r\n\r\n// Tree type definitions\r\nconst TREE_TYPES = {\r\n    PINE: 'pine',\r\n    OAK: 'oak',\r\n    PALM: 'palm',\r\n    BIRCH: 'birch'\r\n};\r\n\r\n// Spatial hash grid for efficient object placement\r\nclass SpatialHashGrid {\r\n    constructor(bounds, dimensions) {\r\n        this.bounds = bounds;\r\n        this.dimensions = dimensions;\r\n        this.cells = {};\r\n    }\r\n\r\n    // Calculate the cell coordinates for a position\r\n    getCell(position) {\r\n        const { min, max } = this.bounds;\r\n        const cellX = Math.floor((position.x - min.x) / (max.x - min.x) * this.dimensions.x);\r\n        const cellZ = Math.floor((position.z - min.z) / (max.z - min.z) * this.dimensions.z);\r\n        return { x: cellX, z: cellZ };\r\n    }\r\n\r\n    // Get cell key for hashing\r\n    getCellKey(cell) {\r\n        return `${cell.x},${cell.z}`;\r\n    }\r\n\r\n    // Add object to grid\r\n    insert(position, object) {\r\n        const cell = this.getCell(position);\r\n        const key = this.getCellKey(cell);\r\n\r\n        if (!this.cells[key]) {\r\n            this.cells[key] = [];\r\n        }\r\n        this.cells[key].push({ position, object });\r\n    }\r\n\r\n    // Find objects near a position\r\n    query(position, radius) {\r\n        const result = [];\r\n        const center = this.getCell(position);\r\n\r\n        // Calculate how many cells we need to check based on radius\r\n        const cellRadius = Math.ceil(radius / Math.min(\r\n            (this.bounds.max.x - this.bounds.min.x) / this.dimensions.x,\r\n            (this.bounds.max.z - this.bounds.min.z) / this.dimensions.z\r\n        ));\r\n\r\n        // Check all cells within cell radius\r\n        for (let x = -cellRadius; x <= cellRadius; x++) {\r\n            for (let z = -cellRadius; z <= cellRadius; z++) {\r\n                const cell = { x: center.x + x, z: center.z + z };\r\n                const key = this.getCellKey(cell);\r\n\r\n                if (this.cells[key]) {\r\n                    for (const item of this.cells[key]) {\r\n                        const dx = item.position.x - position.x;\r\n                        const dz = item.position.z - position.z;\r\n                        const distance = Math.sqrt(dx * dx + dz * dz);\r\n\r\n                        if (distance <= radius) {\r\n                            result.push(item.object);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// Generate a deterministic random number based on seed\r\nfunction seededRandom(seed) {\r\n    const x = Math.sin(seed) * 10000;\r\n    return x - Math.floor(x);\r\n}\r\n\r\n// Generate original environment objects with a focus on lush forests\r\nexport default function OriginalEnvironmentObjects() {\r\n    const terrainSize = ORIGINAL_TERRAIN_SIZE;\r\n    const seed = 12345; // Seed for deterministic generation\r\n\r\n    // Setup spatial grid\r\n    const halfWidth = terrainSize / 2;\r\n    const halfHeight = terrainSize / 2;\r\n\r\n    // Use a fixed seed for deterministic generation\r\n    const { trees, rocks, bushes, largeBush } = useMemo(() => {\r\n        // Initialize spatial hash grid for position checking\r\n        const bounds = {\r\n            min: { x: -halfWidth, z: -halfHeight },\r\n            max: { x: halfWidth, z: halfHeight }\r\n        };\r\n        const grid = new SpatialHashGrid(bounds, { x: 20, z: 20 });\r\n\r\n        // Check if a position is on the road\r\n        const isOnRoad = (x, z) => {\r\n            return (\r\n                Math.abs(z - ROAD_SPACING / 2) < ROAD_WIDTH / 2 ||\r\n                Math.abs(z + ROAD_SPACING / 2) < ROAD_WIDTH / 2\r\n            );\r\n        };\r\n\r\n        // Generate fixed positions for each object type with spatial constraints\r\n        const trees = { pine: [], oak: [], palm: [], birch: [] };\r\n        const rocks = [];\r\n        const bushes = [];\r\n\r\n        // Minimum required distance between objects to avoid overlapping\r\n        const MIN_DISTANCE = 12;\r\n\r\n        // Function to check if position is valid (not on road, not too close to other objects)\r\n        const isPositionValid = (x, z, radius) => {\r\n            if (isOnRoad(x, z)) return false;\r\n\r\n            // Add a safety margin around roads\r\n            const roadMargin = 10;\r\n            if (\r\n                Math.abs(z - ROAD_SPACING / 2) < (ROAD_WIDTH / 2) + roadMargin ||\r\n                Math.abs(z + ROAD_SPACING / 2) < (ROAD_WIDTH / 2) + roadMargin\r\n            ) {\r\n                return false;\r\n            }\r\n\r\n            // Check spatial grid for nearby objects\r\n            const pos = { x, z };\r\n            const nearby = grid.query(pos, radius);\r\n            return nearby.length === 0;\r\n        };\r\n\r\n        // Function to add an object at a valid position with deterministic randomness\r\n        const addObject = (collection, objectType, baseIndex, count, minDistance) => {\r\n            for (let i = 0; i < count; i++) {\r\n                const seedValue = seed + baseIndex + i;\r\n\r\n                // Use deterministic random values\r\n                const randX = seededRandom(seedValue * 1.1);\r\n                const randZ = seededRandom(seedValue * 2.3);\r\n                const randScale = seededRandom(seedValue * 3.7);\r\n                const randRotation = seededRandom(seedValue * 4.5);\r\n                const randType = Math.floor(seededRandom(seedValue * 5.9) * 4);\r\n\r\n                // Calculate position using deterministic randomness\r\n                const x = randX * terrainSize - halfWidth;\r\n                const z = randZ * terrainSize - halfHeight;\r\n\r\n                // Skip if position is invalid (deterministic skipping)\r\n                if (!isPositionValid(x, z, minDistance)) continue;\r\n\r\n                // Create object with properties\r\n                const scale = MIN_SCALE + randScale * (MAX_SCALE - MIN_SCALE);\r\n                const rotation = randRotation * Math.PI * 2;\r\n                const position = new THREE.Vector3(x, 0, z);\r\n\r\n                const object = {\r\n                    position: [x, 0, z],\r\n                    scale,\r\n                    rotation,\r\n                    type: randType\r\n                };\r\n\r\n                // Add to collection based on object type\r\n                if (objectType === 'tree') {\r\n                    const treeTypeName = Object.values(TREE_TYPES)[randType];\r\n                    trees[treeTypeName].push(object);\r\n                } else if (objectType === 'rock') {\r\n                    rocks.push(object);\r\n                } else if (objectType === 'bush') {\r\n                    bushes.push(object);\r\n                }\r\n\r\n                // Insert into spatial grid\r\n                grid.insert({ x, z }, object);\r\n            }\r\n        };\r\n\r\n        // Setup original environment with plenty of trees and vegetation\r\n        const treeCount = 600;\r\n        const rockCount = 150;\r\n        const bushCount = 300;\r\n\r\n        // Generate fixed number of objects with deterministic positioning\r\n        addObject(trees, 'tree', 0, treeCount, MIN_DISTANCE);\r\n        addObject(rocks, 'rock', 10000, rockCount, MIN_DISTANCE / 3);\r\n        addObject(bushes, 'bush', 20000, bushCount, MIN_DISTANCE / 3);\r\n\r\n        // Special large bush positioning (deterministic based on seed)\r\n        const specialSeed = seed * 9876;\r\n        const specialX = seededRandom(specialSeed) * terrainSize - halfWidth;\r\n        const specialZ = seededRandom(specialSeed + 100) * terrainSize - halfHeight;\r\n\r\n        let largeBush = null;\r\n        if (!isOnRoad(specialX, specialZ)) {\r\n            largeBush = {\r\n                position: [specialX, 0, specialZ],\r\n                scale: 4.0,\r\n                rotation: seededRandom(specialSeed + 200) * Math.PI * 2\r\n            };\r\n        }\r\n\r\n        return { trees, rocks, bushes, largeBush };\r\n    }, [halfWidth, halfHeight, terrainSize]);\r\n\r\n    const { camera } = useThree();\r\n\r\n    // References to our instanced meshes\r\n    const treeRefs = {\r\n        pine: { trunk: useRef(), foliage: useRef() },\r\n        oak: { trunk: useRef(), foliage: useRef() },\r\n        palm: { trunk: useRef(), foliage: useRef() },\r\n        birch: { trunk: useRef(), foliage: useRef() }\r\n    };\r\n\r\n    const rocksRef = useRef();\r\n    const bushesRef = useRef();\r\n    const largeBushRef = useRef();\r\n\r\n    // Create a frustum for culling\r\n    const frustum = useMemo(() => new THREE.Frustum(), []);\r\n    const projScreenMatrix = useMemo(() => new THREE.Matrix4(), []);\r\n    const tempObject = useMemo(() => new THREE.Object3D(), []);\r\n\r\n    // Materials for original environment - lush green colors\r\n    const treeMaterials = useMemo(() => ({\r\n        pine: {\r\n            trunk: new THREE.MeshStandardMaterial({\r\n                color: '#8B4513',\r\n                roughness: 0.8,\r\n                flatShading: true\r\n            }),\r\n            foliage: new THREE.MeshStandardMaterial({\r\n                color: '#2E8B57',\r\n                roughness: 0.7,\r\n                flatShading: true\r\n            })\r\n        },\r\n        oak: {\r\n            trunk: new THREE.MeshStandardMaterial({\r\n                color: '#654321',\r\n                roughness: 0.9,\r\n                flatShading: true\r\n            }),\r\n            foliage: new THREE.MeshStandardMaterial({\r\n                color: '#228B22',\r\n                roughness: 0.6,\r\n                flatShading: true\r\n            })\r\n        },\r\n        palm: {\r\n            trunk: new THREE.MeshStandardMaterial({\r\n                color: '#A0522D',\r\n                roughness: 0.7,\r\n                flatShading: true\r\n            }),\r\n            foliage: new THREE.MeshStandardMaterial({\r\n                color: '#32CD32',\r\n                roughness: 0.8,\r\n                flatShading: true\r\n            })\r\n        },\r\n        birch: {\r\n            trunk: new THREE.MeshStandardMaterial({\r\n                color: '#F5F5DC',\r\n                roughness: 0.6,\r\n                flatShading: true\r\n            }),\r\n            foliage: new THREE.MeshStandardMaterial({\r\n                color: '#ADFF2F',\r\n                roughness: 0.7,\r\n                flatShading: true\r\n            })\r\n        }\r\n    }), []);\r\n\r\n    const rockMaterial = useMemo(() =>\r\n        new THREE.MeshStandardMaterial({\r\n            color: '#7D7D7D',\r\n            roughness: 1.0,\r\n            flatShading: true\r\n        }),\r\n        []);\r\n\r\n    const bushMaterial = useMemo(() =>\r\n        new THREE.MeshStandardMaterial({\r\n            color: '#3A5F0B',\r\n            roughness: 0.7,\r\n            flatShading: true\r\n        }),\r\n        []);\r\n\r\n    // Create optimized geometries\r\n    const rockGeometry = useMemo(() => new THREE.IcosahedronGeometry(1, 0), []);\r\n    const bushGeometry = useMemo(() => new THREE.SphereGeometry(2, 6, 4), []);\r\n\r\n    // Tree dimension presets\r\n    const treeDimensions = useMemo(() => ({\r\n        pine: {\r\n            trunkHeight: 4.8,\r\n            trunkRadius: 0.75,\r\n            foliageOffset: 4.8\r\n        },\r\n        oak: {\r\n            trunkHeight: 4.5,\r\n            trunkRadius: 0.975,\r\n            foliageOffset: 3\r\n        },\r\n        palm: {\r\n            trunkHeight: 7.5,\r\n            trunkRadius: 0.525,\r\n            foliageOffset: 7.5\r\n        },\r\n        birch: {\r\n            trunkHeight: 6.75,\r\n            trunkRadius: 0.4875,\r\n            foliageOffset: 4.5\r\n        }\r\n    }), []);\r\n\r\n    // Create simplified LOD geometries\r\n    const treeGeometries = useMemo(() => {\r\n        // Create high detail geometries\r\n        const highDetail = {\r\n            pine: {\r\n                trunk: new THREE.CylinderGeometry(0.6, 0.75, 4.8, 8, 3),\r\n                foliage: new THREE.ConeGeometry(3, 9.6, 8, 4)\r\n            },\r\n            oak: {\r\n                trunk: new THREE.CylinderGeometry(0.9, 1.05, 4.5, 10, 4),\r\n                foliage: new THREE.SphereGeometry(3.75, 12, 10)\r\n            },\r\n            palm: {\r\n                trunk: new THREE.CylinderGeometry(0.45, 0.6, 7.5, 8, 5),\r\n                foliage: new THREE.DodecahedronGeometry(3.75, 1)\r\n            },\r\n            birch: {\r\n                trunk: new THREE.CylinderGeometry(0.45, 0.53, 6.75, 9, 4),\r\n                foliage: new THREE.OctahedronGeometry(3, 2)\r\n            }\r\n        };\r\n\r\n        // Create low detail geometries\r\n        const lowDetail = {\r\n            pine: {\r\n                trunk: new THREE.CylinderGeometry(0.6, 0.75, 4.8, 4, 1),\r\n                foliage: new THREE.ConeGeometry(3, 9.6, 5, 1)\r\n            },\r\n            oak: {\r\n                trunk: new THREE.CylinderGeometry(0.9, 1.05, 4.5, 6, 1),\r\n                foliage: new THREE.SphereGeometry(3.75, 6, 4)\r\n            },\r\n            palm: {\r\n                trunk: new THREE.CylinderGeometry(0.45, 0.6, 7.5, 4, 1),\r\n                foliage: new THREE.DodecahedronGeometry(3.75, 0)\r\n            },\r\n            birch: {\r\n                trunk: new THREE.CylinderGeometry(0.45, 0.53, 6.75, 5, 1),\r\n                foliage: new THREE.OctahedronGeometry(3, 0)\r\n            }\r\n        };\r\n\r\n        return { highDetail, lowDetail };\r\n    }, []);\r\n\r\n    // Setup instanced mesh matrices\r\n    useEffect(() => {\r\n        // Setup trees for each type with proper positioning\r\n        Object.entries(trees).forEach(([treeType, positions]) => {\r\n            if (!positions.length) return;\r\n\r\n            const {\r\n                trunkHeight,\r\n                trunkRadius,\r\n                foliageOffset\r\n            } = treeDimensions[treeType];\r\n\r\n            // Setup trunk matrices\r\n            const trunkRef = treeRefs[treeType].trunk;\r\n            if (trunkRef.current && positions.length > 0) {\r\n                positions.forEach((tree, i) => {\r\n                    const [x, y, z] = tree.position;\r\n                    const scale = tree.scale;\r\n\r\n                    const scaledTrunkHeight = trunkHeight * scale;\r\n                    const trunkY = scaledTrunkHeight / 2;\r\n\r\n                    tempObject.position.set(x, trunkY, z);\r\n                    tempObject.rotation.set(0, tree.rotation, 0);\r\n                    tempObject.scale.set(scale, scale, scale);\r\n                    tempObject.updateMatrix();\r\n\r\n                    trunkRef.current.setMatrixAt(i, tempObject.matrix);\r\n                });\r\n                trunkRef.current.instanceMatrix.needsUpdate = true;\r\n                trunkRef.current.computeBoundingSphere();\r\n                if (trunkRef.current.boundingSphere) {\r\n                    trunkRef.current.boundingSphere.radius *= 1.5;\r\n                }\r\n            }\r\n\r\n            // Setup foliage matrices\r\n            const foliageRef = treeRefs[treeType].foliage;\r\n            if (foliageRef.current && positions.length > 0) {\r\n                positions.forEach((tree, i) => {\r\n                    const [x, y, z] = tree.position;\r\n                    const scale = tree.scale;\r\n\r\n                    // Scale foliage position\r\n                    const scaledFoliageOffset = foliageOffset * scale;\r\n\r\n                    // Determine foliage position based on tree type\r\n                    let foliageY;\r\n                    switch (treeType) {\r\n                        case 'pine':\r\n                            foliageY = scaledFoliageOffset + (4.8 * scale);\r\n                            break;\r\n                        case 'birch':\r\n                            foliageY = scaledFoliageOffset + (2.25 * scale);\r\n                            break;\r\n                        case 'oak':\r\n                        case 'palm':\r\n                        default:\r\n                            foliageY = scaledFoliageOffset + (1.5 * scale);\r\n                    }\r\n\r\n                    tempObject.position.set(x, foliageY, z);\r\n                    tempObject.rotation.set(0, tree.rotation, 0);\r\n                    tempObject.scale.setScalar(scale);\r\n                    tempObject.updateMatrix();\r\n\r\n                    foliageRef.current.setMatrixAt(i, tempObject.matrix);\r\n                });\r\n                foliageRef.current.instanceMatrix.needsUpdate = true;\r\n                foliageRef.current.computeBoundingSphere();\r\n                if (foliageRef.current.boundingSphere) {\r\n                    foliageRef.current.boundingSphere.radius *= 1.5;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Setup rocks\r\n        if (rocksRef.current && rocks.length > 0) {\r\n            rocks.forEach((rock, i) => {\r\n                const [x, y, z] = rock.position;\r\n                const scale = rock.scale;\r\n                const objectY = 0.5 * scale;\r\n\r\n                tempObject.position.set(x, objectY, z);\r\n                tempObject.rotation.set(0, rock.rotation, 0);\r\n                tempObject.scale.setScalar(scale);\r\n                tempObject.updateMatrix();\r\n\r\n                rocksRef.current.setMatrixAt(i, tempObject.matrix);\r\n            });\r\n            rocksRef.current.instanceMatrix.needsUpdate = true;\r\n            rocksRef.current.computeBoundingSphere();\r\n            if (rocksRef.current.boundingSphere) {\r\n                rocksRef.current.boundingSphere.radius *= 1.5;\r\n            }\r\n        }\r\n\r\n        // Setup bushes\r\n        if (bushesRef.current && bushes.length > 0) {\r\n            bushes.forEach((bush, i) => {\r\n                const [x, y, z] = bush.position;\r\n                const scale = bush.scale;\r\n                const objectY = 2 * scale * 0.5;\r\n\r\n                tempObject.position.set(x, objectY, z);\r\n                tempObject.rotation.set(0, bush.rotation, 0);\r\n                tempObject.scale.setScalar(scale);\r\n                tempObject.updateMatrix();\r\n\r\n                bushesRef.current.setMatrixAt(i, tempObject.matrix);\r\n            });\r\n            bushesRef.current.instanceMatrix.needsUpdate = true;\r\n            bushesRef.current.computeBoundingSphere();\r\n            if (bushesRef.current.boundingSphere) {\r\n                bushesRef.current.boundingSphere.radius *= 1.5;\r\n            }\r\n        }\r\n\r\n        // Setup large bush\r\n        if (largeBushRef.current && largeBush) {\r\n            const [x, y, z] = largeBush.position;\r\n            const scale = largeBush.scale;\r\n            const objectY = 2 * scale * 0.5;\r\n\r\n            tempObject.position.set(x, objectY, z);\r\n            tempObject.rotation.set(0, largeBush.rotation, 0);\r\n            tempObject.scale.setScalar(scale);\r\n            tempObject.updateMatrix();\r\n\r\n            largeBushRef.current.matrix.copy(tempObject.matrix);\r\n            largeBushRef.current.matrixAutoUpdate = false;\r\n            // Regular meshes don't have computeBoundingSphere method\r\n            // Create a manual bounding sphere for distance checks\r\n            if (!largeBushRef.current.boundingSphere) {\r\n                largeBushRef.current.boundingSphere = new THREE.Sphere(\r\n                    new THREE.Vector3(x, objectY, z),\r\n                    2 * scale // Approximate radius based on scale\r\n                );\r\n            }\r\n        }\r\n    }, [trees, rocks, bushes, largeBush, treeDimensions, tempObject]);\r\n\r\n    // Distance-based culling for performance\r\n    useFrame(({ camera }) => {\r\n        const cameraPosition = camera.position;\r\n        const FAR_DISTANCE = 1000;\r\n        const MID_DISTANCE = 500;\r\n\r\n        // Apply culling for trees\r\n        Object.entries(treeRefs).forEach(([treeType, refs]) => {\r\n            if (!refs.trunk.current || !refs.trunk.current.boundingSphere ||\r\n                !refs.foliage.current || !refs.foliage.current.boundingSphere) {\r\n                return;\r\n            }\r\n\r\n            const trunkDistance = refs.trunk.current.boundingSphere.center.distanceTo(cameraPosition);\r\n            const foliageDistance = refs.foliage.current.boundingSphere.center.distanceTo(cameraPosition);\r\n\r\n            refs.trunk.current.visible = (trunkDistance < FAR_DISTANCE);\r\n            refs.foliage.current.visible = (foliageDistance < FAR_DISTANCE);\r\n        });\r\n\r\n        // Apply culling for rocks and bushes\r\n        if (rocksRef.current && rocksRef.current.boundingSphere) {\r\n            const rocksDistance = rocksRef.current.boundingSphere.center.distanceTo(cameraPosition);\r\n            rocksRef.current.visible = (rocksDistance < FAR_DISTANCE);\r\n        }\r\n\r\n        if (bushesRef.current && bushesRef.current.boundingSphere) {\r\n            const bushesDistance = bushesRef.current.boundingSphere.center.distanceTo(cameraPosition);\r\n            bushesRef.current.visible = (bushesDistance < FAR_DISTANCE);\r\n        }\r\n\r\n        // Large bush - individual mesh\r\n        if (largeBushRef.current && largeBushRef.current.boundingSphere) {\r\n            const largeDistance = largeBushRef.current.boundingSphere.center.distanceTo(cameraPosition);\r\n            largeBushRef.current.visible = (largeDistance < FAR_DISTANCE);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <group>\r\n            {/* All tree types with proper culling */}\r\n            {Object.entries(trees).map(([treeType, positions]) => {\r\n                if (!positions.length) return null;\r\n\r\n                // Get tree geometries\r\n                const highGeo = treeGeometries.highDetail[treeType];\r\n                const treeMat = treeMaterials[treeType];\r\n\r\n                return (\r\n                    <group key={treeType}>\r\n                        <instancedMesh\r\n                            ref={treeRefs[treeType].trunk}\r\n                            args={[null, null, positions.length]}\r\n                            frustumCulled={true}\r\n                        >\r\n                            <primitive object={highGeo.trunk} />\r\n                            <primitive object={treeMat.trunk} />\r\n                        </instancedMesh>\r\n\r\n                        <instancedMesh\r\n                            ref={treeRefs[treeType].foliage}\r\n                            args={[null, null, positions.length]}\r\n                            frustumCulled={true}\r\n                        >\r\n                            <primitive object={highGeo.foliage} />\r\n                            <primitive object={treeMat.foliage} />\r\n                        </instancedMesh>\r\n                    </group>\r\n                );\r\n            })}\r\n\r\n            {/* Rocks with instanced mesh */}\r\n            <instancedMesh\r\n                ref={rocksRef}\r\n                args={[rockGeometry, rockMaterial, rocks.length]}\r\n                frustumCulled={true}\r\n            />\r\n\r\n            {/* Bushes with instanced mesh */}\r\n            <instancedMesh\r\n                ref={bushesRef}\r\n                args={[bushGeometry, bushMaterial, bushes.length]}\r\n                frustumCulled={true}\r\n            />\r\n\r\n            {/* Special Large Bush */}\r\n            {largeBush && (\r\n                <mesh\r\n                    ref={largeBushRef}\r\n                    frustumCulled={true}\r\n                >\r\n                    <sphereGeometry args={[2, 10, 8]} />\r\n                    <meshStandardMaterial\r\n                        color=\"#2D5B0A\"\r\n                        roughness={0.6}\r\n                        metalness={0.1}\r\n                        flatShading={true}\r\n                    />\r\n                </mesh>\r\n            )}\r\n        </group>\r\n    );\r\n} ","import React, { createContext, useContext, useState } from 'react';\n\n// Define drone types\nexport const DRONE_TYPES = {\n    PLAYER: 'PLAYER',\n    GRENADIER: 'GRENADIER',\n    KAMIKAZE: 'KAMIKAZE',\n    BOMBER: 'BOMBER'\n};\n\n// Create context\nconst GameContext = createContext();\n\n// Consolidated context provider component\nexport function GameProvider({ children }) {\n    // State for the currently selected drone\n    const [currentDrone, setCurrentDrone] = useState(DRONE_TYPES.GRENADIER);\n\n    // State for the first person view\n    const [isFirstPerson, setIsFirstPerson] = useState(false);\n\n    // Function to switch drones\n    const switchDrone = (droneType) => {\n        setCurrentDrone(droneType);\n    };\n\n    // Function to toggle first person view\n    const toggleFirstPerson = () => {\n        setIsFirstPerson(prev => !prev);\n    };\n\n    // Value object to be provided by the context\n    const value = {\n        // Drone selection functionality\n        currentDrone,\n        switchDrone,\n\n        // First person view functionality\n        isFirstPerson,\n        toggleFirstPerson\n    };\n\n    return (\n        <GameContext.Provider value={value}>\n            {children}\n        </GameContext.Provider>\n    );\n}\n\n// Custom hook to use the drones functionality\nexport function useDrones() {\n    const context = useContext(GameContext);\n    if (context === undefined) {\n        throw new Error('useDrones must be used within a GameProvider');\n    }\n    return {\n        currentDrone: context.currentDrone,\n        switchDrone: context.switchDrone\n    };\n}\n\n// Custom hook to use the kamikaze/first-person functionality\nexport function useKamikaze() {\n    const context = useContext(GameContext);\n    if (context === undefined) {\n        throw new Error('useKamikaze must be used within a GameProvider');\n    }\n    return {\n        isFirstPerson: context.isFirstPerson,\n        toggleFirstPerson: context.toggleFirstPerson\n    };\n}\n\n// Combined hook to use all game context functionality\nexport function useGameContext() {\n    const context = useContext(GameContext);\n    if (context === undefined) {\n        throw new Error('useGameContext must be used within a GameProvider');\n    }\n    return context;\n} ","import React from 'react';\nimport { KeyboardControls as DreiKeyboardControls } from '@react-three/drei';\n\n// Define controls map for the drone\nexport const Controls = {\n    forward: 'forward',\n    backward: 'backward',\n    left: 'left',\n    right: 'right',\n    up: 'up',\n    down: 'down',\n    strafeLeft: 'strafeLeft',\n    strafeRight: 'strafeRight',\n    selectDrone1: 'selectDrone1',\n    selectDrone2: 'selectDrone2',\n    selectDrone3: 'selectDrone3',\n    selectDrone4: 'selectDrone4',\n    toggleFirstPerson: 'toggleFirstPerson'\n};\n\nexport default function KeyboardControls({ children }) {\n    // Define key mappings\n    const map = [\n        { name: Controls.forward, keys: ['KeyW'] },\n        { name: Controls.backward, keys: ['KeyS'] },\n        { name: Controls.left, keys: ['KeyQ'] },\n        { name: Controls.right, keys: ['KeyE'] },\n        { name: Controls.up, keys: ['Space'] },\n        { name: Controls.down, keys: ['ShiftLeft'] },\n        { name: Controls.strafeLeft, keys: ['KeyA'] },\n        { name: Controls.strafeRight, keys: ['KeyD'] },\n        { name: Controls.selectDrone1, keys: ['Digit1'] },\n        { name: Controls.selectDrone2, keys: ['Digit2'] },\n        { name: Controls.selectDrone3, keys: ['Digit3'] },\n        { name: Controls.selectDrone4, keys: ['Digit4'] },\n        { name: Controls.toggleFirstPerson, keys: ['KeyV'] }\n    ];\n\n    return (\n        <DreiKeyboardControls map={map}>\n            {children}\n        </DreiKeyboardControls>\n    );\n} ","import React, { useRef, useState, useEffect } from 'react';\r\nimport { useFrame } from '@react-three/fiber';\r\nimport { useKeyboardControls, PerspectiveCamera, Html, useHelper } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\nimport { Controls } from '../KeyboardControls';\r\nimport { useKamikaze } from '../../utils/GameContext';\r\n\r\nconst PlayerController = ({ world }) => {\r\n    const playerRef = useRef();\r\n    const cameraRef = useRef();\r\n    const bulletRef = useRef([]);\r\n    const [subscribeKeys, getKeys] = useKeyboardControls();\r\n    const velocity = useRef(new THREE.Vector3());\r\n    const [health, setHealth] = useState(100);\r\n    const [canShoot, setCanShoot] = useState(true);\r\n    const { isFirstPerson } = useKamikaze();\r\n\r\n    // Constants\r\n    const SPEED = 8;\r\n    const ROTATION_SPEED = 0.03;\r\n    const BULLET_SPEED = 30;\r\n    const SHOOT_COOLDOWN = 250; // milliseconds\r\n    const COLLISION_THRESHOLD = 1;\r\n\r\n    // Debug collision box\r\n    useHelper(playerRef, THREE.BoxHelper, 'cyan');\r\n\r\n    // Shooting mechanics\r\n    const shoot = () => {\r\n        if (!canShoot) return;\r\n\r\n        const player = playerRef.current;\r\n        const bulletDirection = new THREE.Vector3(0, 0, -1)\r\n            .applyQuaternion(player.quaternion);\r\n\r\n        const bullet = {\r\n            position: player.position.clone().add(bulletDirection.multiplyScalar(1)),\r\n            direction: bulletDirection,\r\n            createdAt: Date.now()\r\n        };\r\n\r\n        bulletRef.current.push(bullet);\r\n        setCanShoot(false);\r\n        setTimeout(() => setCanShoot(true), SHOOT_COOLDOWN);\r\n    };\r\n\r\n    // Handle damage\r\n    const takeDamage = (amount) => {\r\n        setHealth(prev => Math.max(0, prev - amount));\r\n        if (health <= 0) {\r\n            // Handle player death\r\n            console.log('Player died!');\r\n        }\r\n    };\r\n\r\n    // Collision detection\r\n    const checkCollisions = (position) => {\r\n        // Example collision with world boundaries\r\n        const worldBounds = 50;\r\n        if (Math.abs(position.x) > worldBounds || Math.abs(position.z) > worldBounds) {\r\n            return true;\r\n        }\r\n\r\n        // Add more collision checks here (e.g., with other objects)\r\n        return false;\r\n    };\r\n\r\n    useFrame((state, delta) => {\r\n        const keys = getKeys();\r\n        const player = playerRef.current;\r\n        if (!player) return;\r\n\r\n        // Store original position for collision check\r\n        const originalPosition = player.position.clone();\r\n\r\n        // Update velocity based on keys\r\n        velocity.current.set(0, 0, 0);\r\n\r\n        if (keys[Controls.forward]) velocity.current.z -= SPEED * delta;\r\n        if (keys[Controls.backward]) velocity.current.z += SPEED * delta;\r\n        if (keys[Controls.strafeLeft]) velocity.current.x -= SPEED * delta;\r\n        if (keys[Controls.strafeRight]) velocity.current.x += SPEED * delta;\r\n\r\n        // Rotate based on Q and E keys\r\n        if (keys[Controls.left]) player.rotation.y += ROTATION_SPEED;\r\n        if (keys[Controls.right]) player.rotation.y -= ROTATION_SPEED;\r\n\r\n        // Shoot on space\r\n        if (keys[Controls.up]) shoot();\r\n\r\n        // Apply movement in the direction the player is facing\r\n        const moveVector = velocity.current.applyMatrix4(\r\n            new THREE.Matrix4().makeRotationY(player.rotation.y)\r\n        );\r\n\r\n        // Test new position for collisions\r\n        const newPosition = originalPosition.clone().add(moveVector);\r\n        if (!checkCollisions(newPosition)) {\r\n            player.position.copy(newPosition);\r\n        }\r\n\r\n        // Update camera position for first-person view\r\n        if (cameraRef.current) {\r\n            if (isFirstPerson) {\r\n                cameraRef.current.position.set(0, 0.5, 0);\r\n            } else {\r\n                cameraRef.current.position.set(0, 5, 10);\r\n                cameraRef.current.lookAt(player.position);\r\n            }\r\n        }\r\n\r\n        // Update bullets\r\n        const now = Date.now();\r\n        bulletRef.current = bulletRef.current.filter(bullet => {\r\n            bullet.position.add(bullet.direction.clone().multiplyScalar(BULLET_SPEED * delta));\r\n            return now - bullet.createdAt < 2000; // Remove bullets after 2 seconds\r\n        });\r\n\r\n        // Update world if needed\r\n        if (world?.updatePlayerPosition) {\r\n            world.updatePlayerPosition(\r\n                player.position.x,\r\n                player.position.z,\r\n                player.rotation.y\r\n            );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <group ref={playerRef}>\r\n            <PerspectiveCamera ref={cameraRef} makeDefault={isFirstPerson} fov={75} />\r\n\r\n            {/* Player body - only visible in third person */}\r\n            {!isFirstPerson && (\r\n                <>\r\n                    {/* Player body */}\r\n                    <mesh position={[0, 0, 0]}>\r\n                        <cylinderGeometry args={[0.5, 0.5, 1.8, 32]} />\r\n                        <meshStandardMaterial color=\"#4CAF50\" />\r\n                    </mesh>\r\n                    {/* Head */}\r\n                    <mesh position={[0, 1.2, 0]}>\r\n                        <sphereGeometry args={[0.3, 32, 32]} />\r\n                        <meshStandardMaterial color=\"#4CAF50\" />\r\n                    </mesh>\r\n                    {/* Gun */}\r\n                    <mesh position={[0.3, 0.5, -0.5]} rotation={[0, 0, 0]}>\r\n                        <boxGeometry args={[0.1, 0.1, 1]} />\r\n                        <meshStandardMaterial color=\"#333333\" />\r\n                    </mesh>\r\n                </>\r\n            )}\r\n\r\n            {/* Bullets */}\r\n            {bulletRef.current.map((bullet, index) => (\r\n                <mesh key={index} position={bullet.position}>\r\n                    <sphereGeometry args={[0.1, 8, 8]} />\r\n                    <meshStandardMaterial color=\"yellow\" emissive=\"orange\" />\r\n                </mesh>\r\n            ))}\r\n\r\n            {/* Health bar */}\r\n            <Html position={[0, 2, 0]}>\r\n                <div style={{\r\n                    width: '100px',\r\n                    height: '10px',\r\n                    backgroundColor: '#333',\r\n                    border: '1px solid #666',\r\n                    borderRadius: '5px',\r\n                    overflow: 'hidden',\r\n                    transform: 'translateX(-50%)'\r\n                }}>\r\n                    <div style={{\r\n                        width: `${health}%`,\r\n                        height: '100%',\r\n                        backgroundColor: health > 30 ? '#4CAF50' : '#ff0000',\r\n                        transition: 'width 0.3s ease-in-out'\r\n                    }} />\r\n                </div>\r\n            </Html>\r\n        </group>\r\n    );\r\n};\r\n\r\nexport default PlayerController; ","import * as THREE from 'three';\nimport { create } from 'zustand';\n\n// Vehicle health defaults by type category\nexport const VEHICLE_HEALTH_DEFAULTS = {\n    TANK: {\n        maxHealth: 100,\n        criticalThreshold: 0.5, // Changed to 50% health\n        visualDamageStages: [],\n        hitboxSize: new THREE.Vector3(2.4, 1.0, 3.2), // Increased for better hit detection\n        // Different damage multipliers by hit location\n        hitLocations: {\n            turret: { damageMultiplier: 1.2 }, // Critical component\n            tracks: { damageMultiplier: 0.8, mobilityEffect: 0.5 }, // Reduced damage but affects mobility\n            rear: { damageMultiplier: 1.5 }, // Weak spot\n            front: { damageMultiplier: 0.6 }, // Strong armor\n            body: { damageMultiplier: 1.0 } // Standard damage to body\n        }\n    },\n    IFV: {\n        maxHealth: 70,\n        criticalThreshold: 0.5, // Changed to 50% health\n        visualDamageStages: [],\n        hitboxSize: new THREE.Vector3(2.0, 0.9, 3.0), // Increased for better hit detection\n        hitLocations: {\n            turret: { damageMultiplier: 1.2 },\n            wheels: { damageMultiplier: 0.8, mobilityEffect: 0.4 },\n            rear: { damageMultiplier: 1.3 },\n            front: { damageMultiplier: 0.7 },\n            body: { damageMultiplier: 1.0 } // Standard damage to body\n        }\n    },\n    MILITARY_TRUCK: {\n        maxHealth: 50,\n        criticalThreshold: 0.5, // Changed to 50% health\n        visualDamageStages: [],\n        hitboxSize: new THREE.Vector3(1.7, 1.4, 3.2), // Increased for better hit detection\n        hitLocations: {\n            cabin: { damageMultiplier: 1.1 },\n            wheels: { damageMultiplier: 0.9, mobilityEffect: 0.5 },\n            cargo: { damageMultiplier: 0.8 },\n            engine: { damageMultiplier: 1.4 },\n            body: { damageMultiplier: 1.0 } // Standard damage to body\n        }\n    },\n    CIVILIAN_TRUCK: {\n        maxHealth: 30,\n        criticalThreshold: 0.5, // Changed to 50% health\n        visualDamageStages: [],\n        hitboxSize: new THREE.Vector3(1.7, 1.4, 3.2), // Increased for better hit detection\n        hitLocations: {\n            cabin: { damageMultiplier: 1.2 },\n            wheels: { damageMultiplier: 1.0, mobilityEffect: 0.7 },\n            cargo: { damageMultiplier: 0.9 },\n            engine: { damageMultiplier: 1.5 },\n            body: { damageMultiplier: 1.0 } // Standard damage to body\n        }\n    },\n    CAR: {\n        maxHealth: 20,\n        criticalThreshold: 0.5, // Changed to 50% health\n        visualDamageStages: [],\n        hitboxSize: new THREE.Vector3(1.4, 0.8, 2.2), // Increased for better hit detection\n        hitLocations: {\n            cabin: { damageMultiplier: 1.2 },\n            wheels: { damageMultiplier: 1.0, mobilityEffect: 0.8 },\n            engine: { damageMultiplier: 1.5 },\n            body: { damageMultiplier: 1.0 } // Standard damage to body\n        }\n    }\n};\n\n// Vehicle category mapping - which vehicle belongs to which category\nexport const VEHICLE_CATEGORY_MAP = {\n    // Tanks\n    tank_a: 'TANK',\n    tank_b: 'TANK',\n\n    // IFVs\n    ifv_a: 'IFV',\n    ifv_b: 'IFV',\n\n    // Civilian Trucks\n    civilian_truck_1: 'CIVILIAN_TRUCK',\n    civilian_truck_2: 'CIVILIAN_TRUCK',\n    civilian_truck_3: 'CIVILIAN_TRUCK',\n\n    // Military Trucks\n    military_truck_1: 'MILITARY_TRUCK',\n    military_truck_2: 'MILITARY_TRUCK',\n    military_truck_3: 'MILITARY_TRUCK',\n\n    // Cars\n    car_a: 'CAR',\n    car_b: 'CAR',\n    car_c: 'CAR',\n    car_d: 'CAR',\n    car_e: 'CAR'\n};\n\n// Zustand store for global health state management\nexport const useVehicleHealthStore = create((set, get) => ({\n    // Map of vehicle IDs to their health state\n    vehicleHealth: {},\n\n    // Map for respawn timers\n    respawnTimers: {},\n\n    // Initialize a vehicle in the health system\n    initVehicle: (vehicleId, vehicleType) => {\n        set((state) => {\n            // Skip if already initialized\n            if (state.vehicleHealth[vehicleId]) return state;\n\n            const category = VEHICLE_CATEGORY_MAP[vehicleType];\n            const healthDefaults = VEHICLE_HEALTH_DEFAULTS[category];\n\n            return {\n                vehicleHealth: {\n                    ...state.vehicleHealth,\n                    [vehicleId]: {\n                        id: vehicleId,\n                        type: vehicleType,\n                        category,\n                        currentHealth: healthDefaults.maxHealth,\n                        maxHealth: healthDefaults.maxHealth,\n                        isDead: false,\n                        isDestroyed: false, // New flag for when vehicle is removed from scene\n                        isCritical: false,\n                        mobilityFactor: 1.0, // Full mobility\n                        visualEffects: [],\n                        hitboxSize: healthDefaults.hitboxSize,\n                        damageLog: []\n                    }\n                }\n            };\n        });\n    },\n\n    // Apply damage to a vehicle\n    applyDamage: (vehicleId, rawDamage, hitLocation = null, weaponType = null) => {\n        set((state) => {\n            const vehicle = state.vehicleHealth[vehicleId];\n            if (!vehicle || vehicle.isDead || vehicle.isDestroyed) return state;\n\n            const category = vehicle.category;\n            const healthDefaults = VEHICLE_HEALTH_DEFAULTS[category];\n\n            // Calculate final damage after hit location modifiers\n            let damageMultiplier = 1.0;\n            let mobilityEffect = 0;\n\n            // Apply hit location modifiers if provided\n            if (hitLocation && healthDefaults.hitLocations[hitLocation]) {\n                const locationData = healthDefaults.hitLocations[hitLocation];\n                damageMultiplier = locationData.damageMultiplier;\n                mobilityEffect = locationData.mobilityEffect || 0;\n            }\n\n            // Calculate final damage (removed armor reduction, only apply hit location multiplier)\n            const finalDamage = rawDamage * damageMultiplier;\n\n            // Calculate new health\n            const newHealth = Math.max(0, vehicle.currentHealth - finalDamage);\n            const healthPercentage = newHealth / vehicle.maxHealth;\n\n            // Determine visual effects based on damage stages\n            const visualEffects = [];\n            healthDefaults.visualDamageStages.forEach(stage => {\n                if (healthPercentage <= stage.threshold) {\n                    visualEffects.push(...stage.effects);\n                }\n            });\n\n            // Add greyed out effect if dead\n            if (newHealth <= 0) {\n                visualEffects.push('GREYED_OUT');\n            }\n\n            // Determine critical state (50% health = critical)\n            const isCritical = healthPercentage <= healthDefaults.criticalThreshold;\n\n            // Determine if dead (0% health = dead)\n            const isDead = newHealth <= 0;\n\n            // Calculate new mobility factor (lower = slower)\n            let newMobilityFactor = vehicle.mobilityFactor;\n\n            // Immobilize at 50% health or below\n            if (healthPercentage <= 0.5) {\n                newMobilityFactor = 0;\n            } else if (mobilityEffect > 0) {\n                // Only apply mobility effects if above 50% health\n                newMobilityFactor = Math.max(0.1, newMobilityFactor - mobilityEffect);\n            }\n\n            // Log the damage event\n            const damageEvent = {\n                timestamp: Date.now(),\n                rawDamage,\n                finalDamage,\n                hitLocation,\n                weaponType,\n                healthBefore: vehicle.currentHealth,\n                healthAfter: newHealth\n            };\n\n            const updatedVehicle = {\n                ...vehicle,\n                currentHealth: newHealth,\n                healthPercentage,\n                isDead,\n                isCritical,\n                mobilityFactor: isDead ? 0 : newMobilityFactor,\n                visualEffects: visualEffects,\n                damageLog: [...vehicle.damageLog, damageEvent]\n            };\n\n            // Set up destruction timer if vehicle just died\n            if (isDead && !vehicle.isDead) {\n                // Vehicle stays visible and greyed out for 5 seconds after death, then gets destroyed\n                setTimeout(() => {\n                    get().destroyVehicle(vehicleId);\n                }, 1500);\n            }\n\n            return {\n                vehicleHealth: {\n                    ...state.vehicleHealth,\n                    [vehicleId]: updatedVehicle\n                }\n            };\n        });\n    },\n\n    // Mark vehicle as destroyed (remove from scene)\n    destroyVehicle: (vehicleId) => {\n        set((state) => {\n            const vehicle = state.vehicleHealth[vehicleId];\n            if (!vehicle || vehicle.isDestroyed) return state;\n\n            // Only set respawn timer for military vehicles\n            let updatedTimers = state.respawnTimers;\n            if (vehicle.category !== 'CAR' && vehicle.category !== 'CIVILIAN_TRUCK') {\n                // Set respawn timer - vehicle will respawn after 30 seconds\n                const respawnTimer = setTimeout(() => {\n                    get().respawnVehicle(vehicleId);\n                }, 30000);\n\n                // Store the timer so we can cancel if needed\n                updatedTimers = {\n                    ...state.respawnTimers,\n                    [vehicleId]: respawnTimer\n                };\n            }\n\n            return {\n                vehicleHealth: {\n                    ...state.vehicleHealth,\n                    [vehicleId]: {\n                        ...vehicle,\n                        isDestroyed: true\n                    }\n                },\n                respawnTimers: updatedTimers\n            };\n        });\n    },\n\n    // Respawn a vehicle with full health\n    respawnVehicle: (vehicleId) => {\n        set((state) => {\n            const vehicle = state.vehicleHealth[vehicleId];\n            if (!vehicle) return state;\n\n            const category = vehicle.category;\n            const healthDefaults = VEHICLE_HEALTH_DEFAULTS[category];\n\n            return {\n                vehicleHealth: {\n                    ...state.vehicleHealth,\n                    [vehicleId]: {\n                        ...vehicle,\n                        currentHealth: healthDefaults.maxHealth,\n                        maxHealth: healthDefaults.maxHealth,\n                        isDead: false,\n                        isDestroyed: false,\n                        isCritical: false,\n                        mobilityFactor: 1.0,\n                        visualEffects: [],\n                        damageLog: [] // Clear damage log on respawn\n                    }\n                }\n            };\n        });\n    },\n\n    // Repair a vehicle (partial or full repair)\n    repairVehicle: (vehicleId, amount = null) => {\n        set((state) => {\n            const vehicle = state.vehicleHealth[vehicleId];\n            if (!vehicle || vehicle.isDestroyed) return state;\n\n            // Full repair if no amount specified\n            const newHealth = amount ?\n                Math.min(vehicle.maxHealth, vehicle.currentHealth + amount) :\n                vehicle.maxHealth;\n\n            const healthPercentage = newHealth / vehicle.maxHealth;\n\n            // Determine visual effects based on damage stages\n            const visualEffects = [];\n            const healthDefaults = VEHICLE_HEALTH_DEFAULTS[vehicle.category];\n\n            return {\n                vehicleHealth: {\n                    ...state.vehicleHealth,\n                    [vehicleId]: {\n                        ...vehicle,\n                        currentHealth: newHealth,\n                        healthPercentage,\n                        isDead: false, // Resurrect if was dead\n                        isCritical: healthPercentage <= healthDefaults.criticalThreshold,\n                        mobilityFactor: 1.0, // Restore full mobility on repair\n                        visualEffects\n                    }\n                }\n            };\n        });\n    },\n\n    // Remove a vehicle from the health system\n    removeVehicle: (vehicleId) => {\n        set((state) => {\n            // Clear any respawn timer\n            if (state.respawnTimers[vehicleId]) {\n                clearTimeout(state.respawnTimers[vehicleId]);\n            }\n\n            const { [vehicleId]: _, ...remainingVehicles } = state.vehicleHealth;\n            const { [vehicleId]: __, ...remainingTimers } = state.respawnTimers;\n\n            return {\n                vehicleHealth: remainingVehicles,\n                respawnTimers: remainingTimers\n            };\n        });\n    },\n\n    // Get vehicle health data\n    getVehicleHealth: (vehicleId) => {\n        return useVehicleHealthStore.getState().vehicleHealth[vehicleId];\n    }\n}));\n\n/**\n * Calculate whether a projectile hit a vehicle and where\n * @param {THREE.Vector3} projectilePosition - Position of the projectile\n * @param {Object} vehicle - Vehicle object with position, rotation and type properties\n * @returns {Object|null} Hit result with location or null if no hit\n */\nexport function checkVehicleHit(projectilePosition, vehicle) {\n    const vehicleCategory = VEHICLE_CATEGORY_MAP[vehicle.type];\n    const healthDefaults = VEHICLE_HEALTH_DEFAULTS[vehicleCategory];\n\n    // Skip if no matching vehicle type/category\n    if (!healthDefaults) {\n        return null;\n    }\n\n    // Create a bounding box for the vehicle based on its position, rotation and hitbox size\n    const hitboxSize = healthDefaults.hitboxSize;\n\n    // Get vehicle position as a Vector3\n    const boundingBoxCenter = new THREE.Vector3(\n        vehicle.position.x || 0,\n        vehicle.position.y || 0,\n        vehicle.position.z || 0\n    );\n\n    // Create a rotation matrix from vehicle rotation\n    const vehicleMatrix = new THREE.Matrix4().makeRotationFromEuler(\n        new THREE.Euler(\n            vehicle.rotation.x || 0,\n            vehicle.rotation.y || 0,\n            vehicle.rotation.z || 0\n        )\n    );\n\n    // Create an oriented bounding box (OBB) by setting up corner vertices\n    const halfExtents = new THREE.Vector3(\n        hitboxSize.x * 0.75, // Increased hitbox size for better hit detection\n        hitboxSize.y * 0.75,\n        hitboxSize.z * 0.75\n    );\n\n    // Create a standard axis-aligned bounding box\n    const boundingBox = new THREE.Box3(\n        new THREE.Vector3().copy(boundingBoxCenter).sub(halfExtents),\n        new THREE.Vector3().copy(boundingBoxCenter).add(halfExtents)\n    );\n\n    // Check if projectile position is inside bounding box\n    // Note: This is simplified collision and doesn't account for rotation,\n    // but should be enough for gameplay mechanics\n    if (boundingBox.containsPoint(projectilePosition)) {\n        // Determine hit location based on relative position within the vehicle\n        // First transform projectile position to vehicle's local space\n        const localPos = projectilePosition.clone().sub(boundingBoxCenter);\n\n        // Use invert instead of getInverse (deprecated)\n        const inverseMatrix = new THREE.Matrix4().copy(vehicleMatrix).invert();\n        localPos.applyMatrix4(inverseMatrix);\n\n        // Determine hit location based on local coordinates\n        let hitLocation;\n\n        // More precise hit location determination for different vehicle types\n        if (vehicleCategory === 'TANK') {\n            // Tank-specific hit locations\n            if (localPos.y > hitboxSize.y * 0.3) {\n                hitLocation = 'turret';\n            } else if (localPos.y < -hitboxSize.y * 0.3) {\n                hitLocation = 'tracks';\n            } else if (localPos.z > hitboxSize.z * 0.3) {\n                hitLocation = 'front';\n            } else if (localPos.z < -hitboxSize.z * 0.3) {\n                hitLocation = 'rear';\n            } else {\n                hitLocation = 'body';\n            }\n        } else if (vehicleCategory === 'IFV') {\n            // IFV-specific hit locations\n            if (localPos.y > hitboxSize.y * 0.3) {\n                hitLocation = 'turret';\n            } else if (localPos.y < -hitboxSize.y * 0.3) {\n                hitLocation = 'wheels';\n            } else if (localPos.z > hitboxSize.z * 0.3) {\n                hitLocation = 'front';\n            } else if (localPos.z < -hitboxSize.z * 0.3) {\n                hitLocation = 'rear';\n            } else {\n                hitLocation = 'body';\n            }\n        } else if (vehicleCategory === 'CIVILIAN_TRUCK' || vehicleCategory === 'MILITARY_TRUCK') {\n            // Truck-specific hit locations\n            if (localPos.z > hitboxSize.z * 0.2) {\n                hitLocation = 'cabin';\n            } else if (localPos.z < -hitboxSize.z * 0.2) {\n                hitLocation = 'cargo';\n            } else if (localPos.y < -hitboxSize.y * 0.3) {\n                hitLocation = 'wheels';\n            } else if (localPos.z > 0 && localPos.y > 0) {\n                hitLocation = 'engine';\n            } else {\n                hitLocation = 'body';\n            }\n        } else if (vehicleCategory === 'CAR') {\n            // Car-specific hit locations\n            if (localPos.z > hitboxSize.z * 0.3) {\n                hitLocation = 'engine';\n            } else if (localPos.z < -hitboxSize.z * 0.3) {\n                hitLocation = 'rear';\n            } else if (localPos.y < -hitboxSize.y * 0.3) {\n                hitLocation = 'wheels';\n            } else if (localPos.z > 0) {\n                hitLocation = 'cabin';\n            } else {\n                hitLocation = 'body';\n            }\n        } else {\n            // Default hit location for unknown vehicle types\n            hitLocation = 'body';\n        }\n\n        return {\n            hit: true,\n            location: hitLocation,\n            position: projectilePosition.clone(),\n            distanceFromCenter: localPos.length()\n        };\n    }\n\n    return null; // No hit\n}\n\n/**\n * Utility function to create visual effects for damaged vehicles\n * @param {Object} vehicleHealth - Health data for the vehicle\n * @returns {Array} Array of effect components to render\n */\nexport function createDamageEffects(vehicleHealth) {\n    if (!vehicleHealth || vehicleHealth.isDead || vehicleHealth.visualEffects.length === 0) {\n        return [];\n    }\n\n    // Map of effect types to their rendering components\n    // These would be implemented separately in a visual effects system\n    const effects = [];\n\n    vehicleHealth.visualEffects.forEach(effectType => {\n        switch (effectType) {\n            case 'LIGHT_SMOKE':\n                effects.push({\n                    type: 'smoke',\n                    size: 0.5,\n                    color: '#888888',\n                    opacity: 0.4,\n                    rate: 0.2\n                });\n                break;\n            case 'MEDIUM_SMOKE':\n                effects.push({\n                    type: 'smoke',\n                    size: 1.0,\n                    color: '#555555',\n                    opacity: 0.6,\n                    rate: 0.5\n                });\n                break;\n            case 'HEAVY_SMOKE':\n                effects.push({\n                    type: 'smoke',\n                    size: 1.5,\n                    color: '#333333',\n                    opacity: 0.8,\n                    rate: 0.8\n                });\n                break;\n            case 'FIRE':\n                effects.push({\n                    type: 'fire',\n                    size: 0.8,\n                    intensity: 1.2,\n                    flickerSpeed: 0.1\n                });\n                break;\n            case 'SPARK':\n                effects.push({\n                    type: 'spark',\n                    size: 0.3,\n                    rate: 0.4,\n                    color: '#ffaa00'\n                });\n                break;\n            case 'DESTROYED':\n                effects.push({\n                    type: 'wreckage',\n                    blackenFactor: 0.8\n                });\n                break;\n            default:\n                break;\n        }\n    });\n\n    return effects;\n} ","import * as THREE from 'three';\n// Import the vehicle health system\nimport { checkVehicleHit, useVehicleHealthStore, VEHICLE_CATEGORY_MAP } from './VehicleHealthSystem';\n\n// FPS Tracking for performance optimization\nwindow.currentFps = 60; // Initialize with ideal FPS\nwindow.fpsHistory = []; // Store recent FPS values for stability\nwindow.lowFpsWarning = false; // Flag for low FPS warning\nlet frameCount = 0;\nlet lastFpsUpdateTime = 0;\nconst FPS_HISTORY_LENGTH = 5; // Keep track of last 5 FPS readings for stability\n\n// Update FPS calculation every 0.5 seconds\nif (typeof window !== 'undefined') {\n    const updateFps = () => {\n        const now = performance.now();\n        const elapsed = now - lastFpsUpdateTime;\n\n        if (elapsed >= 500) { // Update every 0.5 seconds\n            const instantFps = frameCount * (1000 / elapsed);\n\n            // Add to history and keep only the last N readings\n            window.fpsHistory.push(instantFps);\n            if (window.fpsHistory.length > FPS_HISTORY_LENGTH) {\n                window.fpsHistory.shift();\n            }\n\n            // Calculate average FPS for more stable readings\n            const avgFps = window.fpsHistory.reduce((sum, fps) => sum + fps, 0) /\n                window.fpsHistory.length;\n\n            // Update the current FPS with the smoothed value\n            window.currentFps = avgFps;\n\n            // Check for low FPS conditions\n            if (avgFps < 30) {\n                // Set low FPS warning flag for game to adapt\n                window.lowFpsWarning = true;\n\n                // If this is persistent low FPS, consider adjusting global quality settings\n                if (window.fpsHistory.every(fps => fps < 30)) {\n                    // Publish event for game to respond to persistent performance issues\n                    if (!window.persistentLowFpsWarning) {\n                        window.persistentLowFpsWarning = true;\n                        window.dispatchEvent(new CustomEvent('persistentLowFps', {\n                            detail: { averageFps: avgFps }\n                        }));\n                    }\n                }\n            } else {\n                window.lowFpsWarning = false;\n                window.persistentLowFpsWarning = false;\n            }\n\n            lastFpsUpdateTime = now;\n            frameCount = 0;\n        } else {\n            frameCount++;\n        }\n\n        requestAnimationFrame(updateFps);\n    };\n\n    requestAnimationFrame(updateFps);\n}\n\n// Weapon types and their damage profiles\nexport const WEAPON_TYPES = {\n    // Bomber weapons\n    ANTI_TANK_MINE: 'ANTI_TANK_MINE',\n    RPG: 'RPG',\n    MORTAR: 'MORTAR',\n\n    // Grenadier weapons\n    DART: 'DART',\n    GRENADE: 'GRENADE',\n    SHOTGUN: 'SHOTGUN',\n\n    // Kamikaze drone weapon\n    KAMIKAZE: 'KAMIKAZE'\n};\n\n// Damage profiles for each weapon type\nexport const DAMAGE_PROFILES = {\n    // Bomber weapons\n    [WEAPON_TYPES.ANTI_TANK_MINE]: {\n        innerRadius: 8, // meters\n        outerRadius: 20, // meters\n        innerDamage: 30,\n        outerDamage: 10,\n        falloff: 'EXPONENTIAL', // damage falls off exponentially\n        explodesOnImpact: true, // Always explode on impact with vehicles\n        visualEffect: {\n            radius: 4,\n            duration: 10, // frames\n            color: 0xff5500, // orange-red\n            intensity: 2.5,\n            secondaryEffects: {\n                debris: { count: 45, size: 1.2 },\n                smoke: { volume: 2.0, duration: 1.8 },\n                shockwave: true\n            }\n        }\n    },\n    [WEAPON_TYPES.RPG]: {\n        innerRadius: 6,\n        outerRadius: 15,\n        innerDamage: 25,\n        outerDamage: 8,\n        falloff: 'EXPONENTIAL',\n        explodesOnImpact: true, // Always explode on impact with vehicles\n        visualEffect: {\n            radius: 3,\n            duration: 10,\n            color: 0xff3300, // bright red-orange\n            intensity: 0.7,\n            secondaryEffects: {\n                debris: { count: 35, size: 0.8 },\n                smoke: { volume: 1.5, duration: 1.3 },\n                shockwave: true,\n                tracer: true\n            }\n        }\n    },\n    [WEAPON_TYPES.MORTAR]: {\n        innerRadius: 10,\n        outerRadius: 25,\n        innerDamage: 20,\n        outerDamage: 12,\n        falloff: 'EXPONENTIAL',\n        explodesOnImpact: true, // Always explode on impact with vehicles\n        visualEffect: {\n            radius: 3,\n            duration: 10,\n            color: 0x222222, // darker with smoke\n            intensity: 1.4,\n            secondaryEffects: {\n                debris: { count: 60, size: 1.5 },\n                smoke: { volume: 2.5, duration: 2.0 },\n                shockwave: true,\n                dustCloud: true\n            }\n        }\n    },\n\n    // Grenadier weapons\n    [WEAPON_TYPES.DART]: {\n        innerRadius: 5,\n        outerRadius: 12,\n        innerDamage: 22,\n        outerDamage: 8,\n        falloff: 'LINEAR',\n        explodesOnImpact: true, // Always explode on impact with vehicles\n        visualEffect: {\n            radius: 2.0,\n            duration: 20,\n            color: 0x00ffff, // cyan\n            intensity: 1.5,\n            secondaryEffects: {\n                debris: { count: 20, size: 0.5 },\n                smoke: { volume: 1.0, duration: 1.0 },\n                energyField: true\n            }\n        }\n    },\n    [WEAPON_TYPES.GRENADE]: {\n        innerRadius: 10,\n        outerRadius: 25,\n        innerDamage: 30,\n        outerDamage: 12,\n        falloff: 'EXPONENTIAL',\n        explodesOnImpact: true, // Always explode on impact with vehicles\n        visualEffect: {\n            radius: 2.5,\n            duration: 35,\n            color: 0xffaa00, // amber\n            intensity: 2.5,\n            secondaryEffects: {\n                debris: { count: 50, size: 0.9 },\n                smoke: { volume: 2.0, duration: 1.8 },\n                shockwave: true,\n                fragments: true\n            }\n        }\n    },\n    [WEAPON_TYPES.SHOTGUN]: {\n        innerRadius: 4,\n        outerRadius: 10,\n        innerDamage: 18,\n        outerDamage: 6,\n        falloff: 'EXPONENTIAL',\n        shape: 'CONE',\n        coneAngle: Math.PI / 6, // 30 degrees cone\n        explodesOnImpact: true, // Always explode on impact with vehicles\n        visualEffect: {\n            radius: 3,\n            duration: 15,\n            color: 0xffffaa, // yellowish flash\n            intensity: 1.5,\n            shape: 'CONE',\n            coneAngle: Math.PI / 6,\n            secondaryEffects: {\n                debris: { count: 20, size: 0.3 },\n                smoke: { volume: 0.8, duration: 0.6 },\n                muzzleFlash: true\n            }\n        }\n    },\n\n    // Kamikaze drone weapon\n    [WEAPON_TYPES.KAMIKAZE]: {\n        innerRadius: 15, // 15m inner radius as specified\n        outerRadius: 25, // 25m outer radius as specified\n        innerDamage: 80, // Updated to 80 damage in inner radius\n        outerDamage: 50, // Updated to 50 damage in outer radius\n        falloff: 'EXPONENTIAL',\n        explodesOnImpact: true, // Always explode on impact with vehicles\n        visualEffect: {\n            radius: 5, // Larger explosion radius\n            duration: 15, // Longer duration\n            color: 0xff0000, // Bright red explosion\n            intensity: 3.0, // Higher intensity\n            secondaryEffects: {\n                debris: { count: 60, size: 1.5 },\n                smoke: { volume: 2.5, duration: 2.0 },\n                shockwave: true,\n                fragments: true,\n                dustCloud: true\n            }\n        }\n    }\n};\n\n/**\n * Calculate damage based on distance from explosion center\n * @param {string} weaponType - The type of weapon \n * @param {THREE.Vector3} explosionPosition - Position of the explosion\n * @param {THREE.Vector3} targetPosition - Position of the target\n * @returns {number} - The calculated damage amount\n */\nexport function calculateDamage(weaponType, explosionPosition, targetPosition) {\n    const profile = DAMAGE_PROFILES[weaponType];\n    if (!profile) return 0;\n\n    // Calculate distance from explosion to target (using squared distance for performance)\n    const dx = explosionPosition.x - targetPosition.x;\n    const dy = explosionPosition.y - targetPosition.y;\n    const dz = explosionPosition.z - targetPosition.z;\n    const distanceSquared = dx * dx + dy * dy + dz * dz;\n\n    // Special case for shotgun cone shape\n    if (weaponType === WEAPON_TYPES.SHOTGUN && profile.shape === 'CONE') {\n        // TODO: Implement cone detection when direction vector is provided\n        // For now, continue with radius-based calculation\n    }\n\n    // No damage beyond outer radius (using squared distance for performance)\n    const outerRadiusSquared = profile.outerRadius * profile.outerRadius;\n    if (distanceSquared > outerRadiusSquared) return 0;\n\n    // Full damage within inner radius\n    const innerRadiusSquared = profile.innerRadius * profile.innerRadius;\n    if (distanceSquared <= innerRadiusSquared) return profile.innerDamage;\n\n    // Calculate actual distance for falloff calculation\n    const distance = Math.sqrt(distanceSquared);\n\n    // Calculate falloff based on specified type\n    const ratio = (distance - profile.innerRadius) / (profile.outerRadius - profile.innerRadius);\n\n    // Use lookup or precomputed values for common falloff types for better performance\n    return profile.falloff === 'EXPONENTIAL'\n        ? profile.innerDamage * Math.pow(1 - ratio, 2)  // Exponential falloff\n        : profile.innerDamage - (ratio * (profile.innerDamage - profile.outerDamage)); // Linear falloff\n}\n\n/**\n * Apply explosion damage to all targets in range\n * @param {string} weaponType - The type of weapon\n * @param {THREE.Vector3} explosionPosition - Position of the explosion\n * @param {Array} targets - Array of target objects with position property\n */\nexport function applyExplosionDamage(weaponType, explosionPosition, targets) {\n    // Get the applyDamage function from the vehicle health store\n    const applyDamage = useVehicleHealthStore.getState().applyDamage;\n\n    // Early return if no targets or invalid weaponType\n    if (!targets || targets.length === 0 || !DAMAGE_PROFILES[weaponType]) {\n        return;\n    }\n\n    // Get damage profile for quick reference\n    const profile = DAMAGE_PROFILES[weaponType];\n    const outerRadiusSquared = profile.outerRadius * profile.outerRadius;\n\n    // Performance optimization: Filter targets by distance first\n    // This avoids processing targets that are definitely out of range\n    const potentialTargets = targets.filter(target => {\n        if (!target || !target.position) return false;\n\n        // Quick distance squared check\n        const dx = explosionPosition.x - target.position.x;\n        const dy = explosionPosition.y - target.position.y;\n        const dz = explosionPosition.z - target.position.z;\n        const distanceSquared = dx * dx + dy * dy + dz * dz;\n\n        // Only include targets within outer radius\n        return distanceSquared <= outerRadiusSquared * 1.1; // Small buffer for safety\n    });\n\n    // If no targets in range, return early\n    if (potentialTargets.length === 0) {\n        return;\n    }\n\n    // Process targets in batches to avoid blocking the main thread\n    const processBatch = (startIndex, batchSize) => {\n        const endIndex = Math.min(startIndex + batchSize, potentialTargets.length);\n\n        for (let i = startIndex; i < endIndex; i++) {\n            const target = potentialTargets[i];\n\n            // For vehicle targets with userData containing vehicleId\n            if (target.userData && target.userData.vehicleId) {\n                processVehicleTarget(target, weaponType, explosionPosition, applyDamage);\n            }\n            // For legacy targets with takeDamage method\n            else if (typeof target.takeDamage === 'function') {\n                const damage = calculateDamage(weaponType, explosionPosition, target.position);\n                if (damage > 0) {\n                    target.takeDamage(damage);\n                }\n            }\n        }\n\n        // Process next batch if there are more targets\n        if (endIndex < potentialTargets.length) {\n            setTimeout(() => {\n                processBatch(endIndex, batchSize);\n            }, 0);\n        }\n    };\n\n    // Start processing targets in batches of 10 (reduced from 20 for smoother frames)\n    processBatch(0, 10);\n}\n\n/**\n * Process a vehicle target for damage calculation and application\n * @private\n */\nfunction processVehicleTarget(target, weaponType, explosionPosition, applyDamage) {\n    // Check for direct hit and hit location\n    const hit = checkVehicleHit(explosionPosition, {\n        position: target.position,\n        rotation: target.rotation,\n        type: target.userData.vehicleType || 'car_a' // Default if not specified\n    });\n\n    // Calculate damage\n    const damage = calculateDamage(weaponType, explosionPosition, target.position);\n\n    if (damage <= 0) {\n        return;\n    }\n\n    if (hit) {\n        // Direct hit - apply damage with hit location info\n        applyDamage(target.userData.vehicleId, damage, hit.location, weaponType);\n    } else {\n        // Explosion radius damage - apply general damage to the body\n        applyDamage(target.userData.vehicleId, damage, 'body', weaponType);\n    }\n}\n\n/**\n * Create explosion effect\n * @param {string} weaponType - The type of weapon\n * @param {THREE.Vector3} position - Position of explosion\n * @returns {Object} - Data needed to render explosion effect\n */\nexport function createExplosionEffect(weaponType, position) {\n    // Performance optimization for low FPS situations\n    // If lots of explosions are happening, downgrade the visual quality\n    const fpsAdjustment = window.performance && window.performance.now ?\n        Math.min(1.0, 60 / (window.currentFps || 60)) : 1.0;\n\n    const profile = DAMAGE_PROFILES[weaponType];\n\n    // Early return with minimal data for shotgun (handled separately)\n    if (weaponType === WEAPON_TYPES.SHOTGUN) {\n        // Even more aggressive optimization for shotgun effects - completely disabled at very low FPS\n        const currentFps = window.currentFps || 60;\n        if (currentFps < 25) {\n            // At extremely low FPS, just return position for damage calculation but no visual effect\n            return {\n                position: position.clone(),\n                type: weaponType,\n                noVisual: true,\n                startTime: Date.now()\n            };\n        }\n\n        // Further reduce shotgun visual effects when FPS is below threshold\n        const shotgunFpsThreshold = 45; // Higher threshold specifically for shotgun effects\n        const shotgunSpecificAdjustment = currentFps < shotgunFpsThreshold ?\n            Math.min(0.4, 60 / (window.currentFps || 60)) : 0.8;\n\n        return {\n            position: position.clone(),\n            radius: profile.outerRadius / 4 * shotgunSpecificAdjustment, // Even smaller radius\n            duration: 1,\n            type: weaponType,\n            startTime: Date.now()\n        };\n    }\n\n    const visual = profile.visualEffect;\n\n    // Scale down particle counts and visual effects based on current FPS\n    const debrisCount = Math.floor((visual.secondaryEffects.debris?.count || 0) * fpsAdjustment);\n    const smokeVolume = (visual.secondaryEffects.smoke?.volume || 0) * fpsAdjustment;\n\n    // Create standardized explosion data structure with adjusted values\n    return {\n        position: position.clone(),\n        radius: visual.radius * fpsAdjustment,  // Smaller radius when FPS is low\n        duration: visual.duration,\n        color: visual.color,\n        intensity: visual.intensity * fpsAdjustment,  // Lower intensity when FPS is low\n\n        // Shape details (cone or sphere)\n        shape: visual.shape || 'SPHERE',\n        coneAngle: visual.coneAngle,\n\n        // Process secondary effects with the new structure and FPS adjustment\n        secondaryEffects: {\n            // Debris settings - reduce count when FPS is low\n            debris: {\n                count: debrisCount,\n                size: visual.secondaryEffects.debris?.size || 0\n            },\n\n            // Smoke settings - reduce volume when FPS is low\n            smoke: {\n                volume: smokeVolume,\n                duration: visual.secondaryEffects.smoke?.duration || 0\n            },\n\n            // Boolean flags for special effects\n            shockwave: visual.secondaryEffects.shockwave && fpsAdjustment > 0.7,\n            dustCloud: visual.secondaryEffects.dustCloud && fpsAdjustment > 0.7,\n            energyField: visual.secondaryEffects.energyField && fpsAdjustment > 0.8,\n            fragments: visual.secondaryEffects.fragments && fpsAdjustment > 0.7,\n            muzzleFlash: visual.secondaryEffects.muzzleFlash,\n            tracer: visual.secondaryEffects.tracer\n        },\n\n        // Metadata\n        type: weaponType,\n        startTime: Date.now(),\n        quality: fpsAdjustment  // Store quality level for renderer reference\n    };\n}\n\n/**\n * Convert weapon type string to readable name\n * @param {string} weaponType - The internal weapon type constant\n * @returns {string} - Human readable weapon name\n */\nexport function getWeaponName(weaponType) {\n    switch (weaponType) {\n        case WEAPON_TYPES.ANTI_TANK_MINE: return 'Anti-Tank Mine';\n        case WEAPON_TYPES.RPG: return 'RPG';\n        case WEAPON_TYPES.MORTAR: return 'Mortar';\n        case WEAPON_TYPES.DART: return 'Dart';\n        case WEAPON_TYPES.GRENADE: return 'Grenade';\n        case WEAPON_TYPES.SHOTGUN: return 'Shotgun';\n        case WEAPON_TYPES.KAMIKAZE: return 'Kamikaze';\n        default: return 'Unknown Weapon';\n    }\n}\n\n/**\n * Create vehicle hitbox for collision testing\n * @param {Object} vehicle - The vehicle object with position, rotation, and hitbox properties\n * @returns {THREE.Box3} - Axis-aligned bounding box for the vehicle\n */\nfunction createVehicleHitbox(vehicle) {\n    // Default hitbox dimensions if not specified\n    const dimensions = vehicle.hitbox || {\n        width: 1.33,  // Width (left/right)\n        height: 1.33, // Height (up/down)\n        depth: 4.0   // Depth (front/back)\n    };\n\n    // Create a box with the correct dimensions\n    const halfWidth = dimensions.width / 2;\n    const halfHeight = dimensions.height / 2;\n    const halfDepth = dimensions.depth / 2;\n\n    // Create the box based on vehicle's rotation\n    const rotation = vehicle.rotation.y || 0;\n\n    // For vehicles oriented along X axis vs Z axis\n    const isAlongX = Math.abs(Math.sin(rotation)) > 0.7;\n\n    // Determine the correct dimensions based on vehicle rotation\n    const xExtent = isAlongX ? halfDepth : halfWidth;\n    const zExtent = isAlongX ? halfWidth : halfDepth;\n\n    // Create min and max points for the box\n    const min = new THREE.Vector3(\n        vehicle.position.x - xExtent,\n        vehicle.position.y,\n        vehicle.position.z - zExtent\n    );\n\n    const max = new THREE.Vector3(\n        vehicle.position.x + xExtent,\n        vehicle.position.y + dimensions.height,\n        vehicle.position.z + zExtent\n    );\n\n    // Create and return the box\n    return new THREE.Box3(min, max);\n}\n\n/**\n * Test if a line segment intersects with a box\n * @param {THREE.Line3} line - Line segment to test\n * @param {THREE.Box3} box - Box to test against\n * @returns {boolean} - True if the line intersects the box\n */\nfunction lineBoxIntersection(line, box) {\n    // Simple point in box test first (for either endpoint)\n    if (box.containsPoint(line.start) || box.containsPoint(line.end)) {\n        return true;\n    }\n\n    // Use a ray approach with the line direction and length\n    const direction = new THREE.Vector3().subVectors(line.end, line.start).normalize();\n    const length = line.start.distanceTo(line.end);\n\n    // Create a ray from the line start in the direction of the line\n    const ray = new THREE.Ray(line.start, direction);\n\n    // Find intersection with box\n    const result = new THREE.Vector3();\n    if (ray.intersectBox(box, result)) {\n        // Check if intersection point is within the line segment length\n        const distToIntersection = line.start.distanceTo(result);\n        return distToIntersection <= length;\n    }\n\n    return false;\n}\n\n/**\n * Check if a projectile has collided with a vehicle using raycasting for more accurate detection\n * @param {Object} projectile - The projectile object with position and previousPosition properties\n * @param {THREE.Scene} scene - The scene to check for vehicle objects\n * @returns {Object|null} - The hit result with vehicle and position, or null if no collision\n */\nexport function checkProjectileVehicleCollision(projectile, scene) {\n    if (!projectile || !projectile.position || !scene) return null;\n\n    // If there's no previous position, just use the current position (first frame)\n    if (!projectile.previousPosition) {\n        projectile.previousPosition = projectile.position.clone();\n        return null;\n    }\n\n    // Start with a simple point-based collision check first (faster)\n    // This helps catch cases where a projectile might be inside a vehicle\n    const simpleCheckResult = checkSimpleVehicleCollision(projectile.position, scene);\n    if (simpleCheckResult) {\n        return simpleCheckResult;\n    }\n\n    // If simple check failed, use the more sophisticated raycasting approach\n    const direction = new THREE.Vector3().subVectors(\n        projectile.position,\n        projectile.previousPosition\n    ).normalize();\n\n    const rayLength = projectile.previousPosition.distanceTo(projectile.position);\n\n    // Simple spatial partitioning - only check vehicles within a reasonable distance\n    const searchRadius = Math.max(rayLength, 5.0);\n    const searchCenter = new THREE.Vector3().copy(projectile.position).add(\n        projectile.previousPosition).multiplyScalar(0.5);\n\n    // Create a raycaster with optimized settings for performance\n    const raycaster = new THREE.Raycaster(projectile.previousPosition, direction, 0, rayLength * 1.1);\n    raycaster.params.Line.threshold = 0.2;\n    raycaster.params.Points.threshold = 0.2;\n\n    // Function to collect only nearby vehicles for more efficient collision testing\n    const collectNearbyVehicles = (object, objects = []) => {\n        // Skip if the object is not visible or doesn't have userData\n        if (!object.visible || !object.userData) return objects;\n\n        // Quick distance check for early rejection\n        if (object.position) {\n            const distSquared = object.position.distanceToSquared(searchCenter);\n            if (distSquared > searchRadius * searchRadius * 1.5) {\n                return objects; // Skip objects too far away\n            }\n        }\n\n        // If this has vehicle data, include it\n        if (object.userData.vehicleId || object.userData.isVehiclePart ||\n            (object.userData.type && object.name && (\n                object.name.includes('vehicle') ||\n                object.name.includes('car') ||\n                object.name.includes('truck') ||\n                object.name.includes('tank')\n            ))\n        ) {\n            objects.push(object);\n        }\n\n        // Process children recursively (but only for objects that could be close enough)\n        if (object.children && object.children.length > 0) {\n            for (let child of object.children) {\n                collectNearbyVehicles(child, objects);\n            }\n        }\n\n        return objects;\n    };\n\n    // Collect potentially nearby vehicle objects\n    const nearbyVehicles = [];\n    scene.children.forEach(child => {\n        collectNearbyVehicles(child, nearbyVehicles);\n    });\n\n    // If no nearby vehicles, return early\n    if (nearbyVehicles.length === 0) return null;\n\n    // Try simple box-based check first (much faster)\n    for (const object of nearbyVehicles) {\n        if (!object.userData.vehicleId && !object.userData.isVehicle) continue;\n\n        const vehicleObject = {\n            position: object.position,\n            rotation: object.rotation,\n            hitbox: object.userData.hitbox\n        };\n\n        const hitbox = createVehicleHitbox(vehicleObject);\n\n        // Check line intersection\n        const line = new THREE.Line3(projectile.previousPosition, projectile.position);\n\n        if (lineBoxIntersection(line, hitbox) || hitbox.containsPoint(projectile.position)) {\n            return {\n                vehicle: object,\n                position: projectile.position.clone(),\n                hitLocation: 'body'\n            };\n        }\n    }\n\n    // If box test failed, try full raycasting against all nearby vehicles\n    const intersects = raycaster.intersectObjects(nearbyVehicles, true);\n\n    if (intersects.length === 0) return null;\n\n    // Get the closest intersection\n    const closestIntersection = intersects[0];\n    const hitObject = closestIntersection.object;\n    const hitPoint = closestIntersection.point;\n\n    // Find the vehicle this part belongs to\n    let vehicleObject = hitObject;\n    let hitLocation = 'body';\n    let parent = hitObject;\n\n    while (parent && !parent.userData.vehicleId) {\n        if (parent.userData.isVehiclePart && parent.userData.partType) {\n            hitLocation = parent.userData.partType;\n        }\n        parent = parent.parent;\n        if (parent && parent.userData.vehicleId) {\n            vehicleObject = parent;\n        }\n    }\n\n    if (hitObject.userData.vehicleId) {\n        vehicleObject = hitObject;\n    }\n\n    if (hitObject.userData.isVehiclePart && hitObject.userData.partType) {\n        hitLocation = hitObject.userData.partType;\n    }\n\n    const vehicleId = vehicleObject.userData.vehicleId;\n    const vehicleType = vehicleObject.userData.vehicleType || 'car_a';\n\n    if (!vehicleId) return null;\n\n    return {\n        vehicle: vehicleObject,\n        position: hitPoint,\n        hitLocation: hitLocation\n    };\n}\n\n/**\n * Simple point-based collision check with vehicles\n * This is a faster first-pass check\n */\nfunction checkSimpleVehicleCollision(position, scene) {\n    const collectVehiclesAtPoint = (object, results = []) => {\n        if (!object.visible || !object.userData) return results;\n\n        // Check if object is a vehicle or part\n        if (object.userData.vehicleId || object.userData.isVehiclePart) {\n            // Create a simple bounding box for the object\n            const box = new THREE.Box3().setFromObject(object);\n\n            // Check if position is inside the box\n            if (box.containsPoint(position)) {\n                let hitLocation = 'body';\n                let vehicleObject = object;\n\n                // Handle parts\n                if (object.userData.isVehiclePart && object.userData.partType) {\n                    hitLocation = object.userData.partType;\n                    // Find parent vehicle\n                    let parent = object.parent;\n                    while (parent && !parent.userData.vehicleId) {\n                        parent = parent.parent;\n                    }\n                    if (parent) vehicleObject = parent;\n                }\n\n                results.push({\n                    vehicle: vehicleObject,\n                    position: position.clone(),\n                    hitLocation: hitLocation\n                });\n            }\n        }\n\n        // Check children recursively\n        if (object.children && object.children.length > 0) {\n            for (let child of object.children) {\n                collectVehiclesAtPoint(child, results);\n            }\n        }\n\n        return results;\n    };\n\n    const hitVehicles = [];\n    scene.children.forEach(child => {\n        collectVehiclesAtPoint(child, hitVehicles);\n    });\n\n    return hitVehicles.length > 0 ? hitVehicles[0] : null;\n} ","import React, { useRef, useEffect, useState, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { WEAPON_TYPES } from '../../utils/WeaponPhysics';\n\n// Shared geometries and materials to reduce memory usage\nconst sharedGeometries = {\n    sphere: new THREE.SphereGeometry(1, 16, 16),\n    smallSphere: new THREE.SphereGeometry(1, 8, 8),\n    debris: new THREE.BoxGeometry(1, 1, 1)\n};\n\n// Create shared, reusable materials for better performance\nconst sharedMaterials = {\n    // Create a base material that will be cloned for each explosion\n    fireballBase: new THREE.MeshStandardMaterial({\n        transparent: true,\n        emissive: new THREE.Color(0xFFFFFF)\n    }),\n    debrisBase: new THREE.MeshStandardMaterial({\n        transparent: true\n    }),\n    smokeBase: new THREE.MeshStandardMaterial({\n        transparent: true\n    }),\n    flashBase: new THREE.MeshBasicMaterial({\n        color: 0xFFFFFF,\n        transparent: true\n    })\n};\n\n// Precomputed explosion colors for each weapon type\nconst explosionProperties = {\n    [WEAPON_TYPES.ANTI_TANK_MINE]: {\n        fireballColor: new THREE.Color(0xFF4500),\n        smokeColor: new THREE.Color(0x222222),\n        debrisColor: new THREE.Color(0x777777),\n        dustColor: new THREE.Color(0x998866),\n        lightIntensity: 2.5,\n        lightColor: 0xFF5500\n    },\n    [WEAPON_TYPES.RPG]: {\n        fireballColor: new THREE.Color(0xFF6347),\n        smokeColor: new THREE.Color(0x333333),\n        debrisColor: new THREE.Color(0x777777),\n        dustColor: new THREE.Color(0x887766),\n        lightIntensity: 3,\n        lightColor: 0xFF3300\n    },\n    [WEAPON_TYPES.MORTAR]: {\n        fireballColor: new THREE.Color(0xB22222),\n        smokeColor: new THREE.Color(0x111111),\n        debrisColor: new THREE.Color(0x555555),\n        dustColor: new THREE.Color(0x776655),\n        lightIntensity: 2.5,\n        lightColor: 0xDD2222\n    },\n    [WEAPON_TYPES.DART]: {\n        fireballColor: new THREE.Color(0x7CFC00),\n        smokeColor: new THREE.Color(0x99AA99),\n        debrisColor: new THREE.Color(0xAAFFAA),\n        dustColor: new THREE.Color(0xAABBAA),\n        lightIntensity: 1.5,\n        lightColor: 0x88FF00\n    },\n    [WEAPON_TYPES.GRENADE]: {\n        fireballColor: new THREE.Color(0xFFD700),\n        smokeColor: new THREE.Color(0x555555),\n        debrisColor: new THREE.Color(0x999999),\n        dustColor: new THREE.Color(0x998877),\n        lightIntensity: 2,\n        lightColor: 0xFFAA00\n    },\n    [WEAPON_TYPES.SHOTGUN]: {\n        fireballColor: new THREE.Color(0xFFFFAA),\n        smokeColor: new THREE.Color(0xDDDDDD),\n        debrisColor: new THREE.Color(0xDDDDDD),\n        dustColor: new THREE.Color(0xCCCCBB),\n        lightIntensity: 1,\n        lightColor: 0xFFFFAA\n    },\n    [WEAPON_TYPES.KAMIKAZE]: {\n        fireballColor: new THREE.Color(0xFF0000), // Bright red fireball\n        smokeColor: new THREE.Color(0x222222), // Dark smoke\n        debrisColor: new THREE.Color(0x666666), // Medium gray debris\n        dustColor: new THREE.Color(0x998866), // Dusty brown\n        lightIntensity: 3.5, // Very bright\n        lightColor: 0xFF1100 // Red-orange light\n    },\n    default: {\n        fireballColor: new THREE.Color(0xFF4500),\n        smokeColor: new THREE.Color(0x333333),\n        debrisColor: new THREE.Color(0x888888),\n        dustColor: new THREE.Color(0xAA9988),\n        lightIntensity: 2,\n        lightColor: 0xFF7700\n    }\n};\n\n// Particle type constants to avoid string literals\nconst PARTICLE_TYPES = {\n    DEBRIS: 'debris',\n    SMOKE: 'smoke',\n    DUST: 'dust',\n    SHOCKWAVE: 'shockwave'\n};\n\n// Animation performance constants\nconst ANIM_CONSTANTS = {\n    UPDATE_THRESHOLD: 0.02,      // Threshold for state updates\n    OPACITY_THRESHOLD: 0.01,     // Minimum particle opacity to render\n    FRAME_SKIP_THRESHOLD: 2,     // Frame skip for small explosions\n    BATCH_SIZE: 20,              // Particles to process per batch\n    MAX_DEBRIS: 60,              // Maximum debris particles\n    MAX_SMOKE: 50,               // Maximum smoke particles\n    MAX_DUST: 15,                // Maximum dust particles\n    MAX_SHOCKWAVE: 10            // Maximum shockwave particles\n};\n\n// Create a Vector3 pool for performance (reuse instead of creating new ones)\nconst vectorPool = {\n    _pool: [],\n    get: function () {\n        if (this._pool.length > 0) {\n            return this._pool.pop().set(0, 0, 0);\n        }\n        return new THREE.Vector3(0, 0, 0);\n    },\n    release: function (vector) {\n        this._pool.push(vector);\n    }\n};\n\nexport default function Explosion({ position, radius, type, duration = 30, onComplete, secondaryEffects = {} }) {\n    const groupRef = useRef();\n    const [progress, setProgress] = useState(0);\n    const [size, setSize] = useState(0.1);\n    const [opacity, setOpacity] = useState(1);\n    const [lifespan, setLifespan] = useState(duration);\n    const frameCount = useRef(0);\n    const lastProgressUpdate = useRef(0);\n    const lastSizeUpdate = useRef(0.1);\n\n    // Create optimized, cached materials based on explosion type\n    const materials = useMemo(() => {\n        const props = explosionProperties[type] || explosionProperties.default;\n\n        // Clone base materials to avoid modifying shared ones\n        const fireballMaterial = sharedMaterials.fireballBase.clone();\n        fireballMaterial.color = props.fireballColor.clone();\n        fireballMaterial.emissive = props.fireballColor.clone();\n\n        const debrisMaterial = sharedMaterials.debrisBase.clone();\n        debrisMaterial.color = props.debrisColor.clone();\n        debrisMaterial.emissive = props.debrisColor.clone();\n\n        const smokeMaterial = sharedMaterials.smokeBase.clone();\n        smokeMaterial.color = props.smokeColor.clone();\n\n        const dustMaterial = sharedMaterials.smokeBase.clone();\n        dustMaterial.color = props.dustColor.clone();\n\n        // Return all materials as a single object\n        return {\n            fireball: fireballMaterial,\n            debris: debrisMaterial,\n            smoke: smokeMaterial,\n            dust: dustMaterial,\n            flash: sharedMaterials.flashBase.clone()\n        };\n    }, [type]);\n\n    // Get explosion properties based on weapon type with fallback to default\n    const explosionProps = useMemo(() =>\n        explosionProperties[type] || explosionProperties.default,\n        [type]);\n\n    // Create optimized particle system with appropriate counts\n    const particles = useMemo(() => {\n        // Extract values from the new structured secondaryEffects\n        const debris = secondaryEffects.debris || { count: Math.floor(radius * 5), size: 0.7 };\n        const smoke = secondaryEffects.smoke || { volume: 1.0, duration: 1.0 };\n\n        // Cap particle counts for performance\n        const totalDebris = Math.min(ANIM_CONSTANTS.MAX_DEBRIS, Math.floor(debris.count));\n        const totalSmoke = Math.min(ANIM_CONSTANTS.MAX_SMOKE, Math.floor(radius * 8 * smoke.volume));\n\n        return generateParticles(\n            totalDebris,\n            totalSmoke,\n            debris.size,\n            radius,\n            duration,\n            secondaryEffects,\n            smoke.duration\n        );\n    }, [radius, duration, secondaryEffects]);\n\n    // Clean up materials when component unmounts\n    useEffect(() => {\n        return () => {\n            // Dispose cloned materials to prevent memory leaks\n            Object.values(materials).forEach(material => material.dispose());\n        };\n    }, [materials]);\n\n    // Optimized animation frame handler with batch processing and frame skipping\n    useFrame(() => {\n        if (!groupRef.current || lifespan <= 0) {\n            // Ensure cleanup happens if lifespan is already zero\n            if (lifespan <= 0 && onComplete) {\n                onComplete();\n            }\n            return;\n        }\n\n        frameCount.current++;\n\n        // Skip frames for smaller explosions (performance optimization)\n        if (radius < ANIM_CONSTANTS.FRAME_SKIP_THRESHOLD && frameCount.current % 2 !== 0) return;\n\n        // Calculate new progress - update state only when significant change\n        const newProgress = 1 - (lifespan / duration);\n        if (Math.abs(newProgress - lastProgressUpdate.current) > ANIM_CONSTANTS.UPDATE_THRESHOLD) {\n            lastProgressUpdate.current = newProgress;\n            setProgress(newProgress);\n\n            // Update material properties based on progress\n            updateMaterials(materials, newProgress);\n        }\n\n        // Optimize size updates with batched state updates\n        if (size < radius) {\n            const growthProgress = Math.min(1, newProgress * 2);\n            const targetSize = radius * Math.min(1, growthProgress * 1.2);\n            const growthRate = (targetSize - lastSizeUpdate.current) * 0.2;\n            const newSize = lastSizeUpdate.current + Math.max(0.05, growthRate);\n\n            if (Math.abs(newSize - lastSizeUpdate.current) > ANIM_CONSTANTS.UPDATE_THRESHOLD) {\n                lastSizeUpdate.current = newSize;\n                setSize(newSize);\n            }\n        }\n\n        // Optimize opacity updates\n        const shouldUpdateOpacity = newProgress < 0.4 ?\n            opacity !== 1 :\n            opacity > ANIM_CONSTANTS.OPACITY_THRESHOLD;\n\n        if (shouldUpdateOpacity) {\n            setOpacity(newProgress < 0.4 ? 1 : Math.max(0, opacity - (1 / (duration * 0.6))));\n        }\n\n        // Update particles with batched processing\n        updateParticlesBatch(particles, newProgress);\n\n        // Reduce lifespan\n        setLifespan(prev => prev - 1);\n\n        // Trigger completion\n        if (lifespan <= 1 && onComplete) {\n            try {\n                onComplete();\n            } catch (error) {\n                console.error(\"Error in explosion onComplete callback:\", error);\n            }\n        }\n    });\n\n    // Reset explosion when position changes\n    useEffect(() => {\n        setSize(0.1);\n        lastSizeUpdate.current = 0.1;\n        setOpacity(1);\n        setLifespan(duration);\n        setProgress(0);\n        lastProgressUpdate.current = 0;\n        frameCount.current = 0;\n\n        // Reset all particles\n        resetParticles(particles);\n\n        // Reset materials\n        updateMaterials(materials, 0);\n    }, [position, duration, particles, materials]);\n\n    // Filter active particles for rendering optimization - using memoization with better dependency tracking\n    const activeParticles = useMemo(() => {\n        // Group particles by type for more efficient rendering\n        const result = {\n            [PARTICLE_TYPES.DEBRIS]: [],\n            [PARTICLE_TYPES.SMOKE]: [],\n            [PARTICLE_TYPES.DUST]: [],\n            [PARTICLE_TYPES.SHOCKWAVE]: []\n        };\n\n        // Only process if progress has changed significantly\n        if (Math.abs(progress - lastProgressUpdate.current) < 0.05) {\n            return result;\n        }\n\n        // Filter and group active particles\n        for (const particle of particles) {\n            if (particle.active && particle.life > 0 && particle.opacity > ANIM_CONSTANTS.OPACITY_THRESHOLD) {\n                result[particle.type].push(particle);\n            }\n        }\n\n        return result;\n    }, [particles, progress, lastProgressUpdate]);\n\n    // Update materials based on animation progress\n    function updateMaterials(materials, progress) {\n        materials.fireball.opacity = opacity;\n        materials.fireball.emissiveIntensity = 2 * (1 - progress * 0.7);\n\n        materials.flash.opacity = Math.max(0, 1 - (progress / 0.2));\n\n        // No need to update debris/smoke/dust materials here as they're handled per-particle\n    }\n\n    return (\n        <group ref={groupRef} position={[position.x, position.y, position.z]}>\n            {/* Initial flash - only render during early phase */}\n            {progress < 0.2 && (\n                <mesh>\n                    <sphereGeometry args={[size * 1.2, 16, 16]} />\n                    <primitive object={materials.flash} attach=\"material\" />\n                </mesh>\n            )}\n\n            {/* Main fireball */}\n            <mesh scale={[size, size, size]}>\n                <primitive attach=\"geometry\" object={sharedGeometries.sphere} />\n                <primitive object={materials.fireball} attach=\"material\" />\n            </mesh>\n\n            {/* Render particles by type for better batching */}\n            {Object.entries(activeParticles).map(([type, particles]) => (\n                <ParticleGroup\n                    key={type}\n                    type={type}\n                    particles={particles}\n                    materials={materials}\n                    progress={progress}\n                />\n            ))}\n\n            {/* Dynamic light - only render during relevant phase */}\n            {progress < 0.7 && (\n                <pointLight\n                    color={explosionProps.lightColor}\n                    intensity={explosionProps.lightIntensity * (1 - Math.pow(progress, 1.5)) * 20}\n                    distance={radius * 15}\n                    decay={2}\n                />\n            )}\n        </group>\n    );\n}\n\n// Particle group component for better batching\nfunction ParticleGroup({ type, particles, materials, progress }) {\n    if (particles.length === 0) return null;\n\n    // Get the appropriate material for this particle type\n    let material;\n    let emissiveIntensity = 0;\n\n    switch (type) {\n        case PARTICLE_TYPES.DEBRIS:\n            material = materials.debris;\n            emissiveIntensity = 1 * (1 - progress);\n            break;\n        case PARTICLE_TYPES.SMOKE:\n            material = materials.smoke;\n            break;\n        case PARTICLE_TYPES.DUST:\n            material = materials.dust;\n            break;\n        case PARTICLE_TYPES.SHOCKWAVE:\n            material = materials.dust;\n            emissiveIntensity = 0.5 * (1 - progress);\n            break;\n        default:\n            material = materials.debris;\n    }\n\n    // Set material properties\n    material.emissiveIntensity = emissiveIntensity;\n\n    return (\n        <>\n            {particles.map((particle, index) => (\n                <mesh\n                    key={`${type}-${index}`}\n                    position={particle.position.toArray()}\n                    rotation={particle.rotation.toArray()}\n                    scale={[particle.size, particle.size, particle.size]}\n                >\n                    <primitive attach=\"geometry\" object={getGeometryForParticle(type)} />\n                    <meshStandardMaterial\n                        color={material.color}\n                        transparent\n                        opacity={particle.opacity}\n                        emissive={material.color}\n                        emissiveIntensity={emissiveIntensity}\n                    />\n                </mesh>\n            ))}\n        </>\n    );\n}\n\n// Get the appropriate geometry based on particle type - optimized to use type directly\nfunction getGeometryForParticle(type) {\n    if (type === PARTICLE_TYPES.DEBRIS) {\n        return sharedGeometries.debris;\n    }\n    return sharedGeometries.smallSphere;\n}\n\n// Optimized particle generation with better initial value distribution\nfunction generateParticles(totalDebris, totalSmoke, debrisSize, radius, duration, secondaryEffects, smokeDuration) {\n    const particles = [];\n\n    // Pre-calculate common values\n    const twoPI = Math.PI * 2;\n\n    // Generate debris particles\n    for (let i = 0; i < totalDebris; i++) {\n        const angle = Math.random() * twoPI;\n        const speed = 0.01 + Math.random() * 0.03;\n        const size = (0.05 + Math.random() * 0.15) * debrisSize;\n        const life = Math.floor(duration * (0.7 + Math.random() * 0.3));\n\n        // Create velocity vector from pool\n        const velocity = vectorPool.get().set(\n            Math.cos(angle) * speed * (0.5 + Math.random()),\n            0.01 + Math.random() * 0.03,\n            Math.sin(angle) * speed * (0.5 + Math.random())\n        );\n\n        particles.push({\n            active: false,\n            spawnDelay: Math.floor(Math.random() * 3),\n            position: vectorPool.get(),\n            velocity,\n            rotation: vectorPool.get().set(0, 0, 0),\n            rotationSpeed: vectorPool.get().set(\n                (Math.random() - 0.5) * 0.1,\n                (Math.random() - 0.5) * 0.1,\n                (Math.random() - 0.5) * 0.1\n            ),\n            size,\n            originalSize: size,\n            type: PARTICLE_TYPES.DEBRIS,\n            opacity: 0,\n            targetOpacity: 0.7 + Math.random() * 0.3,\n            life,\n            initialLife: life\n        });\n    }\n\n    // Generate smoke particles\n    for (let i = 0; i < totalSmoke; i++) {\n        const angle = Math.random() * twoPI;\n        const distance = Math.random() * radius * 0.8;\n        const speed = 0.003 + Math.random() * 0.007;\n        const size = 0.2 + Math.random() * 0.4;\n        const life = Math.floor(duration * (0.8 + Math.random() * 0.4) * smokeDuration);\n\n        particles.push({\n            active: false,\n            spawnDelay: 3 + Math.floor(Math.random() * 5),\n            position: vectorPool.get().set(\n                Math.cos(angle) * distance * 0.2,\n                0.2 + Math.random() * 0.3,\n                Math.sin(angle) * distance * 0.2\n            ),\n            velocity: vectorPool.get().set(\n                Math.cos(angle) * speed * 0.5,\n                0.005 + Math.random() * 0.01,\n                Math.sin(angle) * speed * 0.5\n            ),\n            rotation: vectorPool.get().set(0, 0, 0),\n            rotationSpeed: vectorPool.get().set(\n                (Math.random() - 0.5) * 0.02,\n                (Math.random() - 0.5) * 0.02,\n                (Math.random() - 0.5) * 0.02\n            ),\n            size,\n            originalSize: size,\n            type: PARTICLE_TYPES.SMOKE,\n            opacity: 0,\n            targetOpacity: 0.4 + Math.random() * 0.2,\n            life,\n            initialLife: life\n        });\n    }\n\n    // Add shockwave if specified\n    if (secondaryEffects.shockwave) {\n        const shockwaveCount = Math.min(ANIM_CONSTANTS.MAX_SHOCKWAVE, Math.max(8, radius * 3));\n\n        for (let i = 0; i < shockwaveCount; i++) {\n            const angle = (i / shockwaveCount) * twoPI;\n            const life = Math.floor(duration * 0.4);\n\n            particles.push({\n                active: false,\n                spawnDelay: 0,\n                position: vectorPool.get().set(0, 0.05, 0),\n                velocity: vectorPool.get().set(0, 0, 0),\n                rotation: vectorPool.get().set(Math.PI / 2, 0, angle),\n                rotationSpeed: vectorPool.get().set(0, 0, 0),\n                angle,\n                size: 0.2,\n                originalSize: 0.2,\n                type: PARTICLE_TYPES.SHOCKWAVE,\n                opacity: 0,\n                targetOpacity: 0.6,\n                life,\n                initialLife: life\n            });\n        }\n    }\n\n    // Add dust cloud if specified\n    if (secondaryEffects.dustCloud) {\n        const dustCount = Math.min(ANIM_CONSTANTS.MAX_DUST, Math.floor(radius * 4));\n\n        for (let i = 0; i < dustCount; i++) {\n            const angle = Math.random() * twoPI;\n            const distance = radius * 0.3 + Math.random() * radius * 0.5;\n            const speed = 0.002 + Math.random() * 0.005;\n            const size = 0.3 + Math.random() * 0.5;\n            const life = Math.floor(duration * 0.6 + Math.random() * duration * 0.4);\n\n            particles.push({\n                active: false,\n                spawnDelay: 5 + Math.floor(Math.random() * 7),\n                position: vectorPool.get().set(0, 0, 0),\n                velocity: vectorPool.get().set(\n                    Math.cos(angle) * speed * distance,\n                    0.001 + Math.random() * 0.004,\n                    Math.sin(angle) * speed * distance\n                ),\n                rotation: vectorPool.get().set(0, 0, 0),\n                rotationSpeed: vectorPool.get().set(0, (Math.random() - 0.5) * 0.02, 0),\n                size,\n                originalSize: size,\n                type: PARTICLE_TYPES.DUST,\n                opacity: 0,\n                targetOpacity: 0.3 + Math.random() * 0.2,\n                life,\n                initialLife: life\n            });\n        }\n    }\n\n    return particles;\n}\n\n// Optimized batch particle update with reduced calculations\nfunction updateParticlesBatch(particles, progress) {\n    const chunkSize = ANIM_CONSTANTS.BATCH_SIZE;\n    const particleCount = particles.length;\n\n    for (let i = 0; i < particleCount; i += chunkSize) {\n        const end = Math.min(i + chunkSize, particleCount);\n\n        for (let j = i; j < end; j++) {\n            const particle = particles[j];\n\n            // Skip inactive or dead particles\n            if (!particle.active) {\n                particle.spawnDelay--;\n                if (particle.spawnDelay <= 0) {\n                    particle.active = true;\n                }\n                continue;\n            }\n\n            if (particle.life <= 0) continue;\n\n            // Calculate this once per update\n            const particleProgress = 1 - (particle.life / particle.initialLife);\n\n            // Fade in particles - only update if needed\n            if (particle.opacity < particle.targetOpacity) {\n                particle.opacity = Math.min(\n                    particle.targetOpacity,\n                    particle.opacity + (particle.targetOpacity / 10)\n                );\n            }\n\n            // Use switch instead of if/else for better performance on type-specific updates\n            switch (particle.type) {\n                case PARTICLE_TYPES.SHOCKWAVE:\n                    updateShockwaveParticle(particle, particleProgress);\n                    break;\n                case PARTICLE_TYPES.DUST:\n                    updateDustParticle(particle, particleProgress);\n                    break;\n                case PARTICLE_TYPES.SMOKE:\n                    updateSmokeParticle(particle, particleProgress);\n                    break;\n                case PARTICLE_TYPES.DEBRIS:\n                default:\n                    updateDebrisParticle(particle, particleProgress);\n                    break;\n            }\n\n            // Decrement life\n            particle.life--;\n        }\n    }\n}\n\n// Particle update functions with optimized calculations\nfunction updateShockwaveParticle(particle, progress) {\n    // Faster calculation with less branching\n    const currentRadius = progress * 3;\n\n    particle.position.x = Math.cos(particle.angle) * currentRadius;\n    particle.position.z = Math.sin(particle.angle) * currentRadius;\n\n    // Combine conditions to reduce branches\n    if (progress > 0.7) {\n        particle.opacity = Math.max(0, particle.targetOpacity * (1 - ((progress - 0.7) / 0.3)));\n    }\n\n    particle.size = 0.1 + progress * 0.4;\n}\n\nfunction updateDustParticle(particle, progress) {\n    particle.position.add(particle.velocity);\n    particle.size = particle.originalSize * (1 + progress * 0.8);\n    particle.rotation.y += particle.rotationSpeed.y;\n\n    // Simplified opacity calculation\n    if (progress > 0.6) {\n        particle.opacity = particle.targetOpacity * Math.max(0, 1 - ((progress - 0.6) / 0.4));\n    }\n}\n\nfunction updateSmokeParticle(particle, progress) {\n    particle.position.add(particle.velocity);\n\n    // Combined calculation - apply gravity and buoyancy in one step\n    const buoyancyFactor = progress < 0.3 ? 0.0004 * (1 - progress / 0.3) : 0;\n    particle.velocity.y += buoyancyFactor - 0.0002;\n\n    // Calculate size directly\n    particle.size = particle.originalSize * (1 + progress * 2.0);\n\n    // Fade out in later stages\n    if (progress > 0.6) {\n        particle.opacity = particle.targetOpacity * Math.max(0, 1 - ((progress - 0.6) / 0.4));\n    }\n\n    // Apply rotation - consolidated\n    particle.rotation.x += particle.rotationSpeed.x;\n    particle.rotation.y += particle.rotationSpeed.y;\n    particle.rotation.z += particle.rotationSpeed.z;\n}\n\nfunction updateDebrisParticle(particle, progress) {\n    // Update position\n    particle.position.add(particle.velocity);\n\n    // Apply gravity\n    particle.velocity.y -= 0.002;\n\n    // Ground collision with simplified logic\n    if (particle.position.y < 0.05 && particle.velocity.y < 0) {\n        // Combined update for bounce and friction\n        particle.velocity.y *= -0.3;\n        particle.velocity.x *= 0.8;\n        particle.velocity.z *= 0.8;\n    }\n\n    // Fade out\n    if (progress > 0.7) {\n        particle.opacity = particle.targetOpacity * Math.max(0, 1 - ((progress - 0.7) / 0.3));\n    }\n\n    // Apply rotation - simplified for better performance\n    const { rotationSpeed, rotation } = particle;\n    rotation.x += rotationSpeed.x;\n    rotation.y += rotationSpeed.y;\n    rotation.z += rotationSpeed.z;\n}\n\n// Reset all particles efficiently with vector pooling\nfunction resetParticles(particles) {\n    for (let particle of particles) {\n        particle.opacity = 0;\n        particle.active = particle.spawnDelay === 0;\n        particle.life = particle.initialLife;\n\n        // Reset position\n        particle.position.set(0, 0, 0);\n\n        // Type-specific resets\n        if (particle.type === PARTICLE_TYPES.SHOCKWAVE) {\n            particle.position.set(0, 0.05, 0);\n        }\n        else if (particle.type === PARTICLE_TYPES.SMOKE) {\n            const angle = Math.random() * Math.PI * 2;\n            const distance = Math.random() * 0.2;\n            particle.position.set(\n                Math.cos(angle) * distance,\n                0.2 + Math.random() * 0.3,\n                Math.sin(angle) * distance\n            );\n        }\n    }\n} ","import React, { useState, useEffect, useRef } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport Explosion from './Explosion';\nimport { createExplosionEffect, WEAPON_TYPES, applyExplosionDamage, DAMAGE_PROFILES } from '../../utils/WeaponPhysics';\n\nexport default function ExplosionsManager() {\n    const [explosions, setExplosions] = useState([]);\n    const { scene } = useThree();\n    const objectsCacheRef = useRef(new Map()); // Cache for scene objects to avoid re-traversing scene\n    const explosionTimestampsRef = useRef(new Map()); // Store creation timestamps for safety cleanup\n\n    // Refs for shotgun optimizations - moved outside useEffect\n    const lastShotgunProcessTimeRef = useRef(0);\n    const objectsCacheForShotgunRef = useRef(new Map());\n    const SHOTGUN_THROTTLE_MS = 50; // Only process shotgun effects every 50ms\n\n    // Update object cache when scene changes\n    useEffect(() => {\n        // Function to update the object cache\n        const updateObjectCache = () => {\n            const newCache = new Map();\n            const processObject = (object) => {\n                // More thorough check for vehicles and their parts\n                if (object.userData && (object.userData.vehicleId ||\n                    object.userData.isVehiclePart ||\n                    object.userData.parentVehicleId ||\n                    object.userData.vehicleType)) {\n                    newCache.set(object.id, object);\n                } else if (object.isMesh) {\n                    // Still keep meshes for other types of collision\n                    newCache.set(object.id, object);\n                }\n\n                // Process children\n                if (object.children && object.children.length > 0) {\n                    object.children.forEach(processObject);\n                }\n            };\n            scene.children.forEach(processObject);\n            objectsCacheRef.current = newCache;\n        };\n\n        updateObjectCache();\n\n        // Use an interval instead of MutationObserver since THREE.js scenes don't trigger DOM mutations\n        const intervalId = setInterval(updateObjectCache, 2000);\n\n        return () => {\n            clearInterval(intervalId);\n        };\n    }, [scene]);\n\n    // Set up a custom event listener for creating explosions\n    useEffect(() => {\n        // Using refs that were moved to component scope\n        const handleExplosion = (event) => {\n            const { position, weaponType } = event.detail;\n\n            // Skip adding explosion animation for shotgun\n            if (weaponType === WEAPON_TYPES.SHOTGUN) {\n                // Apply throttling for shotgun events\n                const now = Date.now();\n                if (now - lastShotgunProcessTimeRef.current < SHOTGUN_THROTTLE_MS) {\n                    // Skip this shotgun event due to throttling\n                    return;\n                }\n                lastShotgunProcessTimeRef.current = now;\n\n                // Check if FPS is extremely low - if so, simplify further\n                const currentFps = window.currentFps || 60;\n                if (currentFps < 20) {\n                    // At extremely low FPS, we'll only process every other shotgun event\n                    if (Math.random() > 0.5) return;\n                }\n\n                // Only apply damage for shotgun without visual explosion effect\n                const damageRadius = DAMAGE_PROFILES[weaponType].outerRadius * 1.5; // Reduced from 2.0 for performance\n\n                // Use cached objects for performance if available\n                const cacheKey = `${Math.floor(position.x)},${Math.floor(position.y)},${Math.floor(position.z)}`;\n                let objectsInRange = [];\n\n                // Check if we have a recent cached result for a similar position\n                if (objectsCacheForShotgunRef.current.has(cacheKey) &&\n                    now - objectsCacheForShotgunRef.current.get(cacheKey).timestamp < 200) {\n                    objectsInRange = objectsCacheForShotgunRef.current.get(cacheKey).objects;\n                } else {\n                    // If no cache hit, find objects normally\n                    objectsInRange = findObjectsInRadius(position, damageRadius);\n\n                    // Cache the result\n                    objectsCacheForShotgunRef.current.set(cacheKey, {\n                        objects: objectsInRange,\n                        timestamp: now\n                    });\n\n                    // Limit cache size to prevent memory issues\n                    if (objectsCacheForShotgunRef.current.size > 20) {\n                        const oldestKey = Array.from(objectsCacheForShotgunRef.current.keys())[0];\n                        objectsCacheForShotgunRef.current.delete(oldestKey);\n                    }\n                }\n\n                if (objectsInRange.length > 0) {\n                    // Use requestIdleCallback if available for non-critical processing\n                    if (window.requestIdleCallback) {\n                        window.requestIdleCallback(() => {\n                            applyExplosionDamage(weaponType, position, objectsInRange);\n                        });\n                    } else {\n                        requestAnimationFrame(() => {\n                            applyExplosionDamage(weaponType, position, objectsInRange);\n                        });\n                    }\n                }\n                return;\n            }\n\n            // Create explosion effect data\n            const explosionEffect = createExplosionEffect(weaponType, position);\n\n            // Find all objects in range of the explosion\n            const damageRadius = explosionEffect.radius * 6; // Increased radius multiplier for better damage detection\n            const objectsInRange = findObjectsInRadius(position, damageRadius);\n\n            // Apply damage to objects\n            if (objectsInRange.length > 0) {\n                requestAnimationFrame(() => {\n                    applyExplosionDamage(weaponType, position, objectsInRange);\n                });\n            }\n\n            // Generate unique ID for explosion\n            const explosionId = `explosion-${Date.now().toString(36)}-${Math.random().toString(36).substr(2, 5)}`;\n\n            // Add timestamp to track this explosion\n            explosionTimestampsRef.current.set(explosionId, Date.now());\n\n            // Add to explosions state with a unique ID\n            setExplosions(prev => [...prev, {\n                ...explosionEffect,\n                id: explosionId\n            }]);\n        };\n\n        // Add event listener\n        window.addEventListener('weapon-impact', handleExplosion);\n\n        // Clean up\n        return () => {\n            window.removeEventListener('weapon-impact', handleExplosion);\n        };\n    }, [scene]);\n\n    // Add a safety cleanup mechanism for explosions that might be stuck\n    useEffect(() => {\n        const cleanupInterval = setInterval(() => {\n            const MAX_EXPLOSION_LIFETIME = 5000; // 5 seconds, adjust based on your max expected animation duration\n            const now = Date.now();\n            let stuckExplosionsFound = false;\n\n            // Check for explosions that have been around too long\n            explosionTimestampsRef.current.forEach((timestamp, id) => {\n                if (now - timestamp > MAX_EXPLOSION_LIFETIME) {\n                    // Remove from timestamps\n                    explosionTimestampsRef.current.delete(id);\n                    stuckExplosionsFound = true;\n                }\n            });\n\n            // If any stuck explosions found, update the state to remove them\n            if (stuckExplosionsFound) {\n                setExplosions(prev => {\n                    const validIds = Array.from(explosionTimestampsRef.current.keys());\n                    return prev.filter(explosion => validIds.includes(explosion.id));\n                });\n            }\n        }, 1000); // Check every second\n\n        return () => clearInterval(cleanupInterval);\n    }, []);\n\n    // Find all objects in radius around a position (optimized version)\n    const findObjectsInRadius = (position, radius) => {\n        const objectsInRange = [];\n        const searchPosition = position.clone();\n        const radiusSquared = radius * radius; // Squared distance for faster comparisons\n\n        // Recursive function to check all scene objects and their children\n        const checkObject = (object) => {\n            if (!object.position) return;\n\n            // Get world position of the object\n            const worldPosition = new THREE.Vector3();\n            object.getWorldPosition(worldPosition);\n\n            // Compare squared distances (faster than using distanceTo)\n            const dx = worldPosition.x - searchPosition.x;\n            const dy = worldPosition.y - searchPosition.y;\n            const dz = worldPosition.z - searchPosition.z;\n            const distanceSquared = dx * dx + dy * dy + dz * dz;\n\n            // If within radius, add to our list\n            if (distanceSquared <= radiusSquared) {\n                objectsInRange.push(object);\n            }\n\n            // Check children recursively\n            if (object.children && object.children.length > 0) {\n                for (const child of object.children) {\n                    checkObject(child);\n                }\n            }\n        };\n\n        // Check all top-level scene objects\n        scene.children.forEach(checkObject);\n\n        return objectsInRange;\n    };\n\n    // Handle explosion completion (removal)\n    const removeExplosion = (id) => {\n        // Remove from timestamps tracking\n        explosionTimestampsRef.current.delete(id);\n\n        // Remove from state\n        setExplosions(prev => prev.filter(explosion => explosion.id !== id));\n    };\n\n    // Render all active explosions\n    return (\n        <>\n            {explosions.map(explosion => (\n                <Explosion\n                    key={explosion.id}\n                    position={explosion.position}\n                    radius={explosion.radius}\n                    type={explosion.type}\n                    duration={explosion.duration}\n                    secondaryEffects={explosion.secondaryEffects}\n                    onComplete={() => removeExplosion(explosion.id)}\n                />\n            ))}\n        </>\n    );\n}\n\n// Helper function to trigger an explosion event\nexport function triggerExplosion(position, weaponType) {\n    // Create and dispatch custom event\n    const event = new CustomEvent('weapon-impact', {\n        detail: {\n            position,\n            weaponType\n        }\n    });\n\n    window.dispatchEvent(event);\n} ","import React, { useRef, useState } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Text } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Global setting to control whether damage indicators are displayed\nexport const damageIndicatorSettings = {\n    showDamageNumbers: false // Set to false to disable damage numbers by default\n};\n\nexport default function DamageIndicator({ position, damage = 0, duration = 60 }) {\n    const groupRef = useRef();\n    const [lifespan, setLifespan] = useState(duration);\n    const [offset, setOffset] = useState(0);\n\n    // Ensure damage is a number\n    const damageValue = typeof damage === 'number' ? damage : 0;\n\n    // Animation effect - float upward and fade out\n    useFrame(() => {\n        if (!groupRef.current) return;\n\n        // Move upward\n        setOffset(prev => prev + 0.02);\n\n        // Update position and opacity\n        if (groupRef.current) {\n            // Reduce lifespan\n            setLifespan(prev => prev - 1);\n\n            // Fade out towards the end\n            if (lifespan < duration * 0.3) {\n                groupRef.current.children.forEach(child => {\n                    if (child.material) {\n                        child.material.opacity = lifespan / (duration * 0.3);\n                    }\n                });\n            }\n\n            // Remove when lifespan is over\n            if (lifespan <= 0) {\n                // The component will be removed by the parent\n            }\n        }\n    });\n\n    return (\n        <group\n            ref={groupRef}\n            position={[position.x, position.y + 1 + offset, position.z]}\n            lookAt={[position.x, position.y + 10, position.z - 5]} // Always face camera\n        >\n            <Text\n                color={damageValue >= 15 ? \"red\" : damageValue >= 10 ? \"orange\" : \"yellow\"}\n                fontSize={0.5}\n                anchorX=\"center\"\n                anchorY=\"middle\"\n                outlineWidth={0.05}\n                outlineColor=\"#000000\"\n                material-transparent={true}\n            >\n                {damageValue.toFixed(0)}\n            </Text>\n        </group>\n    );\n}\n\n// Damage indicators manager component\nexport function DamageIndicatorsManager() {\n    const [indicators, setIndicators] = useState([]);\n\n    // Set up event listener for damage events\n    React.useEffect(() => {\n        const handleDamage = (event) => {\n            // If damage numbers are disabled, don't add new indicators\n            if (!damageIndicatorSettings.showDamageNumbers) return;\n\n            const { position, damage } = event.detail;\n\n            // Add new damage indicator\n            setIndicators(prev => [\n                ...prev,\n                {\n                    id: `damage-${Date.now()}-${Math.random()}`,\n                    position: position.clone(),\n                    damage,\n                    createdAt: Date.now()\n                }\n            ]);\n\n            // Clean up old indicators after their duration\n            setTimeout(() => {\n                setIndicators(prev =>\n                    prev.filter(indicator =>\n                        indicator.createdAt > Date.now() - 2000 // 2 seconds\n                    )\n                );\n            }, 2000);\n        };\n\n        window.addEventListener('damage-dealt', handleDamage);\n\n        return () => {\n            window.removeEventListener('damage-dealt', handleDamage);\n        };\n    }, []);\n\n    // If damage indicators are disabled, don't render anything\n    if (!damageIndicatorSettings.showDamageNumbers) return null;\n\n    return (\n        <>\n            {indicators.map(indicator => (\n                <DamageIndicator\n                    key={indicator.id}\n                    position={indicator.position}\n                    damage={indicator.damage}\n                />\n            ))}\n        </>\n    );\n}\n\n// Helper function to trigger a damage indicator\nexport function showDamageIndicator(position, damage) {\n    // If damage numbers are disabled, don't show anything\n    if (!damageIndicatorSettings.showDamageNumbers) return;\n\n    // Ensure damage is a number with a default value of 0\n    const damageValue = typeof damage === 'number' ? damage : 0;\n\n    const event = new CustomEvent('damage-dealt', {\n        detail: {\n            position: position.clone(),\n            damage: damageValue\n        }\n    });\n\n    window.dispatchEvent(event);\n} ","import React, { useRef, useEffect, useState, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\n/**\n * A dedicated component for shotgun muzzle flash effects\n * This replaces the explosion effect for shotguns with a more appropriate\n * muzzle flash visualization - optimized for performance\n */\nexport default function ShotgunMuzzleFlash({ position, direction, onComplete, isImpact }) {\n    const [life, setLife] = useState(isImpact ? 5 : 8); // Shorter lifetime, even shorter for impacts\n    const flashRef = useRef();\n    const particlesRef = useRef([]);\n\n    // Initialize particles on mount\n    useEffect(() => {\n        // Create particles for the shotgun muzzle flash\n        const particles = [];\n\n        // Get current FPS for adaptive particle count\n        const currentFps = window.currentFps || 60;\n        // Much more aggressive FPS-based particle reduction\n        const particleCountMultiplier = currentFps < 30 ? 0.2 :\n            (currentFps < 40 ? 0.4 :\n                (currentFps < 50 ? 0.6 : 0.8));\n\n        // For impact effects, use fewer particles\n        const impactMultiplier = isImpact ? 0.5 : 1.0;\n\n        // Create cone flash - reduce particle count based on FPS\n        const particleCount = Math.max(1, Math.floor(6 * particleCountMultiplier * impactMultiplier)); // Significantly reduced base particles\n        for (let i = 0; i < particleCount; i++) {\n            const angle = Math.random() * Math.PI * 2;\n            const radius = Math.random() * 0.3;\n\n            particles.push({\n                position: new THREE.Vector3(\n                    Math.cos(angle) * radius,\n                    Math.sin(angle) * radius,\n                    -0.5 - Math.random() * 0.5\n                ),\n                size: 0.05 + Math.random() * 0.1,\n                opacity: 0.7 + Math.random() * 0.3,\n                color: new THREE.Color(\n                    0.9 + Math.random() * 0.1,\n                    0.7 + Math.random() * 0.2,\n                    0.2 + Math.random() * 0.2\n                )\n            });\n        }\n\n        // Only add pellet particles if FPS is high enough and not an impact effect\n        if (currentFps > 40 && !isImpact) {\n            // Add some small pellet particles - significantly reduce count\n            const pelletCount = Math.max(1, Math.floor(3 * particleCountMultiplier)); // Drastically reduced from 6 to 3 base particles\n            for (let i = 0; i < pelletCount; i++) {\n                const spread = Math.random() * 0.2;\n                const distance = 0.5 + Math.random() * 1.0;\n                const angle = Math.random() * Math.PI * 2;\n\n                particles.push({\n                    position: new THREE.Vector3(\n                        Math.cos(angle) * spread,\n                        Math.sin(angle) * spread,\n                        -distance\n                    ),\n                    size: 0.03 + Math.random() * 0.05,\n                    opacity: 0.5 + Math.random() * 0.3,\n                    color: new THREE.Color(0.8, 0.8, 0.8) // Pellet color\n                });\n            }\n        }\n\n        particlesRef.current = particles;\n\n        // Auto-cleanup - shorter duration for better performance\n        const duration = isImpact ? 100 : 150; // Very short duration, even shorter for impacts\n        const timer = setTimeout(() => {\n            if (onComplete) onComplete();\n        }, duration);\n\n        return () => clearTimeout(timer);\n    }, [onComplete, isImpact]);\n\n    // Animation frame handling\n    useFrame(() => {\n        if (life <= 0) return;\n        setLife(prev => prev - 1);\n    });\n\n    // Calculate the rotation to align with direction\n    const rotation = useMemo(() => {\n        if (!direction) return [0, 0, 0];\n\n        // Default direction is -Z\n        const defaultDir = new THREE.Vector3(0, 0, -1);\n        const targetDir = new THREE.Vector3().copy(direction).normalize();\n\n        // Create quaternion for rotation from default to target direction\n        const quaternion = new THREE.Quaternion().setFromUnitVectors(defaultDir, targetDir);\n        const euler = new THREE.Euler().setFromQuaternion(quaternion);\n\n        return [euler.x, euler.y, euler.z];\n    }, [direction]);\n\n    // Early completion if life is over\n    if (life <= 0) return null;\n\n    // Scale opacity with life\n    const opacity = life / (isImpact ? 5 : 8);\n\n    // For very low FPS, use a simplified representation\n    const currentFps = window.currentFps || 60;\n    const useSimplifiedVersion = currentFps < 30;\n\n    if (useSimplifiedVersion) {\n        // Extremely simplified version for low FPS\n        return (\n            <group\n                ref={flashRef}\n                position={[position.x, position.y, position.z]}\n                rotation={rotation}\n            >\n                {/* Single center flash */}\n                <mesh>\n                    <sphereGeometry args={[0.2, 6, 6]} />\n                    <meshBasicMaterial\n                        color={0xffdd88}\n                        transparent={true}\n                        opacity={opacity * 0.8}\n                    />\n                </mesh>\n\n                {/* Light source with reduced intensity */}\n                <pointLight\n                    color={0xffdd88}\n                    intensity={4 * opacity}\n                    distance={2}\n                    decay={2}\n                />\n            </group>\n        );\n    }\n\n    return (\n        <group\n            ref={flashRef}\n            position={[position.x, position.y, position.z]}\n            rotation={rotation}\n        >\n            {/* Center flash */}\n            <mesh>\n                <sphereGeometry args={[0.2, 6, 6]} /> {/* Reduced geometry detail */}\n                <meshBasicMaterial\n                    color={0xffdd88}\n                    transparent={true}\n                    opacity={opacity * 0.8}\n                />\n            </mesh>\n\n            {/* Cone flash - only if not impact */}\n            {!isImpact && (\n                <mesh position={[0, 0, -0.1]}>\n                    <coneGeometry args={[0.3, 0.6, 6]} /> {/* Reduced geometry detail */}\n                    <meshBasicMaterial\n                        color={0xffffaa}\n                        transparent={true}\n                        opacity={opacity * 0.6}\n                    />\n                </mesh>\n            )}\n\n            {/* Particles - limit the number rendered based on FPS */}\n            {particlesRef.current.map((particle, i) => (\n                <mesh key={i} position={particle.position.toArray()}>\n                    <sphereGeometry args={[particle.size, 4, 4]} /> {/* Reduced geometry detail */}\n                    <meshBasicMaterial\n                        color={particle.color}\n                        transparent={true}\n                        opacity={particle.opacity * opacity}\n                    />\n                </mesh>\n            ))}\n\n            {/* Light source with conditional intensity */}\n            <pointLight\n                color={0xffdd88}\n                intensity={isImpact ? 3 * opacity : 5 * opacity}\n                distance={isImpact ? 2 : 3}\n                decay={2}\n            />\n        </group>\n    );\n} ","import React, { useState, useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport ShotgunMuzzleFlash from './ShotgunMuzzleFlash';\nimport { WEAPON_TYPES } from '../../utils/WeaponPhysics';\n\n/**\n * Manager component for shotgun-specific effects\n * This is used instead of explosions for shotgun weapons\n */\nexport default function ShotgunEffectsManager() {\n    // Track active muzzle flashes\n    const [muzzleFlashes, setMuzzleFlashes] = useState([]);\n\n    // Performance optimization refs\n    const pendingFlashesRef = useRef([]);\n    const processingBatchRef = useRef(false);\n    const lastProcessTimeRef = useRef(0);\n\n    // Batch process flashes for better performance\n    const processPendingFlashes = () => {\n        if (processingBatchRef.current || pendingFlashesRef.current.length === 0) return;\n\n        processingBatchRef.current = true;\n\n        // Limit the number of flashes processed in a single batch based on FPS\n        const currentFps = window.currentFps || 60;\n        const batchLimit = currentFps < 30 ? 1 : (currentFps < 45 ? 2 : 3);\n\n        // Get a batch of pending flashes\n        const flashesToProcess = pendingFlashesRef.current.slice(0, batchLimit);\n        pendingFlashesRef.current = pendingFlashesRef.current.slice(batchLimit);\n\n        // Add them to the state\n        setMuzzleFlashes(prev => [...prev, ...flashesToProcess]);\n\n        // Schedule the next batch if there are more pending\n        if (pendingFlashesRef.current.length > 0) {\n            setTimeout(() => {\n                processingBatchRef.current = false;\n                processPendingFlashes();\n            }, 0);\n        } else {\n            processingBatchRef.current = false;\n        }\n    };\n\n    // Add a flash to the pending queue\n    const queueMuzzleFlash = (flash) => {\n        pendingFlashesRef.current.push(flash);\n\n        // Start processing the queue if not already processing\n        if (!processingBatchRef.current) {\n            processPendingFlashes();\n        }\n    };\n\n    // Set up a custom event listener for shotgun firing\n    useEffect(() => {\n        // Handler for shotgun-specific effects with throttling\n        const handleShotgunFire = (event) => {\n            const { position, direction, weaponType } = event.detail;\n\n            // Only process shotgun events\n            if (weaponType !== WEAPON_TYPES.SHOTGUN) return;\n\n            // Apply throttling for shotgun events in low FPS situations\n            const now = Date.now();\n            const throttleTime = window.lowFpsWarning ? 150 : 50; // Longer throttle time when FPS is low\n\n            if (now - lastProcessTimeRef.current < throttleTime) {\n                // Skip this shotgun event due to throttling\n                console.log(\"Throttled shotgun effect\");\n                return;\n            }\n            lastProcessTimeRef.current = now;\n\n            // Create a unique ID for this muzzle flash\n            const id = `flash-${Date.now().toString(36)}-${Math.random().toString(36).substr(2, 5)}`;\n\n            // Add to the pending queue instead of directly to state\n            queueMuzzleFlash({\n                id,\n                position,\n                direction: direction || new THREE.Vector3(0, 0, -1) // Default if not provided\n            });\n        };\n\n        // Add event listener specific to shotgun firing\n        window.addEventListener('shotgun-fire', handleShotgunFire);\n\n        // Listen for regular weapon impacts to handle shotgun impacts without explosions\n        const handleWeaponImpact = (event) => {\n            const { position, weaponType, direction } = event.detail;\n\n            // Only process shotgun events\n            if (weaponType !== WEAPON_TYPES.SHOTGUN) return;\n\n            // Apply even more aggressive throttling for impact effects\n            const now = Date.now();\n            const throttleTime = window.lowFpsWarning ? 200 : 100; // Longer throttle time when FPS is low\n\n            if (now - lastProcessTimeRef.current < throttleTime) {\n                // Skip this impact event due to throttling\n                return;\n            }\n\n            // At very low FPS, randomly skip some impacts entirely\n            if (window.currentFps < 25 && Math.random() < 0.7) {\n                return;\n            }\n\n            // For shotgun impacts, we might want to show small pellet hit effects\n            // But we don't create full explosions - those are now disabled in ExplosionsManager\n\n            // For demonstration, we'll create a small muzzle flash at the impact point\n            const id = `impact-${Date.now().toString(36)}-${Math.random().toString(36).substr(2, 5)}`;\n\n            // Add to the pending queue instead of directly to state\n            queueMuzzleFlash({\n                id,\n                position,\n                direction: direction || new THREE.Vector3(0, 0, -1),\n                isImpact: true // Flag this as an impact flash (could be styled differently)\n            });\n        };\n\n        // Also listen for regular weapon impacts to handle shotgun specially\n        window.addEventListener('weapon-impact', handleWeaponImpact);\n\n        // Set up listener for persistent low FPS events to adjust effect quality\n        const handlePersistentLowFps = () => {\n            console.log(\"Persistent low FPS detected - reducing shotgun effect quality\");\n            // Immediately clear any pending effects\n            pendingFlashesRef.current = [];\n\n            // Reduce current effects if there are too many\n            setMuzzleFlashes(prev => {\n                if (prev.length > 3) {\n                    return prev.slice(0, 3);\n                }\n                return prev;\n            });\n        };\n\n        window.addEventListener('persistentLowFps', handlePersistentLowFps);\n\n        // Clean up\n        return () => {\n            window.removeEventListener('shotgun-fire', handleShotgunFire);\n            window.removeEventListener('weapon-impact', handleWeaponImpact);\n            window.removeEventListener('persistentLowFps', handlePersistentLowFps);\n        };\n    }, []);\n\n    // Remove a muzzle flash when it completes\n    const removeMuzzleFlash = (id) => {\n        setMuzzleFlashes(prev => prev.filter(flash => flash.id !== id));\n    };\n\n    // Render all active muzzle flashes\n    return (\n        <>\n            {muzzleFlashes.map(flash => (\n                <ShotgunMuzzleFlash\n                    key={flash.id}\n                    position={flash.position}\n                    direction={flash.direction}\n                    onComplete={() => removeMuzzleFlash(flash.id)}\n                    isImpact={flash.isImpact}\n                />\n            ))}\n        </>\n    );\n}\n\n// Helper function to trigger a shotgun fire effect\nexport function triggerShotgunFire(position, direction) {\n    // Create and dispatch custom event specifically for shotgun effects\n    const event = new CustomEvent('shotgun-fire', {\n        detail: {\n            position,\n            direction,\n            weaponType: WEAPON_TYPES.SHOTGUN\n        }\n    });\n\n    window.dispatchEvent(event);\n} ","import React, { useRef, useEffect, useState, useMemo, useCallback } from 'react';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport { useKeyboardControls } from '@react-three/drei';\nimport * as THREE from 'three';\nimport '../../styles/drone.css';\nimport { WEAPON_TYPES, checkProjectileVehicleCollision } from '../../utils/WeaponPhysics';\nimport { triggerExplosion } from '../effects/ExplosionsManager';\nimport { showDamageIndicator } from '../effects/DamageIndicator';\nimport { Controls } from '../KeyboardControls';\nimport { triggerShotgunFire } from '../effects/ShotgunEffectsManager';\nimport { DRONE_TYPES } from '../../utils/GameContext';\n\n// Constants for object pooling\nconst POOL_SIZE = {\n    [WEAPON_TYPES.SHOTGUN]: 16,  // Increased from 8\n    [WEAPON_TYPES.GRENADE]: 3,\n    [WEAPON_TYPES.DART]: 3\n};\n\nexport default function Grenadier() {\n    // References\n    const droneRef = useRef();\n    const cameraFollowRef = useRef(new THREE.Vector3(0, 0, 0));\n    const velocityRef = useRef(new THREE.Vector3(0, 0, 0));\n    const propellersRefs = useRef([]);\n\n    // Initial rotation reference - with explicit YXZ rotation order\n    const initialRotationRef = useRef(new THREE.Euler(0, 0, 0, 'YXZ'));\n\n    // State\n    const [position, setPosition] = useState([0, 10, 0]); // Start 10 units above ground\n    const [propellersActive, setPropellersActive] = useState(false);\n    const [propellersSpeed, setPropellersSpeed] = useState(0);\n\n    // Weapon ammo state\n    const [shotgunAmmo, setShotgunAmmo] = useState(12);\n    const [grenadeAmmo, setGrenadeAmmo] = useState(6);\n    const [dartAmmo, setDartAmmo] = useState(9);\n\n    // Weapon cooldown state\n    const [shotgunCooldown, setShotgunCooldown] = useState(false);\n    const [grenadeCooldown, setGrenadeCooldown] = useState(false);\n    const [dartCooldown, setDartCooldown] = useState(false);\n\n    // Object pool for projectiles\n    const projectilePool = useRef({\n        [WEAPON_TYPES.SHOTGUN]: [],\n        [WEAPON_TYPES.GRENADE]: [],\n        [WEAPON_TYPES.DART]: []\n    });\n\n    // Active projectiles\n    const [activeProjectiles, setActiveProjectiles] = useState([]);\n\n    // Access scene elements\n    const { camera, scene } = useThree();\n\n    // Setup keyboard controls\n    const [subscribeKeys, getKeys] = useKeyboardControls();\n\n    // Add downward view state\n    const [downwardViewActive, setDownwardViewActive] = useState(false);\n\n    // Add HUD state\n    const [showHUD, setShowHUD] = useState(true);\n\n    // Initialize object pools\n    useEffect(() => {\n        // Create initial pools for each weapon type\n        Object.entries(POOL_SIZE).forEach(([type, size]) => {\n            for (let i = 0; i < size; i++) {\n                projectilePool.current[type].push({\n                    id: `${type}-${i}`,\n                    position: new THREE.Vector3(),\n                    previousPosition: new THREE.Vector3(),\n                    direction: new THREE.Vector3(),\n                    type: type,\n                    speed: 0,\n                    life: 0,\n                    active: false,\n                    gravity: 0\n                });\n            }\n        });\n    }, []);\n\n    // Drone physics parameters\n    const THRUST = 0.05;\n    const MAX_SPEED = 1.5;\n    const ROTATION_SPEED = 0.06; // Reduced for more subtle rotation\n    const FRICTION = 0.98;\n    const GRAVITY = 0.004;\n    const LIFT_POWER = 0.05;\n    const STRAFE_POWER = 0.04; // Power for strafing left/right\n    const DIVE_POWER = 0.005; // Power for slight downward movement with W\n\n    // Get projectile from pool\n    const getProjectileFromPool = (type) => {\n        // Find first inactive projectile of the requested type\n        const pool = projectilePool.current[type];\n        const projectile = pool.find(p => !p.active);\n\n        if (projectile) {\n            projectile.active = true;\n            return projectile;\n        }\n\n        console.warn(`Pool exhausted for ${type} projectiles`);\n\n        // If pool is exhausted, create a new one (fallback)\n        if (pool.length < 25) { // Cap at 25 to prevent unlimited growth\n            const newProjectile = {\n                id: `${type}-${pool.length}`,\n                position: new THREE.Vector3(),\n                previousPosition: new THREE.Vector3(),\n                direction: new THREE.Vector3(),\n                type: type,\n                speed: 0,\n                life: 0,\n                active: true,\n                gravity: 0\n            };\n\n            pool.push(newProjectile);\n            return newProjectile;\n        }\n\n        // Return null if we hit the cap - the calling code should handle this\n        return null;\n    };\n\n    // Return projectile to pool\n    const returnProjectileToPool = (projectile) => {\n        const pool = projectilePool.current[projectile.type];\n        const pooledProjectile = pool.find(p => p.id === projectile.id);\n\n        if (pooledProjectile) {\n            pooledProjectile.active = false;\n            // Reset other properties as needed\n            pooledProjectile.life = 0;\n        }\n    };\n\n    // Weapon firing functions\n    const fireShotgun = useCallback(() => {\n        if (shotgunAmmo <= 0 || shotgunCooldown) return;\n\n        console.log(\"Firing shotgun!\");\n        const newAmmo = shotgunAmmo - 1;\n        setShotgunAmmo(newAmmo);\n        setShotgunCooldown(true);\n\n        // Dispatch ammo update event\n        window.dispatchEvent(new CustomEvent('ammoUpdate', {\n            detail: {\n                droneType: DRONE_TYPES.GRENADIER,\n                weaponType: 'shotgunAmmo',\n                ammoCount: Number(newAmmo)\n            }\n        }));\n\n        // Add shotgun projectile logic here\n        const rotation = droneRef.current.rotation.y;\n        const forward = new THREE.Vector3(\n            -Math.sin(rotation),\n            0,\n            -Math.cos(rotation)\n        );\n\n        // Trigger the shotgun muzzle flash at the drone's position\n        const muzzlePosition = droneRef.current.position.clone().add(\n            forward.clone().multiplyScalar(1.0)\n        );\n        triggerShotgunFire(muzzlePosition, forward);\n\n        // Get current FPS to adaptively reduce shotgun pellets at lower FPS\n        const currentFps = window.currentFps || 60;\n        // More aggressive FPS-based pellet reduction\n        const pelletCount = currentFps < 30 ? 1 : (currentFps < 45 ? 2 : 3);\n\n        // Creating buckshot - adaptively reduce pellet count based on FPS\n        for (let i = 0; i < pelletCount; i++) {\n            // Reduce spread at lower pellet counts for more consistent damage\n            const spreadFactor = pelletCount === 1 ? 0.1 : 0.2;\n\n            // Add slight random deviation for buckshot spread\n            const spread = new THREE.Vector3(\n                (Math.random() - 0.5) * spreadFactor,\n                (Math.random() - 0.5) * (spreadFactor * 0.5),\n                (Math.random() - 0.5) * spreadFactor\n            );\n\n            const direction = forward.clone().add(spread).normalize();\n\n            // Get projectile from pool\n            const projectile = getProjectileFromPool(WEAPON_TYPES.SHOTGUN);\n            if (!projectile) continue; // Skip if no projectile available\n\n            // Set projectile properties\n            projectile.position.copy(droneRef.current.position)\n                .add(direction.clone().multiplyScalar(1.5)); // Start position in front of drone\n\n            // Initialize previousPosition if needed\n            if (!projectile.previousPosition) {\n                projectile.previousPosition = new THREE.Vector3();\n            }\n            projectile.previousPosition.copy(projectile.position);\n            projectile.direction.copy(direction);\n            projectile.speed = 1.0 + Math.random() * 0.2; // Slightly faster speed for less frames in flight\n            projectile.life = 25; // Further reduced lifetime from 30 to 25 frames\n\n            // Add to active projectiles\n            setActiveProjectiles(prev => [...prev, projectile]);\n        }\n\n        // Set cooldown\n        setTimeout(() => {\n            setShotgunCooldown(false);\n        }, 800);\n    }, [shotgunAmmo, shotgunCooldown]);\n\n    const dropGrenade = () => {\n        if (grenadeAmmo <= 0 || grenadeCooldown) return;\n\n        console.log(\"Dropping grenade!\");\n        const newAmmo = grenadeAmmo - 1;\n        setGrenadeAmmo(newAmmo);\n        setGrenadeCooldown(true);\n\n        // Dispatch ammo update event\n        window.dispatchEvent(new CustomEvent('ammoUpdate', {\n            detail: {\n                droneType: DRONE_TYPES.GRENADIER,\n                weaponType: 'grenadeAmmo',\n                ammoCount: Number(newAmmo)\n            }\n        }));\n\n        // Get current position from the drone ref\n        const currentPosition = droneRef.current.position;\n        console.log(\"Drone position:\", currentPosition.x, currentPosition.y, currentPosition.z);\n\n        // Get projectile from pool\n        const projectile = getProjectileFromPool(WEAPON_TYPES.GRENADE);\n\n        // Set projectile properties\n        projectile.position.set(\n            currentPosition.x, // Center position\n            currentPosition.y - 0.5, // Drop from bottom of drone\n            currentPosition.z\n        );\n        // Initialize previousPosition same as current position at first\n        if (!projectile.previousPosition) {\n            projectile.previousPosition = new THREE.Vector3();\n        }\n        projectile.previousPosition.copy(projectile.position);\n        projectile.direction.set(0, -1, 0); // Fall straight down\n        projectile.speed = 0.4; // Increased from 0.2\n        projectile.life = 70; // Reduced from 100\n        projectile.gravity = 0.005; // Reduced from 0.01 for straighter trajectory\n\n        // Add to active projectiles\n        setActiveProjectiles(prev => [...prev, projectile]);\n\n        // Set cooldown\n        setTimeout(() => {\n            setGrenadeCooldown(false);\n        }, 1200);\n    };\n\n    const dropDart = () => {\n        if (dartAmmo <= 0 || dartCooldown) return;\n\n        console.log(\"Dropping dart!\");\n        const newAmmo = dartAmmo - 1;\n        setDartAmmo(newAmmo);\n        setDartCooldown(true);\n\n        // Dispatch ammo update event\n        window.dispatchEvent(new CustomEvent('ammoUpdate', {\n            detail: {\n                droneType: DRONE_TYPES.GRENADIER,\n                weaponType: 'dartAmmo',\n                ammoCount: Number(newAmmo)\n            }\n        }));\n\n        // Get current position from the drone ref\n        const currentPosition = droneRef.current.position;\n\n        // Get projectile from pool\n        const projectile = getProjectileFromPool(WEAPON_TYPES.DART);\n\n        // Set projectile properties\n        projectile.position.set(\n            currentPosition.x, // Center position\n            currentPosition.y - 0.5, // Drop from bottom of drone\n            currentPosition.z\n        );\n        // Initialize previousPosition same as current position at first\n        if (!projectile.previousPosition) {\n            projectile.previousPosition = new THREE.Vector3();\n        }\n        projectile.previousPosition.copy(projectile.position);\n        projectile.direction.set(0, -1, 0); // Fall straight down\n        projectile.speed = 0.6; // Increased from 0.3\n        projectile.life = 60; // Reduced from 80\n        projectile.gravity = 0.008; // Reduced from 0.015 for straighter trajectory\n\n        // Add to active projectiles\n        setActiveProjectiles(prev => [...prev, projectile]);\n        console.log(\"Projectiles after adding dart:\", activeProjectiles.length + 1);\n\n        // Set cooldown\n        setTimeout(() => {\n            setDartCooldown(false);\n        }, 1000);\n    };\n\n    useEffect(() => {\n        // Setup camera initial position\n        camera.position.set(0, 15, 20);\n        camera.lookAt(0, 10, 0);\n\n        // Ensure drone has proper initial rotation with correct order\n        if (droneRef.current) {\n            // Set rotation order explicitly first\n            droneRef.current.rotation.order = 'YXZ';\n\n            // Set individual rotation components (can't assign the entire rotation object)\n            droneRef.current.rotation.x = initialRotationRef.current.x;\n            droneRef.current.rotation.y = initialRotationRef.current.y;\n            droneRef.current.rotation.z = initialRotationRef.current.z;\n        }\n\n        // Subscribe to keyboard controls\n        return subscribeKeys(\n            state => state,\n            state => {\n                // Activate propellers when any control is pressed\n                const { forward, backward, left, right, up, down, strafeLeft, strafeRight } = state;\n                if (forward || backward || left || right || up || down || strafeLeft || strafeRight) {\n                    setPropellersActive(true);\n                    setPropellersSpeed(1.0);\n                } else {\n                    setPropellersSpeed(0.5); // Idle speed when not moving\n                }\n            }\n        );\n    }, [camera, subscribeKeys]);\n\n    // Handle weapon firing with mouse and keyboard\n    useEffect(() => {\n        // Handle mouse clicks for weapons\n        const handleMouseDown = (e) => {\n            switch (e.button) {\n                case 0: // Left mouse button\n                    fireShotgun();\n                    break;\n                case 2: // Right mouse button\n                    dropGrenade();\n                    break;\n                default:\n                    break;\n            }\n        };\n\n        // Handle keyboard keys\n        const handleKeyDown = (e) => {\n            switch (e.key) {\n                case 'c':\n                case 'C':\n                    dropDart(); // C key exclusively for dart weapon\n                    break;\n                case 'v':\n                case 'V':\n                    setDownwardViewActive(prev => !prev); // V key for toggling downward view\n                    break;\n                default:\n                    break;\n            }\n        };\n\n        // Prevent default right-click context menu\n        const handleContextMenu = (e) => {\n            e.preventDefault();\n        };\n\n        window.addEventListener('mousedown', handleMouseDown);\n        window.addEventListener('keydown', handleKeyDown);\n        window.addEventListener('contextmenu', handleContextMenu);\n\n        return () => {\n            window.removeEventListener('mousedown', handleMouseDown);\n            window.removeEventListener('keydown', handleKeyDown);\n            window.removeEventListener('contextmenu', handleContextMenu);\n        };\n    }, [shotgunAmmo, grenadeAmmo, dartAmmo, shotgunCooldown, grenadeCooldown, dartCooldown]);\n\n    // Enhanced weapon impact function that triggers explosion effects\n    const handleWeaponImpact = (position, weaponType) => {\n        console.log(`Weapon impact: ${weaponType} at position [${position.x.toFixed(2)}, ${position.y.toFixed(2)}, ${position.z.toFixed(2)}]`);\n\n        // Create a position that can be cloned for custom events\n        const cloneablePosition = {\n            x: position.x,\n            y: position.y,\n            z: position.z\n        };\n\n        // Use setTimeout to avoid calling setState during render\n        setTimeout(() => {\n            // For shotgun impacts, we rely on the ExplosionsManager to apply damage\n            // without creating visual explosion effects\n\n            // Create a THREE.Vector3 for any functions that need it\n            const positionVector = new THREE.Vector3(cloneablePosition.x, cloneablePosition.y, cloneablePosition.z);\n\n            // Trigger explosion effect - ExplosionsManager will handle shotgun specially\n            triggerExplosion(positionVector, weaponType);\n\n            // Show damage indicator at the impact point\n            showDamageIndicator(positionVector, 20);\n        }, 0);\n    };\n\n    // Update projectiles with explosion effects\n    useFrame(() => {\n        // Process projectiles with object pooling\n        setActiveProjectiles(prevProjectiles => {\n            // Early return if no projectiles to process\n            if (prevProjectiles.length === 0) return prevProjectiles;\n\n            const stillActiveProjectiles = [];\n\n            for (const projectile of prevProjectiles) {\n                // Decrement life and remove if expired\n                if (projectile.life <= 0) {\n                    // Trigger weapon impact with explosion\n                    handleWeaponImpact(projectile.position, projectile.type);\n                    // Return to pool\n                    returnProjectileToPool(projectile);\n                    continue; // Skip this projectile in the updated array\n                }\n\n                // Check for ground collision\n                if (projectile.position.y <= 0.1) {\n                    // Trigger weapon impact with explosion\n                    handleWeaponImpact(projectile.position, projectile.type);\n                    // Return to pool\n                    returnProjectileToPool(projectile);\n                    continue; // Skip this projectile\n                }\n\n                // Check for vehicle collision - only if projectile is close to ground level\n                // This optimization avoids collision checks when projectiles are high in the air\n                const vehicleHit = checkProjectileVehicleCollision(projectile, scene);\n                if (vehicleHit) {\n                    // Trigger weapon impact with explosion at the collision point\n                    handleWeaponImpact(vehicleHit.position, projectile.type);\n                    // Return to pool\n                    returnProjectileToPool(projectile);\n                    continue; // Skip this projectile\n                }\n\n                // Store the previous position before updating\n                if (!projectile.previousPosition) {\n                    projectile.previousPosition = new THREE.Vector3();\n                }\n                projectile.previousPosition.copy(projectile.position);\n\n                // Update position based on direction and speed\n                projectile.position.add(\n                    projectile.direction.clone().multiplyScalar(projectile.speed)\n                );\n\n                // Apply gravity if applicable\n                if (projectile.gravity) {\n                    projectile.direction.y -= projectile.gravity;\n                }\n\n                // Reduce life\n                projectile.life--;\n\n                // Add to still active projectiles\n                stillActiveProjectiles.push(projectile);\n            }\n\n            return stillActiveProjectiles;\n        });\n    });\n\n    useFrame((state, delta) => {\n        if (!droneRef.current) return;\n\n        // Get current keyboard state\n        const { forward, backward, left, right, up, down, strafeLeft, strafeRight, shift } = getKeys();\n\n        // Get drone's current rotation\n        const rotation = droneRef.current.rotation.y;\n\n        // Get directional vectors\n        const forwardVector = new THREE.Vector3(\n            -Math.sin(rotation),\n            0,\n            -Math.cos(rotation)\n        );\n\n        const rightVector = new THREE.Vector3(\n            Math.cos(rotation),\n            0,\n            -Math.sin(rotation)\n        );\n\n        // Calculate thrust based on controls\n        if (forward) {\n            velocityRef.current.add(forwardVector.clone().multiplyScalar(THRUST * 2)); // 2x speed for forward\n            velocityRef.current.y -= DIVE_POWER; // Slight downward movement when pressing W\n        }\n        if (backward) {\n            velocityRef.current.add(forwardVector.clone().multiplyScalar(-THRUST));\n            velocityRef.current.y += DIVE_POWER * 0.8; // Slight upward movement when pressing S\n        }\n\n        // Handle rotation separately from strafing - now with smoother turning\n        if (left) {\n            // Smooth rotation with lerping\n            droneRef.current.rotation.y = THREE.MathUtils.lerp(\n                droneRef.current.rotation.y,\n                droneRef.current.rotation.y + ROTATION_SPEED * 2,\n                0.2\n            );\n        }\n        if (right) {\n            // Smooth rotation with lerping\n            droneRef.current.rotation.y = THREE.MathUtils.lerp(\n                droneRef.current.rotation.y,\n                droneRef.current.rotation.y - ROTATION_SPEED * 2,\n                0.2\n            );\n        }\n\n        // Add strafing with A and D keys\n        if (strafeLeft) velocityRef.current.add(rightVector.clone().multiplyScalar(-STRAFE_POWER));\n        if (strafeRight) velocityRef.current.add(rightVector.clone().multiplyScalar(STRAFE_POWER));\n\n        // Handle vertical movement\n        if (up) {\n            velocityRef.current.y += LIFT_POWER;\n        } else if (down) {\n            // If shift is pressed, go down 50% faster\n            const downSpeed = shift ? LIFT_POWER * 1.5 : LIFT_POWER;\n            velocityRef.current.y -= downSpeed;\n        } else {\n            // Apply gravity when not actively going up or down\n            velocityRef.current.y -= GRAVITY;\n        }\n\n        // Apply friction to slow down over time\n        velocityRef.current.multiplyScalar(FRICTION);\n\n        // Limit max speed\n        const speed = velocityRef.current.length();\n        if (speed > MAX_SPEED) {\n            velocityRef.current.normalize().multiplyScalar(MAX_SPEED);\n        }\n\n        // Apply velocity to drone position\n        droneRef.current.position.add(velocityRef.current);\n\n        // Prevent going below the ground\n        if (droneRef.current.position.y < 1) {\n            droneRef.current.position.y = 1;\n            velocityRef.current.y = 0;\n        }\n\n        // SIMPLIFIED QUATERNION-BASED TILTING APPROACH\n        // Using YXZ rotation order consistently (Yaw, Pitch, Roll)\n\n        // Calculate target tilt values based on input keys\n        let targetForwardTilt = 0;\n        let targetSideTilt = 0;\n\n        // Direct forward/backward tilt based on keys - REVERSED VALUES\n        if (forward) targetForwardTilt = -0.3;  // Reversed: Tilt backward when W pressed\n        if (backward) targetForwardTilt = 0.3; // Reversed: Tilt forward when S pressed\n\n        // Direct side tilt based on strafe keys\n        if (strafeLeft) targetSideTilt = 0.2;  // Tilt left when A pressed\n        if (strafeRight) targetSideTilt = -0.2; // Tilt right when D pressed\n\n        // Keep existing yaw (y-axis rotation)\n        const currentYaw = droneRef.current.rotation.y;\n\n        // Get current quaternion (preserves rotation order)\n        const currentQuat = new THREE.Quaternion();\n        currentQuat.setFromEuler(droneRef.current.rotation);\n\n        // Create a target quaternion with desired tilts\n        const targetEuler = new THREE.Euler(targetForwardTilt, currentYaw, targetSideTilt, 'YXZ');\n        const targetQuat = new THREE.Quaternion();\n        targetQuat.setFromEuler(targetEuler);\n\n        // Smoothly interpolate between current and target quaternions\n        const slerpQuat = new THREE.Quaternion().copy(currentQuat);\n        slerpQuat.slerp(targetQuat, 0.1);\n\n        // Apply the interpolated quaternion back to the drone\n        droneRef.current.setRotationFromQuaternion(slerpQuat);\n\n        // Update target position for smooth following\n        const targetPosition = new THREE.Vector3(\n            droneRef.current.position.x,\n            droneRef.current.position.y,\n            droneRef.current.position.z\n        );\n\n        // Fixed camera parameters - using more strict values\n        const cameraDistance = 25; // Increased from 18 to zoom out more\n        const cameraHeight = 8; // Keeping the same height for now\n\n        // Handle camera positioning based on view mode\n        if (downwardViewActive) {\n            // Position camera directly below the drone, looking down\n            camera.position.set(\n                droneRef.current.position.x,\n                droneRef.current.position.y - 3, // 3 units below the drone\n                droneRef.current.position.z\n            );\n            // Look directly at ground below the drone\n            camera.lookAt(\n                droneRef.current.position.x,\n                0, // Looking at ground level\n                droneRef.current.position.z\n            );\n        } else {\n            // Calculate camera position strictly behind the drone\n            // Use exact rotation values for precise positioning\n            const cameraOffset = new THREE.Vector3(\n                Math.sin(rotation) * cameraDistance,\n                cameraHeight,\n                Math.cos(rotation) * cameraDistance\n            );\n\n            // Set camera position directly without lerping for strict following\n            camera.position.copy(targetPosition).add(cameraOffset);\n\n            // Make camera look exactly at the drone\n            camera.lookAt(\n                droneRef.current.position.x,\n                droneRef.current.position.y + 0.5, // Aim slightly above center\n                droneRef.current.position.z\n            );\n        }\n\n        // Update position state for external components\n        setPosition([\n            droneRef.current.position.x,\n            droneRef.current.position.y,\n            droneRef.current.position.z\n        ]);\n    });\n\n    return (\n        <>\n            <group ref={droneRef}>\n                {/* Main drone body - redesigned with more polygons */}\n                <mesh castShadow receiveShadow position={[0, 0, 0]}>\n                    <boxGeometry args={[0.8, 0.35, 2.0]} />\n                    <meshStandardMaterial color=\"#1d3557\" metalness={0.7} roughness={0.2} />\n                </mesh>\n\n                {/* Side bevels for more polished look */}\n                <mesh castShadow receiveShadow position={[0.4, 0, 0]} rotation={[0, 0, Math.PI / 4]}>\n                    <boxGeometry args={[0.25, 0.35, 2.0]} />\n                    <meshStandardMaterial color=\"#2a4568\" metalness={0.7} roughness={0.2} />\n                </mesh>\n                <mesh castShadow receiveShadow position={[-0.4, 0, 0]} rotation={[0, 0, -Math.PI / 4]}>\n                    <boxGeometry args={[0.25, 0.35, 2.0]} />\n                    <meshStandardMaterial color=\"#2a4568\" metalness={0.7} roughness={0.2} />\n                </mesh>\n\n                {/* Front and back bevels */}\n                <mesh castShadow receiveShadow position={[0, 0, 1.0]} rotation={[Math.PI / 4, 0, 0]}>\n                    <boxGeometry args={[0.8, 0.25, 0.25]} />\n                    <meshStandardMaterial color=\"#2a4568\" metalness={0.7} roughness={0.2} />\n                </mesh>\n                <mesh castShadow receiveShadow position={[0, 0, -1.0]} rotation={[-Math.PI / 4, 0, 0]}>\n                    <boxGeometry args={[0.8, 0.25, 0.25]} />\n                    <meshStandardMaterial color=\"#2a4568\" metalness={0.7} roughness={0.2} />\n                </mesh>\n\n                {/* Central cross for arms */}\n                <mesh castShadow position={[0, 0, 0]} rotation={[0, Math.PI / 4, 0]}>\n                    <boxGeometry args={[3.0, 0.08, 0.1]} />\n                    <meshStandardMaterial color=\"#e63946\" metalness={0.4} roughness={0.6} />\n                </mesh>\n                <mesh castShadow position={[0, 0, 0]} rotation={[0, -Math.PI / 4, 0]}>\n                    <boxGeometry args={[3.0, 0.08, 0.1]} />\n                    <meshStandardMaterial color=\"#e63946\" metalness={0.4} roughness={0.6} />\n                </mesh>\n\n                {/* Landing gear - adjusted to y=-0.3 */}\n                <LandingLeg position={[0.6, -0.3, 0.6]} />\n                <LandingLeg position={[-0.6, -0.3, 0.6]} />\n                <LandingLeg position={[0.6, -0.3, -0.6]} />\n                <LandingLeg position={[-0.6, -0.3, -0.6]} />\n\n                {/* Motors and propellers */}\n                <PropellerUnit\n                    position={[1.1, 0, 1.1]}\n                    index={0}\n                    propRef={(el) => (propellersRefs.current[0] = el)}\n                    active={propellersActive}\n                    speed={propellersSpeed}\n                />\n                <PropellerUnit\n                    position={[-1.1, 0, 1.1]}\n                    index={1}\n                    propRef={(el) => (propellersRefs.current[1] = el)}\n                    active={propellersActive}\n                    speed={propellersSpeed}\n                    counterClockwise\n                />\n                <PropellerUnit\n                    position={[1.1, 0, -1.1]}\n                    index={2}\n                    propRef={(el) => (propellersRefs.current[2] = el)}\n                    active={propellersActive}\n                    speed={propellersSpeed}\n                    counterClockwise\n                />\n                <PropellerUnit\n                    position={[-1.1, 0, -1.1]}\n                    index={3}\n                    propRef={(el) => (propellersRefs.current[3] = el)}\n                    active={propellersActive}\n                    speed={propellersSpeed}\n                />\n\n                {/* Shotgun - two barrels side by side with space in between */}\n                <group position={[0, -0.3, -1.0]} rotation={[Math.PI / 2, 0, Math.PI]}>\n                    <mesh castShadow receiveShadow position={[-0.25, 0, -0.2]}>\n                        <cylinderGeometry args={[0.15, 0.15, 2.4, 12]} />\n                        <meshStandardMaterial color=\"#2b2d42\" metalness={0.8} roughness={0.2} />\n                    </mesh>\n                    <mesh castShadow receiveShadow position={[0.25, 0, -0.2]}>\n                        <cylinderGeometry args={[0.15, 0.15, 2.4, 12]} />\n                        <meshStandardMaterial color=\"#2b2d42\" metalness={0.8} roughness={0.2} />\n                    </mesh>\n\n                </group>\n\n                {/* Robust Grenade module - centered and more prominent */}\n                <group position={[0, -0.35, 1.0]} rotation={[-Math.PI / 2, 0, 0]}>\n                    {/* Main grenade housing */}\n                    <mesh castShadow receiveShadow position={[0, 0, 0.15]}>\n                        <boxGeometry args={[1.0, 0.5, 0.3]} />\n                        <meshStandardMaterial color=\"#4a5568\" metalness={0.6} roughness={0.3} />\n                    </mesh>\n                    {/* Grenade tubes in a robust configuration */}\n                    {[...Array(4)].map((_, i) => (\n                        <mesh key={i} position={[(i - 1.5) * 0.22, 0, 0]} castShadow receiveShadow>\n                            <cylinderGeometry args={[0.08, 0.08, 0.3, 10]} />\n                            <meshStandardMaterial color=\"#2b2d42\" metalness={0.7} roughness={0.4} />\n                        </mesh>\n                    ))}\n                    {/* Reinforcement bars */}\n                    <mesh castShadow receiveShadow position={[0, 0.15, 0.15]}>\n                        <boxGeometry args={[1.0, 0.08, 0.08]} />\n                        <meshStandardMaterial color=\"#e63946\" metalness={0.6} roughness={0.4} />\n                    </mesh>\n                    <mesh castShadow receiveShadow position={[0, -0.15, 0.15]}>\n                        <boxGeometry args={[1.0, 0.08, 0.08]} />\n                        <meshStandardMaterial color=\"#e63946\" metalness={0.6} roughness={0.4} />\n                    </mesh>\n                </group>\n\n                {/* Dart tubes - moved to bottom position */}\n                <group position={[0, -0.4, 0]} rotation={[-Math.PI / 2, 0, 0]}>\n                    {/* Main dart housing */}\n                    <mesh castShadow receiveShadow position={[0, 0, 0.1]}>\n                        <boxGeometry args={[0.8, 0.25, 0.2]} />\n                        <meshStandardMaterial color=\"#4a5568\" metalness={0.6} roughness={0.3} />\n                    </mesh>\n                    {/* Dart tubes in a row on bottom */}\n                    {[...Array(5)].map((_, i) => (\n                        <mesh key={i} position={[(i - 2) * 0.15, 0, 0]} castShadow receiveShadow>\n                            <cylinderGeometry args={[0.03, 0.03, 0.15, 8]} />\n                            <meshStandardMaterial color=\"#2b2d42\" metalness={0.7} roughness={0.4} />\n                        </mesh>\n                    ))}\n                    {/* Dart ammo indicator */}\n                    <mesh position={[0, 0.15, 0.1]}>\n                        <boxGeometry args={[0.2, 0.1, 0.1]} />\n                        <meshStandardMaterial color=\"#ff5733\" emissive=\"#ff5733\" emissiveIntensity={0.5} />\n                    </mesh>\n                </group>\n            </group>\n\n            {/* Render only active projectiles */}\n            <ProjectileRenderer projectiles={activeProjectiles} />\n        </>\n    );\n}\n\n// Directly combined motor and propeller unit\nfunction PropellerUnit({ position, index, propRef, active = true, speed = 1.0, counterClockwise = false }) {\n    const motorRef = useRef();\n    const propellerRef = useRef();\n    const direction = counterClockwise ? -1 : 1;\n\n    useFrame(() => {\n        if (propellerRef.current && active) {\n            // Spin propellers continuously, with variable speed\n            propellerRef.current.rotation.y += 0.5 * speed * direction;\n        }\n\n        if (propRef) {\n            propRef(propellerRef.current);\n        }\n    });\n\n    return (\n        <group position={position}>\n            {/* Motor housing - directly on arms */}\n            <mesh castShadow receiveShadow>\n                <cylinderGeometry args={[0.15, 0.18, 0.2, 12]} />\n                <meshStandardMaterial color=\"#2b2d42\" metalness={0.7} roughness={0.3} />\n            </mesh>\n\n            {/* Motor top */}\n            <mesh castShadow position={[0, 0.12, 0]}>\n                <cylinderGeometry args={[0.12, 0.12, 0.05, 12]} />\n                <meshStandardMaterial color=\"#8d99ae\" metalness={0.8} roughness={0.2} />\n            </mesh>\n\n            {/* Propeller - using a more realistic shape */}\n            <group ref={propellerRef} position={[0, 0.15, 0]}>\n                {/* First blade */}\n                <mesh castShadow>\n                    <meshStandardMaterial color=\"#2b2d42\" metalness={0.5} roughness={0.6} />\n                    <bufferGeometry>\n                        <bufferAttribute\n                            attach=\"attributes-position\"\n                            count={12}\n                            itemSize={3}\n                            array={new Float32Array([\n                                0, 0, 0, 0.6, 0.02, -0.1, 0.6, -0.02, 0.1,  // triangle 1\n                                0, 0, 0, 0.6, -0.02, 0.1, 1.2, 0, 0,        // triangle 2\n                                0, 0, 0, 1.2, 0, 0, 0.6, 0.02, -0.1,  // triangle 3\n                                0.6, 0.02, -0.1, 1.2, 0, 0, 0.6, -0.02, 0.1,  // triangle 4 (back face)\n                            ])}\n                        />\n                        <bufferAttribute\n                            attach=\"attributes-normal\"\n                            count={12}\n                            itemSize={3}\n                            array={new Float32Array([\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, -1, 0, 0, -1, 0, 0, -1, 0,\n                            ])}\n                        />\n                    </bufferGeometry>\n                </mesh>\n\n                {/* Second blade - rotated 180 degrees */}\n                <mesh castShadow rotation={[0, Math.PI, 0]}>\n                    <meshStandardMaterial color=\"#2b2d42\" metalness={0.5} roughness={0.6} />\n                    <bufferGeometry>\n                        <bufferAttribute\n                            attach=\"attributes-position\"\n                            count={12}\n                            itemSize={3}\n                            array={new Float32Array([\n                                0, 0, 0, 0.6, 0.02, -0.1, 0.6, -0.02, 0.1,  // triangle 1\n                                0, 0, 0, 0.6, -0.02, 0.1, 1.2, 0, 0,        // triangle 2\n                                0, 0, 0, 1.2, 0, 0, 0.6, 0.02, -0.1,  // triangle 3\n                                0.6, 0.02, -0.1, 1.2, 0, 0, 0.6, -0.02, 0.1,  // triangle 4 (back face)\n                            ])}\n                        />\n                        <bufferAttribute\n                            attach=\"attributes-normal\"\n                            count={12}\n                            itemSize={3}\n                            array={new Float32Array([\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, -1, 0, 0, -1, 0, 0, -1, 0,\n                            ])}\n                        />\n                    </bufferGeometry>\n                </mesh>\n\n                {/* Propeller center cap */}\n                <mesh>\n                    <sphereGeometry args={[0.06, 8, 8]} />\n                    <meshStandardMaterial color=\"#2b2d42\" metalness={0.7} roughness={0.2} />\n                </mesh>\n            </group>\n        </group>\n    );\n}\n\n// Simplified landing leg component\nfunction LandingLeg({ position }) {\n    return (\n        <group position={position}>\n            {/* Vertical strut */}\n            <mesh castShadow>\n                <cylinderGeometry args={[0.04, 0.04, 0.6, 8]} />\n                <meshStandardMaterial color=\"#64748b\" metalness={0.6} roughness={0.4} />\n            </mesh>\n\n            {/* Foot pad */}\n            <mesh castShadow position={[0, -0.35, 0]}>\n                <sphereGeometry args={[0.08, 8, 8]} />\n                <meshStandardMaterial color=\"#475569\" metalness={0.4} roughness={0.6} />\n            </mesh>\n        </group>\n    );\n}\n\n// Optimized ProjectileRenderer for better performance\nfunction ProjectileRenderer({ projectiles }) {\n    // Use a simple shared geometry for all projectiles of the same type with low poly designs\n    const geometries = useMemo(() => ({\n        // Shotgun pellets - simple low poly pellets\n        [WEAPON_TYPES.SHOTGUN]: new THREE.SphereGeometry(0.05, 3, 3),  // Keep as simple spheres\n\n        // Grenade - low poly grenade design with pull ring and lever\n        [WEAPON_TYPES.GRENADE]: new THREE.Group().add(\n            // Main grenade body\n            new THREE.Mesh(\n                new THREE.CylinderGeometry(0.15, 0.15, 0.23, 8),\n                new THREE.MeshStandardMaterial({ color: '#4d7c0f', metalness: 0.6, roughness: 0.3 })\n            ),\n            // Grenade top\n            new THREE.Mesh(\n                new THREE.CylinderGeometry(0.14, 0.15, 0.06, 8),\n                new THREE.MeshStandardMaterial({ color: '#3f6212', metalness: 0.7, roughness: 0.4 })\n            ).translateY(0.145),\n            // Pull pin\n            new THREE.Mesh(\n                new THREE.TorusGeometry(0.03, 0.007, 6, 6),\n                new THREE.MeshStandardMaterial({ color: '#a3a3a3', metalness: 0.8, roughness: 0.2 })\n            ).translateY(0.17).translateX(0.09).rotateX(Math.PI / 2)\n        ),\n\n        // Dart - low poly dart design with fins\n        [WEAPON_TYPES.DART]: new THREE.Group().add(\n            // Dart body\n            new THREE.Mesh(\n                new THREE.CylinderGeometry(0.08, 0.08, 0.35, 6),\n                new THREE.MeshStandardMaterial({ color: '#8b5cf6', metalness: 0.6, roughness: 0.3 })\n            ),\n            // Dart tip\n            new THREE.Mesh(\n                new THREE.ConeGeometry(0.08, 0.12, 6),\n                new THREE.MeshStandardMaterial({ color: '#7c3aed', metalness: 0.7, roughness: 0.4 })\n            ).translateY(-0.23),\n            // Dart fins (simplified as flat boxes)\n            ...[0, 1, 2, 3].map(i => new THREE.Mesh(\n                new THREE.BoxGeometry(0.025, 0.13, 0.09),\n                new THREE.MeshStandardMaterial({ color: '#a78bfa', metalness: 0.5, roughness: 0.5 })\n            ).translateY(0.14).rotateY(i * Math.PI / 2))\n        ).rotateX(Math.PI)\n    }), []);\n\n    // Remove shared materials and use rotation for projectiles\n    const ProjectileMesh = React.memo(({ projectile }) => {\n        // Using rotation to simulate projectile movement\n        const [rotation, setRotation] = useState([0, 0, 0]);\n\n        useFrame(() => {\n            // Simple rotation for projectiles to make them look more dynamic\n            if (projectile.type === WEAPON_TYPES.GRENADE) {\n                // Grenade tumbles as it flies\n                setRotation([\n                    rotation[0] + 0.03,\n                    rotation[1] + 0.02,\n                    rotation[2] + 0.01\n                ]);\n            } else if (projectile.type === WEAPON_TYPES.DART) {\n                // Dart stays oriented in flight direction with slight wobble\n                const speedFactor = projectile.speed * 10;\n                setRotation([\n                    Math.sin(Date.now() * 0.005) * 0.05,\n                    rotation[1] + 0.01,\n                    Math.cos(Date.now() * 0.005) * 0.05\n                ]);\n            }\n            // Shotgun pellets don't need rotation\n        });\n\n        if (projectile.type === WEAPON_TYPES.SHOTGUN) {\n            // Shotgun pellets remain as simple meshes for performance\n            return (\n                <mesh\n                    position={[projectile.position.x, projectile.position.y, projectile.position.z]}\n                    geometry={geometries[projectile.type]}\n                    material={new THREE.MeshBasicMaterial({ color: 'gray' })}\n                />\n            );\n        }\n\n        return (\n            <group\n                position={[projectile.position.x, projectile.position.y, projectile.position.z]}\n                rotation={rotation}\n            >\n                <primitive object={geometries[projectile.type].clone()} />\n            </group>\n        );\n    });\n\n    // Group projectiles by type for batched rendering (less important now with custom meshes)\n    const projectilesByType = useMemo(() => {\n        const grouped = {\n            [WEAPON_TYPES.SHOTGUN]: [],\n            [WEAPON_TYPES.GRENADE]: [],\n            [WEAPON_TYPES.DART]: []\n        };\n\n        projectiles.forEach(projectile => {\n            if (grouped[projectile.type]) {\n                grouped[projectile.type].push(projectile);\n            }\n        });\n\n        return grouped;\n    }, [projectiles]);\n\n    return (\n        <>\n            {Object.entries(projectilesByType).map(([type, typeProjectiles]) => (\n                typeProjectiles.map(projectile => (\n                    <ProjectileMesh key={projectile.id} projectile={projectile} />\n                ))\n            ))}\n        </>\n    );\n}\n\n// HUD component that will be used outside the Canvas\nexport function GrenadierHUD({ shotgunAmmo, grenadeAmmo, dartAmmo, showHUD }) {\n    if (!showHUD) return null;\n\n    return (\n        <div className=\"weapon-hud grenadier-hud\">\n            <h2>GRENADIER DRONE</h2>\n            <div className=\"weapon-list\">\n                <div className=\"weapon-item\">\n                    <span className=\"weapon-name\">SHOTGUN [{shotgunAmmo}]</span>\n                    <span className=\"weapon-key\">LMB</span>\n                </div>\n                <div className=\"weapon-item\">\n                    <span className=\"weapon-name\">GRENADE [{grenadeAmmo}]</span>\n                    <span className=\"weapon-key\">RMB</span>\n                </div>\n                <div className=\"weapon-item\">\n                    <span className=\"weapon-name\">DART [{dartAmmo}]</span>\n                    <span className=\"weapon-key\">C</span>\n                </div>\n            </div>\n            <div className=\"view-toggle\">\n                <span>CAMERA VIEW TOGGLE: V</span>\n            </div>\n        </div>\n    );\n} ","import React, { useRef, useEffect, useState } from 'react';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport { useKeyboardControls } from '@react-three/drei';\nimport * as THREE from 'three';\nimport '../../styles/drone.css';\nimport { checkProjectileVehicleCollision, WEAPON_TYPES } from '../../utils/WeaponPhysics';\nimport { triggerExplosion } from '../effects/ExplosionsManager';\nimport { showDamageIndicator } from '../effects/DamageIndicator';\nimport { DRONE_TYPES } from '../../utils/GameContext';\nimport { Controls } from '../KeyboardControls';\nimport { useKamikaze } from '../../utils/GameContext';\n\nexport default function Kamikaze() {\n    const droneRef = useRef();\n    const cameraFollowRef = useRef(new THREE.Vector3(0, 0, 0));\n    const velocityRef = useRef(new THREE.Vector3(0, 0, 0));\n    const propellersRefs = useRef([]);\n    const previousPositionRef = useRef(new THREE.Vector3(0, 10, 0)); // Store previous position for collision detection\n    const collisionOccurred = useRef(false); // Track if a collision has occurred\n    const mousePos = useRef({ x: 0, y: 0 });\n\n    // First person view state from context\n    const { isFirstPerson, toggleFirstPerson } = useKamikaze();\n\n    // Initial rotation reference - with explicit YXZ rotation order\n    const initialRotationRef = useRef(new THREE.Euler(0, 0, 0, 'YXZ'));\n\n    const [position, setPosition] = useState([0, 10, 0]);\n    const [propellersActive, setPropellersActive] = useState(false);\n    const [propellersSpeed, setPropellersSpeed] = useState(0);\n    const { camera, scene, gl } = useThree();\n    const [subscribeKeys, getKeys] = useKeyboardControls();\n\n    const THRUST = 0.05;\n    const MAX_SPEED = 3.0;\n    const ROTATION_SPEED = 0.08;\n    const FRICTION = 0.98;\n    const GRAVITY = 0.003;\n    const LIFT_POWER = 0.06;\n    const STRAFE_POWER = 0.04; // Power for strafing left/right\n    const DIVE_POWER = 0.020; // Power for slight downward movement with W\n\n    // Function to handle collision with a vehicle\n    const handleVehicleCollision = (hitPosition) => {\n        if (collisionOccurred.current) return; // Prevent multiple collisions\n\n        collisionOccurred.current = true;\n        console.log(\"Kamikaze drone collided with vehicle!\");\n\n        // Trigger explosion at the collision point\n        triggerExplosion(hitPosition, WEAPON_TYPES.KAMIKAZE);\n\n        // Show damage indicator with the inner damage value from the KAMIKAZE weapon type\n        showDamageIndicator(hitPosition, 80); // Updated to show 80 damage\n\n        // Make drone inactive/invisible after collision\n        if (droneRef.current) {\n            droneRef.current.visible = false;\n        }\n\n        // Reset drone position after a delay (respawn)\n        setTimeout(() => {\n            if (droneRef.current) {\n                droneRef.current.position.set(0, 10, 0);\n                droneRef.current.visible = true;\n                collisionOccurred.current = false;\n                velocityRef.current.set(0, 0, 0);\n                setPosition([0, 10, 0]);\n                previousPositionRef.current.set(0, 10, 0);\n            }\n        }, 3000); // Respawn after 3 seconds\n    };\n\n    // Mouse move handler\n    const handleMouseMove = (event) => {\n        if (isFirstPerson) {\n            // Get normalized device coordinates (NDC) between -1 and 1\n            mousePos.current.x = (event.clientX / window.innerWidth) * 2 - 1;\n            mousePos.current.y = -(event.clientY / window.innerHeight) * 2 + 1;\n        }\n    };\n\n    useEffect(() => {\n        // Handle first person view toggle with keypress\n        const handleKeyDown = (e) => {\n            if (e.code === 'KeyV') {\n                toggleFirstPerson();\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyDown);\n        window.addEventListener('mousemove', handleMouseMove);\n\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n            window.removeEventListener('mousemove', handleMouseMove);\n        };\n    }, [toggleFirstPerson]);\n\n    useEffect(() => {\n        // Setup camera initial position\n        camera.position.set(0, 15, 20);\n        camera.lookAt(0, 10, 0);\n\n        // Ensure drone has proper initial rotation with correct order\n        if (droneRef.current) {\n            // Set rotation order explicitly first\n            droneRef.current.rotation.order = 'YXZ';\n\n            // Set individual rotation components\n            droneRef.current.rotation.x = initialRotationRef.current.x;\n            droneRef.current.rotation.y = initialRotationRef.current.y;\n            droneRef.current.rotation.z = initialRotationRef.current.z;\n        }\n\n        return subscribeKeys(\n            state => state,\n            state => {\n                const { forward, backward, left, right, up, down, strafeLeft, strafeRight } = state;\n                if (forward || backward || left || right || up || down || strafeLeft || strafeRight) {\n                    setPropellersActive(true);\n                    setPropellersSpeed(1.0);\n                } else {\n                    setPropellersSpeed(0.5);\n                }\n            }\n        );\n    }, [camera, subscribeKeys]);\n\n    useFrame((state, delta) => {\n        if (!droneRef.current || collisionOccurred.current) return;\n\n        // Store previous position for collision detection\n        previousPositionRef.current.copy(droneRef.current.position);\n\n        const { forward, backward, left, right, up, down, strafeLeft, strafeRight, shift } = getKeys();\n        const rotation = droneRef.current.rotation.y;\n        const forwardVector = new THREE.Vector3(-Math.sin(rotation), 0, -Math.cos(rotation));\n        const rightVector = new THREE.Vector3(Math.cos(rotation), 0, -Math.sin(rotation));\n\n        // Apply forward movement and slight downward movement when pressing W\n        if (forward) {\n            velocityRef.current.add(forwardVector.clone().multiplyScalar(THRUST * 2)); // 2x speed for forward\n            velocityRef.current.y -= DIVE_POWER; // Slight downward movement\n        }\n        if (backward) {\n            velocityRef.current.add(forwardVector.clone().multiplyScalar(-THRUST));\n            velocityRef.current.y += DIVE_POWER * 0.8; // Slight upward movement when pressing S\n        }\n\n        // If in first person mode, use mouse for direction with smoother interpolation\n        if (isFirstPerson) {\n            // Use mouse position to influence the drone rotation with smoother interpolation\n            const targetRotationY = rotation - mousePos.current.x * 0.15; // Increased sensitivity\n            droneRef.current.rotation.y = THREE.MathUtils.lerp(\n                droneRef.current.rotation.y,\n                targetRotationY,\n                0.15 // Smoother interpolation\n            );\n\n            // Pitch control with mouse Y and smoother interpolation\n            const pitchAmount = Math.max(-0.4, Math.min(0.4, mousePos.current.y * 0.4)); // Increased range\n            droneRef.current.rotation.x = THREE.MathUtils.lerp(\n                droneRef.current.rotation.x,\n                pitchAmount,\n                0.15 // Smoother interpolation\n            );\n        } else {\n            // Standard keyboard rotation for third person\n            if (left) {\n                droneRef.current.rotation.y = THREE.MathUtils.lerp(\n                    droneRef.current.rotation.y,\n                    droneRef.current.rotation.y + ROTATION_SPEED * 3,\n                    0.2\n                );\n            }\n            if (right) {\n                droneRef.current.rotation.y = THREE.MathUtils.lerp(\n                    droneRef.current.rotation.y,\n                    droneRef.current.rotation.y - ROTATION_SPEED * 3,\n                    0.2\n                );\n            }\n        }\n\n        if (strafeLeft) velocityRef.current.add(rightVector.clone().multiplyScalar(-STRAFE_POWER));\n        if (strafeRight) velocityRef.current.add(rightVector.clone().multiplyScalar(STRAFE_POWER));\n\n        if (up) velocityRef.current.y += LIFT_POWER;\n        else if (down) {\n            // If shift is pressed, go down 50% faster\n            const downSpeed = shift ? LIFT_POWER * 1.5 : LIFT_POWER;\n            velocityRef.current.y -= downSpeed;\n        }\n        else velocityRef.current.y -= GRAVITY;\n\n        velocityRef.current.multiplyScalar(FRICTION);\n        const speed = velocityRef.current.length();\n        if (speed > MAX_SPEED) velocityRef.current.normalize().multiplyScalar(MAX_SPEED);\n        droneRef.current.position.add(velocityRef.current);\n        if (droneRef.current.position.y < 1) {\n            droneRef.current.position.y = 1;\n            velocityRef.current.y = 0;\n        }\n\n        // Check for collision with vehicles\n        if (scene && droneRef.current) {\n            // Create a projectile-like object for collision detection\n            const droneProjectile = {\n                position: droneRef.current.position.clone(),\n                previousPosition: previousPositionRef.current.clone(),\n                type: WEAPON_TYPES.KAMIKAZE\n            };\n\n            // Check for vehicle collision\n            const vehicleHit = checkProjectileVehicleCollision(droneProjectile, scene);\n            if (vehicleHit) {\n                handleVehicleCollision(vehicleHit.position);\n                return; // Skip the rest of the frame processing\n            }\n        }\n\n        // SIMPLIFIED QUATERNION-BASED TILTING APPROACH\n        // Using YXZ rotation order consistently (Yaw, Pitch, Roll)\n\n        // Calculate target tilt values based on input keys\n        let targetForwardTilt = 0;\n        let targetSideTilt = 0;\n\n        // Direct forward/backward tilt based on keys - REVERSED VALUES\n        if (forward) targetForwardTilt = -0.3;  // Reversed: Tilt backward when W pressed\n        if (backward) targetForwardTilt = 0.3; // Reversed: Tilt forward when S pressed\n\n        // Direct side tilt based on strafe keys\n        if (strafeLeft) targetSideTilt = 0.2;  // Tilt left when A pressed\n        if (strafeRight) targetSideTilt = -0.2; // Tilt right when D pressed\n\n        // Keep existing yaw (y-axis rotation)\n        const currentYaw = droneRef.current.rotation.y;\n\n        // Get current quaternion (preserves rotation order)\n        const currentQuat = new THREE.Quaternion();\n        currentQuat.setFromEuler(droneRef.current.rotation);\n\n        // Create a target quaternion with desired tilts\n        const targetEuler = new THREE.Euler(targetForwardTilt, currentYaw, targetSideTilt, 'YXZ');\n        const targetQuat = new THREE.Quaternion();\n        targetQuat.setFromEuler(targetEuler);\n\n        // Smoothly interpolate between current and target quaternions\n        const slerpQuat = new THREE.Quaternion().copy(currentQuat);\n        slerpQuat.slerp(targetQuat, 0.1);\n\n        // Apply the interpolated quaternion back to the drone\n        droneRef.current.setRotationFromQuaternion(slerpQuat);\n\n        const targetPosition = new THREE.Vector3(\n            droneRef.current.position.x,\n            droneRef.current.position.y,\n            droneRef.current.position.z\n        );\n\n        // Camera positioning based on view mode\n        if (isFirstPerson) {\n            // First person - position camera at drone's location with slight offset\n            const fpOffset = new THREE.Vector3(0, 0.2, 0);\n            const fpDirection = new THREE.Vector3(\n                -Math.sin(rotation),\n                droneRef.current.rotation.x * 0.5, // Look slightly up/down based on pitch\n                -Math.cos(rotation)\n            ).normalize();\n\n            // Position the camera at the drone's position with a slight vertical offset\n            camera.position.copy(targetPosition).add(fpOffset);\n\n            // Look in the direction the drone is pointing\n            camera.lookAt(\n                camera.position.x + fpDirection.x,\n                camera.position.y + fpDirection.y,\n                camera.position.z + fpDirection.z\n            );\n        } else {\n            // Third person - regular follow camera\n            const cameraDistance = 15;\n            const cameraHeight = 6;\n\n            // Calculate camera position behind the drone\n            const cameraOffset = new THREE.Vector3(\n                Math.sin(rotation) * cameraDistance,\n                cameraHeight,\n                Math.cos(rotation) * cameraDistance\n            );\n\n            // Set camera position\n            camera.position.copy(targetPosition).add(cameraOffset);\n\n            // Make camera look at the drone\n            camera.lookAt(\n                droneRef.current.position.x,\n                droneRef.current.position.y + 0.5,\n                droneRef.current.position.z\n            );\n        }\n\n        setPosition([droneRef.current.position.x, droneRef.current.position.y, droneRef.current.position.z]);\n    });\n\n    return (\n        <group ref={droneRef} position={position}>\n            {/* Elongated Body */}\n            <mesh castShadow receiveShadow position={[0, 0, 0]}>\n                <boxGeometry args={[0.3, 0.1, 0.7]} />\n                <meshStandardMaterial color=\"#ff3300\" metalness={0.7} roughness={0.2} />\n            </mesh>\n\n            {/* Arms */}\n            <mesh castShadow position={[0, 0, 0]} rotation={[0, Math.PI / 4, 0]}>\n                <boxGeometry args={[1.414, 0.03, 0.05]} />\n                <meshStandardMaterial color=\"#4a4a4a\" metalness={0.4} roughness={0.6} />\n            </mesh>\n            <mesh castShadow position={[0, 0, 0]} rotation={[0, -Math.PI / 4, 0]}>\n                <boxGeometry args={[1.414, 0.03, 0.05]} />\n                <meshStandardMaterial color=\"#4a4a4a\" metalness={0.4} roughness={0.6} />\n            </mesh>\n\n            {/* Landing Gear */}\n            <LandingLeg position={[0.1, -0.1, 0.4]} />\n            <LandingLeg position={[-0.1, -0.1, 0.4]} />\n            <LandingLeg position={[0.1, -0.1, -0.4]} />\n            <LandingLeg position={[-0.1, -0.1, -0.4]} />\n\n            {/* Propellers and Motors */}\n            <PropellerUnit position={[0.5, 0, 0.5]} index={0} propRef={(el) => propellersRefs.current[0] = el} active={propellersActive} speed={propellersSpeed} />\n            <PropellerUnit position={[-0.5, 0, 0.5]} index={1} propRef={(el) => propellersRefs.current[1] = el} active={propellersActive} speed={propellersSpeed} counterClockwise={true} />\n            <PropellerUnit position={[0.5, 0, -0.5]} index={2} propRef={(el) => propellersRefs.current[2] = el} active={propellersActive} speed={propellersSpeed} counterClockwise={true} />\n            <PropellerUnit position={[-0.5, 0, -0.5]} index={3} propRef={(el) => propellersRefs.current[3] = el} active={propellersActive} speed={propellersSpeed} />\n\n            {/* Bigger and Brighter Battery */}\n            <mesh position={[0, 0.16, 0]}>\n                <boxGeometry args={[0.25, 0.2, 0.35]} />\n                <meshStandardMaterial color=\"#0000ff\" />\n            </mesh>\n\n            <group>\n                {/* Main Warhead Body */}\n                <mesh position={[0, -0.2, 0]} rotation={[Math.PI / 2, 0, 0]}>\n                    <cylinderGeometry args={[0.15, 0.25, 1.2, 8]} />\n                    <meshStandardMaterial color=\"#004d00\" metalness={0.7} roughness={0.5} />\n                </mesh>\n\n                {/* Pointed Nose Cone */}\n                <mesh position={[0, -0.2, -0.8]} rotation={[-Math.PI / 2, 0, 0]}>\n                    <coneGeometry args={[0.25, 0.5, 8]} />\n                    <meshStandardMaterial color=\"#2e7d32\" metalness={0.7} roughness={0.5} />\n                </mesh>\n            </group>\n        </group>\n    );\n}\n\nfunction PropellerUnit({ position, index, propRef, active = true, speed = 1.0, counterClockwise = false }) {\n    const propellerRef = useRef();\n    const direction = counterClockwise ? -1 : 1;\n\n    useFrame(() => {\n        if (propellerRef.current && active) propellerRef.current.rotation.y += 0.5 * speed * direction;\n        if (propRef) propRef(propellerRef.current);\n    });\n\n    return (\n        <group position={position}>\n            {/* Motor Housing - Adjusted size for compactness */}\n            <mesh castShadow receiveShadow>\n                <cylinderGeometry args={[0.05, 0.07, 0.1, 12]} />\n                <meshStandardMaterial color=\"#2b2d42\" metalness={0.7} roughness={0.3} />\n            </mesh>\n            {/* Motor Top - Adjusted size for compactness */}\n            <mesh castShadow position={[0, 0.05, 0]}>\n                <cylinderGeometry args={[0.05, 0.05, 0.02, 12]} />\n                <meshStandardMaterial color=\"#8d99ae\" metalness={0.8} roughness={0.2} />\n            </mesh>\n            {/* Propeller */}\n            <group ref={propellerRef} position={[0, 0.1, 0]}>\n                <mesh castShadow>\n                    <meshStandardMaterial color=\"#2b2d42\" metalness={0.5} roughness={0.6} />\n                    <bufferGeometry>\n                        <bufferAttribute\n                            attach=\"attributes-position\"\n                            count={12}\n                            itemSize={3}\n                            array={new Float32Array([\n                                0, 0, 0, 0.15, 0.02, -0.025, 0.15, -0.02, 0.025,\n                                0, 0, 0, 0.15, -0.02, 0.025, 0.3, 0, 0,\n                                0, 0, 0, 0.3, 0, 0, 0.15, 0.02, -0.025,\n                                0.15, 0.02, -0.025, 0.3, 0, 0, 0.15, -0.02, 0.025,\n                            ])}\n                        />\n                        <bufferAttribute\n                            attach=\"attributes-normal\"\n                            count={12}\n                            itemSize={3}\n                            array={new Float32Array([\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, -1, 0, 0, -1, 0, 0, -1, 0,\n                            ])}\n                        />\n                    </bufferGeometry>\n                </mesh>\n                <mesh castShadow rotation={[0, Math.PI, 0]}>\n                    <meshStandardMaterial color=\"#2b2d42\" metalness={0.5} roughness={0.6} />\n                    <bufferGeometry>\n                        <bufferAttribute\n                            attach=\"attributes-position\"\n                            count={12}\n                            itemSize={3}\n                            array={new Float32Array([\n                                0, 0, 0, 0.15, 0.02, -0.025, 0.15, -0.02, 0.025,\n                                0, 0, 0, 0.15, -0.02, 0.025, 0.3, 0, 0,\n                                0, 0, 0, 0.3, 0, 0, 0.15, 0.02, -0.025,\n                                0.15, 0.02, -0.025, 0.3, 0, 0, 0.15, -0.02, 0.025,\n                            ])}\n                        />\n                        <bufferAttribute\n                            attach=\"attributes-normal\"\n                            count={12}\n                            itemSize={3}\n                            array={new Float32Array([\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, -1, 0, 0, -1, 0, 0, -1, 0,\n                            ])}\n                        />\n                    </bufferGeometry>\n                </mesh>\n                <mesh>\n                    <sphereGeometry args={[0.04, 8, 8]} />\n                    <meshStandardMaterial color=\"#2b2d42\" metalness={0.7} roughness={0.2} />\n                </mesh>\n            </group>\n        </group>\n    );\n}\n\nfunction LandingLeg({ position }) {\n    return (\n        <mesh castShadow position={position}>\n            <cylinderGeometry args={[0.02, 0.02, 0.3, 8]} />\n            <meshStandardMaterial color=\"#64748b\" metalness={0.6} roughness={0.4} />\n        </mesh>\n    );\n}\n\n// KamikazeHUD component for first-person view\nexport function KamikazeHUD({ showHUD }) {\n    const { isFirstPerson, toggleFirstPerson } = useKamikaze();\n\n    if (!showHUD) return null;\n\n    return (\n        <div className=\"drone-hud kamikaze-hud\">\n            {/* Toggle button */}\n            <button\n                className={`first-person-toggle ${isFirstPerson ? 'active' : ''}`}\n                onClick={toggleFirstPerson}\n            >\n                {isFirstPerson ? 'Exit First Person' : 'First Person View'}\n            </button>\n\n            {/* Crosshair for first-person view */}\n            {isFirstPerson && (\n                <div className=\"crosshair\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                        <circle cx=\"12\" cy=\"12\" r=\"2\" fill=\"white\" />\n                        <line x1=\"12\" y1=\"4\" x2=\"12\" y2=\"10\" stroke=\"white\" strokeWidth=\"1.25\" />\n                        <line x1=\"12\" y1=\"14\" x2=\"12\" y2=\"20\" stroke=\"white\" strokeWidth=\"1.25\" />\n                        <line x1=\"4\" y1=\"12\" x2=\"10\" y2=\"12\" stroke=\"white\" strokeWidth=\"1.25\" />\n                        <line x1=\"14\" y1=\"12\" x2=\"20\" y2=\"12\" stroke=\"white\" strokeWidth=\"1.25\" />\n                    </svg>\n                </div>\n            )}\n\n            {/* First person mode indicator */}\n            {isFirstPerson && (\n                <div className=\"fpv-indicator\">\n                    KAMIKAZE - FIRST PERSON VIEW\n                </div>\n            )}\n        </div>\n    );\n}","import React, { useRef, useEffect, useState, useMemo } from 'react';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport { useKeyboardControls } from '@react-three/drei';\nimport * as THREE from 'three';\nimport '../../styles/drone.css';\nimport { WEAPON_TYPES, checkProjectileVehicleCollision } from '../../utils/WeaponPhysics';\nimport { triggerExplosion } from '../effects/ExplosionsManager';\nimport { showDamageIndicator } from '../effects/DamageIndicator';\nimport { Controls } from '../KeyboardControls';\nimport { useProjectilePool } from '../../utils/ProjectilePool';\nimport { DRONE_TYPES } from '../../utils/GameContext';\n\n// Constants for object pooling - reduced pool size for better performance\nconst POOL_SIZE = {\n    [WEAPON_TYPES.ANTI_TANK_MINE]: 3,\n    [WEAPON_TYPES.MORTAR]: 3,\n    [WEAPON_TYPES.RPG]: 3\n};\n\nexport default function Bomber() {\n    // References\n    const droneRef = useRef();\n    const cameraFollowRef = useRef(new THREE.Vector3(0, 0, 0));\n    const velocityRef = useRef(new THREE.Vector3(0, 0, 0));\n    const propellersRefs = useRef([]);\n\n    // Initial rotation reference - with explicit YXZ rotation order\n    const initialRotationRef = useRef(new THREE.Euler(0, 0, 0, 'YXZ'));\n\n    // State\n    const [position, setPosition] = useState([0, 10, 0]); // Start 10 units above ground\n    const [propellersActive, setPropellersActive] = useState(false);\n    const [propellersSpeed, setPropellersSpeed] = useState(0);\n    const [showHUD, setShowHUD] = useState(true);\n\n    // Define propeller positions\n    const propellerPositions = [\n        [0.7, 0.3, 0.7],   // Front right\n        [-0.7, 0.3, 0.7],  // Front left\n        [0.7, 0.3, -0.7],  // Rear right\n        [-0.7, 0.3, -0.7]  // Rear left\n    ];\n\n    // Weapon ammo state\n    const [mineAmmo, setMineAmmo] = useState(3);\n    const [mortarAmmo, setMortarAmmo] = useState(5);\n    const [rpgAmmo, setRpgAmmo] = useState(4);\n\n    // Weapon cooldown state\n    const [mineCooldown, setMineCooldown] = useState(false);\n    const [mortarCooldown, setMortarCooldown] = useState(false);\n    const [rpgCooldown, setRpgCooldown] = useState(false);\n\n    // Object pool for projectiles\n    const projectilePool = useRef({\n        [WEAPON_TYPES.ANTI_TANK_MINE]: [],\n        [WEAPON_TYPES.MORTAR]: [],\n        [WEAPON_TYPES.RPG]: []\n    });\n\n    // Active projectiles\n    const [activeProjectiles, setActiveProjectiles] = useState([]);\n\n    // Access scene elements\n    const { camera, scene } = useThree();\n\n    // Setup keyboard controls\n    const [subscribeKeys, getKeys] = useKeyboardControls();\n\n    // Add downward view state\n    const [downwardViewActive, setDownwardViewActive] = useState(false);\n\n    // Initialize object pools\n    useEffect(() => {\n        // Create initial pools for each weapon type\n        Object.entries(POOL_SIZE).forEach(([type, size]) => {\n            for (let i = 0; i < size; i++) {\n                projectilePool.current[type].push({\n                    id: `${type}-${i}`,\n                    position: new THREE.Vector3(),\n                    previousPosition: new THREE.Vector3(),\n                    direction: new THREE.Vector3(),\n                    type: type,\n                    speed: 0,\n                    life: 0,\n                    active: false,\n                    gravity: 0\n                });\n            }\n        });\n    }, []);\n\n    // Get projectile from pool\n    const getProjectileFromPool = (type) => {\n        // Find first inactive projectile of the requested type\n        const pool = projectilePool.current[type];\n        const projectile = pool.find(p => !p.active);\n\n        if (projectile) {\n            projectile.active = true;\n            return projectile;\n        }\n\n        console.warn(`Pool exhausted for ${type} projectiles`);\n        // If pool is exhausted, create a new one (fallback)\n        const newProjectile = {\n            id: `${type}-${pool.length}`,\n            position: new THREE.Vector3(),\n            previousPosition: new THREE.Vector3(),\n            direction: new THREE.Vector3(),\n            type: type,\n            speed: 0,\n            life: 0,\n            active: true,\n            gravity: 0\n        };\n\n        pool.push(newProjectile);\n        return newProjectile;\n    };\n\n    // Return projectile to pool\n    const returnProjectileToPool = (projectile) => {\n        const pool = projectilePool.current[projectile.type];\n        const pooledProjectile = pool.find(p => p.id === projectile.id);\n\n        if (pooledProjectile) {\n            pooledProjectile.active = false;\n            // Reset other properties as needed\n            pooledProjectile.life = 0;\n        }\n    };\n\n    // Drone physics parameters - slightly different performance\n    const THRUST = 0.06; // More powerful\n    const MAX_SPEED = 1.0; // Faster max speed\n    const ROTATION_SPEED = 0.06; // Quicker rotation, but still more subtle\n    const FRICTION = 0.97; // Less friction\n    const GRAVITY = 0.003;\n    const LIFT_POWER = 0.04; // Stronger lift\n    const STRAFE_POWER = 0.05; // Power for strafing left/right - slightly stronger for this drone\n    const DIVE_POWER = 0.015; // Power for slight upward movement with S\n\n    useEffect(() => {\n        // Setup camera initial position\n        camera.position.set(0, 15, 20);\n        camera.lookAt(0, 10, 0);\n\n        // Ensure drone has proper initial rotation with correct order\n        if (droneRef.current) {\n            // Set rotation order explicitly first\n            droneRef.current.rotation.order = 'YXZ';\n\n            // Set individual rotation components\n            droneRef.current.rotation.x = initialRotationRef.current.x;\n            droneRef.current.rotation.y = initialRotationRef.current.y;\n            droneRef.current.rotation.z = initialRotationRef.current.z;\n        }\n\n        // Subscribe to keyboard controls\n        return subscribeKeys(\n            state => state,\n            state => {\n                // Activate propellers when any control is pressed\n                const { forward, backward, left, right, up, down, strafeLeft, strafeRight } = state;\n                if (forward || backward || left || right || up || down || strafeLeft || strafeRight) {\n                    setPropellersActive(true);\n                    setPropellersSpeed(1.0);\n                } else {\n                    setPropellersSpeed(0.5); // Idle speed when not moving\n                }\n            }\n        );\n    }, [camera, subscribeKeys]);\n\n    // Handle weapon firing\n    useEffect(() => {\n        // Handle mouse clicks for weapons\n        const handleMouseDown = (e) => {\n            switch (e.button) {\n                case 0: // Left mouse button\n                    if (mineAmmo > 0 && !mineCooldown) {\n                        console.log(\"Dropping mine\");\n                        const newAmmo = mineAmmo - 1;\n                        setMineAmmo(newAmmo);\n                        setMineCooldown(true);\n\n                        // Dispatch ammo update event\n                        window.dispatchEvent(new CustomEvent('ammoUpdate', {\n                            detail: {\n                                droneType: DRONE_TYPES.BOMBER,\n                                weaponType: 'mineAmmo',\n                                ammoCount: Number(newAmmo)\n                            }\n                        }));\n\n                        // Get projectile from pool\n                        const projectile = getProjectileFromPool(WEAPON_TYPES.ANTI_TANK_MINE);\n\n                        // Set projectile properties\n                        projectile.position.set(\n                            droneRef.current.position.x,\n                            droneRef.current.position.y - 0.5, // Directly below drone\n                            droneRef.current.position.z\n                        );\n                        // Initialize previousPosition same as current position at first\n                        if (!projectile.previousPosition) {\n                            projectile.previousPosition = new THREE.Vector3();\n                        }\n                        projectile.previousPosition.copy(projectile.position);\n                        projectile.direction.set(0, -1, 0); // Strictly vertical drop\n                        projectile.speed = 0.5; // Increased from 0.3 to 0.5 for faster falling\n                        projectile.life = 80;\n                        projectile.gravity = 0.01; // Doubled from 0.005 to 0.01 for faster acceleration\n\n                        // Add to active projectiles\n                        setActiveProjectiles(prev => [...prev, projectile]);\n\n                        setTimeout(() => setMineCooldown(false), 1000);\n                    }\n                    break;\n                case 2: // Right mouse button\n                    if (mortarAmmo > 0 && !mortarCooldown) {\n                        console.log(\"Dropping mortar\");\n                        const newAmmo = mortarAmmo - 1;\n                        setMortarAmmo(newAmmo);\n                        setMortarCooldown(true);\n\n                        // Dispatch ammo update event\n                        window.dispatchEvent(new CustomEvent('ammoUpdate', {\n                            detail: {\n                                droneType: DRONE_TYPES.BOMBER,\n                                weaponType: 'mortarAmmo',\n                                ammoCount: Number(newAmmo)\n                            }\n                        }));\n\n                        // Get projectile from pool\n                        const projectile = getProjectileFromPool(WEAPON_TYPES.MORTAR);\n\n                        // Set projectile properties\n                        projectile.position.set(\n                            droneRef.current.position.x,\n                            droneRef.current.position.y - 0.5, // Directly below drone\n                            droneRef.current.position.z\n                        );\n                        // Initialize previousPosition same as current position at first\n                        if (!projectile.previousPosition) {\n                            projectile.previousPosition = new THREE.Vector3();\n                        }\n                        projectile.previousPosition.copy(projectile.position);\n                        projectile.direction.set(0, -1, 0);\n                        projectile.speed = 0.5;\n                        projectile.life = 60;\n                        projectile.gravity = 0.006;\n\n                        // Add to active projectiles\n                        setActiveProjectiles(prev => [...prev, projectile]);\n\n                        setTimeout(() => setMortarCooldown(false), 1000);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        };\n\n        // Handle keyboard keys\n        const handleKeyDown = (e) => {\n            if (e.key === 'c' || e.key === 'C') {\n                if (rpgAmmo > 0 && !rpgCooldown) {\n                    console.log(\"Dropping RPG\");\n                    const newAmmo = rpgAmmo - 1;\n                    setRpgAmmo(newAmmo);\n                    setRpgCooldown(true);\n\n                    // Dispatch ammo update event\n                    window.dispatchEvent(new CustomEvent('ammoUpdate', {\n                        detail: {\n                            droneType: DRONE_TYPES.BOMBER,\n                            weaponType: 'rpgAmmo',\n                            ammoCount: Number(newAmmo)\n                        }\n                    }));\n\n                    // Get projectile from pool\n                    const projectile = getProjectileFromPool(WEAPON_TYPES.RPG);\n\n                    // Set projectile properties\n                    projectile.position.set(\n                        droneRef.current.position.x,\n                        droneRef.current.position.y - 0.5, // Directly below drone\n                        droneRef.current.position.z\n                    );\n                    // Initialize previousPosition same as current position at first\n                    if (!projectile.previousPosition) {\n                        projectile.previousPosition = new THREE.Vector3();\n                    }\n                    projectile.previousPosition.copy(projectile.position);\n                    projectile.direction.set(0, -1, 0);\n                    projectile.speed = 0.6;\n                    projectile.life = 40;\n                    projectile.gravity = 0.008;\n\n                    // Add to active projectiles\n                    setActiveProjectiles(prev => [...prev, projectile]);\n\n                    setTimeout(() => setRpgCooldown(false), 1000);\n                }\n            } else if (e.key === 'v' || e.key === 'V') {\n                setDownwardViewActive(prev => !prev);\n            }\n        };\n\n        // Prevent default right-click context menu\n        const handleContextMenu = (e) => {\n            e.preventDefault();\n        };\n\n        window.addEventListener('mousedown', handleMouseDown);\n        window.addEventListener('keydown', handleKeyDown);\n        window.addEventListener('contextmenu', handleContextMenu);\n\n        return () => {\n            window.removeEventListener('mousedown', handleMouseDown);\n            window.removeEventListener('keydown', handleKeyDown);\n            window.removeEventListener('contextmenu', handleContextMenu);\n        };\n    }, [mineAmmo, mortarAmmo, rpgAmmo, mineCooldown, mortarCooldown, rpgCooldown]);\n\n    // Enhanced weapon impact function that triggers explosion effects\n    const handleWeaponImpact = (position, weaponType) => {\n        console.log(`Weapon impact: ${weaponType} at position [${position.x.toFixed(2)}, ${position.y.toFixed(2)}, ${position.z.toFixed(2)}]`);\n\n        // Create a position that can be cloned for custom events\n        const cloneablePosition = {\n            x: position.x,\n            y: position.y,\n            z: position.z\n        };\n\n        // Use setTimeout to avoid calling setState during render\n        setTimeout(() => {\n            // Create a THREE.Vector3 for any functions that need it\n            const positionVector = new THREE.Vector3(cloneablePosition.x, cloneablePosition.y, cloneablePosition.z);\n\n            // Trigger explosion effect\n            // This will now handle finding objects in range and applying damage\n            triggerExplosion(positionVector, weaponType);\n\n            // Show one sample damage indicator at the impact point\n            showDamageIndicator(positionVector, 20);\n        }, 0);\n    };\n\n    // Update projectiles with explosion effects\n    useFrame(() => {\n        // Process projectiles with object pooling\n        setActiveProjectiles(prevProjectiles => {\n            const stillActiveProjectiles = [];\n\n            for (const projectile of prevProjectiles) {\n                // Decrement life and remove if expired\n                if (projectile.life <= 0) {\n                    // Trigger weapon impact with explosion\n                    handleWeaponImpact(projectile.position, projectile.type);\n                    // Return to pool\n                    returnProjectileToPool(projectile);\n                    continue; // Skip this projectile in the updated array\n                }\n\n                // Check for ground collision\n                if (projectile.position.y <= 0.1) {\n                    // Trigger weapon impact with explosion\n                    handleWeaponImpact(projectile.position, projectile.type);\n                    // Return to pool\n                    returnProjectileToPool(projectile);\n                    continue; // Skip this projectile\n                }\n\n                // Check for vehicle collision with the improved collision detection\n                const vehicleHit = checkProjectileVehicleCollision(projectile, scene);\n                if (vehicleHit) {\n                    // Trigger weapon impact with explosion at the collision point\n                    handleWeaponImpact(vehicleHit.position, projectile.type);\n                    // Return to pool\n                    returnProjectileToPool(projectile);\n                    continue; // Skip this projectile\n                }\n\n                // Store the previous position before updating\n                if (!projectile.previousPosition) {\n                    projectile.previousPosition = new THREE.Vector3();\n                }\n                projectile.previousPosition.copy(projectile.position);\n\n                // Update position based on direction and speed\n                projectile.position.add(\n                    projectile.direction.clone().multiplyScalar(projectile.speed)\n                );\n\n                // Apply gravity if applicable\n                if (projectile.gravity) {\n                    projectile.direction.y -= projectile.gravity;\n                }\n\n                // Reduce life\n                projectile.life--;\n\n                // Add to still active projectiles\n                stillActiveProjectiles.push(projectile);\n            }\n\n            return stillActiveProjectiles;\n        });\n    });\n\n    useFrame((state, delta) => {\n        if (!droneRef.current) return;\n\n        // Get current keyboard state\n        const { forward, backward, left, right, up, down, strafeLeft, strafeRight, shift } = getKeys();\n\n        // Get drone's current rotation\n        const rotation = droneRef.current.rotation.y;\n\n        // Get directional vectors\n        const forwardVector = new THREE.Vector3(\n            -Math.sin(rotation),\n            0,\n            -Math.cos(rotation)\n        );\n\n        const rightVector = new THREE.Vector3(\n            Math.cos(rotation),\n            0,\n            -Math.sin(rotation)\n        );\n\n        // Calculate thrust based on controls\n        if (forward) {\n            velocityRef.current.add(forwardVector.clone().multiplyScalar(THRUST * 2)); // 2x speed for forward\n        }\n        if (backward) {\n            velocityRef.current.add(forwardVector.clone().multiplyScalar(-THRUST));\n            velocityRef.current.y += DIVE_POWER * 0.8; // Slight upward movement when pressing S\n        }\n\n        // Handle rotation separately from strafing\n        if (left) {\n            droneRef.current.rotation.y = THREE.MathUtils.lerp(\n                droneRef.current.rotation.y,\n                droneRef.current.rotation.y + ROTATION_SPEED * 2,\n                0.2\n            );\n        }\n        if (right) {\n            droneRef.current.rotation.y = THREE.MathUtils.lerp(\n                droneRef.current.rotation.y,\n                droneRef.current.rotation.y - ROTATION_SPEED * 2,\n                0.2\n            );\n        }\n\n        // Add strafing with A and D keys\n        if (strafeLeft) velocityRef.current.add(rightVector.clone().multiplyScalar(-STRAFE_POWER));\n        if (strafeRight) velocityRef.current.add(rightVector.clone().multiplyScalar(STRAFE_POWER));\n\n        // Handle vertical movement\n        if (up) {\n            velocityRef.current.y += LIFT_POWER;\n        } else if (down) {\n            // If shift is pressed, go down 50% faster\n            const downSpeed = shift ? LIFT_POWER * 1.5 : LIFT_POWER;\n            velocityRef.current.y -= downSpeed;\n        } else {\n            // Apply gravity when not actively going up or down\n            velocityRef.current.y -= GRAVITY;\n        }\n\n        // Apply friction to slow down over time\n        velocityRef.current.multiplyScalar(FRICTION);\n\n        // Limit max speed\n        const speed = velocityRef.current.length();\n        if (speed > MAX_SPEED) {\n            velocityRef.current.normalize().multiplyScalar(MAX_SPEED);\n        }\n\n        // Apply velocity to drone position\n        droneRef.current.position.add(velocityRef.current);\n\n        // Prevent going below the ground\n        if (droneRef.current.position.y < 1) {\n            droneRef.current.position.y = 1;\n            velocityRef.current.y = 0;\n        }\n\n        // SIMPLIFIED QUATERNION-BASED TILTING APPROACH\n        // Using YXZ rotation order consistently (Yaw, Pitch, Roll)\n\n        // Calculate target tilt values based on input keys\n        let targetForwardTilt = 0;\n        let targetSideTilt = 0;\n\n        // Direct forward/backward tilt based on keys - REVERSED VALUES\n        if (forward) targetForwardTilt = -0.3;  // Reversed: Tilt backward when W pressed\n        if (backward) targetForwardTilt = 0.3; // Reversed: Tilt forward when S pressed\n\n        // Direct side tilt based on strafe keys\n        if (strafeLeft) targetSideTilt = 0.2;  // Tilt left when A pressed\n        if (strafeRight) targetSideTilt = -0.2; // Tilt right when D pressed\n\n        // Keep existing yaw (y-axis rotation)\n        const currentYaw = droneRef.current.rotation.y;\n\n        // Get current quaternion (preserves rotation order)\n        const currentQuat = new THREE.Quaternion();\n        currentQuat.setFromEuler(droneRef.current.rotation);\n\n        // Create a target quaternion with desired tilts\n        const targetEuler = new THREE.Euler(targetForwardTilt, currentYaw, targetSideTilt, 'YXZ');\n        const targetQuat = new THREE.Quaternion();\n        targetQuat.setFromEuler(targetEuler);\n\n        // Smoothly interpolate between current and target quaternions\n        const slerpQuat = new THREE.Quaternion().copy(currentQuat);\n        slerpQuat.slerp(targetQuat, 0.1);\n\n        // Apply the interpolated quaternion back to the drone\n        droneRef.current.setRotationFromQuaternion(slerpQuat);\n\n        // Update camera follow\n        const targetPosition = new THREE.Vector3(\n            droneRef.current.position.x,\n            droneRef.current.position.y,\n            droneRef.current.position.z\n        );\n\n        // Fixed camera parameters\n        const cameraDistance = 20;\n        const cameraHeight = 9;\n\n        // Handle camera positioning based on view mode\n        if (downwardViewActive) {\n            // Position camera directly below the drone, looking down\n            camera.position.set(\n                droneRef.current.position.x,\n                droneRef.current.position.y - 3, // 3 units below the drone\n                droneRef.current.position.z\n            );\n            // Look directly at ground below the drone\n            camera.lookAt(\n                droneRef.current.position.x,\n                0, // Looking at ground level\n                droneRef.current.position.z\n            );\n        } else {\n            // Calculate camera position behind the drone\n            const cameraOffset = new THREE.Vector3(\n                Math.sin(rotation) * cameraDistance,\n                cameraHeight,\n                Math.cos(rotation) * cameraDistance\n            );\n\n            // Set camera position\n            camera.position.copy(targetPosition).add(cameraOffset);\n\n            // Make camera look at the drone\n            camera.lookAt(\n                droneRef.current.position.x,\n                droneRef.current.position.y + 0.1,\n                droneRef.current.position.z\n            );\n        }\n\n        // Update position state for external components\n        setPosition([\n            droneRef.current.position.x,\n            droneRef.current.position.y,\n            droneRef.current.position.z\n        ]);\n    });\n\n    return (\n        <>\n            <group ref={droneRef} position={position}>\n                {/* Main drone body - smaller hexagon design */}\n                <mesh castShadow receiveShadow position={[0, 0, 0]}>\n                    <cylinderGeometry args={[0.6, 0.6, 0.2, 6]} />\n                    <meshStandardMaterial color=\"#4a00e0\" metalness={0.8} roughness={0.1} />\n                </mesh>\n\n                {/* Six thin round black arms extending from the hexagonal body to motors */}\n                {[...Array(6)].map((_, i) => {\n                    const armLength = 1.5; // Increased from 1.2 to 1.5 (25% longer)\n                    const angle = Math.PI * i / 3;\n                    // Calculate end position for placing motors\n                    const endX = Math.sin(angle) * armLength;\n                    const endZ = Math.cos(angle) * armLength;\n\n                    return (\n                        <group key={i}>\n                            {/* Arm */}\n                            <group rotation={[0, angle, 0]}>\n                                <mesh castShadow position={[armLength / 2, 0, 0]} rotation={[0, 0, Math.PI / 2]}>\n                                    <cylinderGeometry args={[0.04, 0.04, armLength, 8]} />\n                                    <meshStandardMaterial color=\"#121212\" metalness={0.6} roughness={0.3} />\n                                </mesh>\n\n                                {/* Motor unit at the end of the arm, properly aligned with arm direction */}\n                                <group position={[armLength, 0, 0]}>\n                                    <PropellerUnit\n                                        key={`motor-${i}`}\n                                        position={[0, 0, 0]}\n                                        index={i}\n                                        propRef={(el) => (propellersRefs.current[i] = el)}\n                                        active={propellersActive}\n                                        speed={propellersSpeed}\n                                        counterClockwise={i % 2 === 1} // Alternate direction\n                                        scale={0.75} // 25% smaller motors and propellers\n                                    />\n                                </group>\n                            </group>\n                        </group>\n                    );\n                })}\n\n                {/* Two landing legs - one on each side */}\n                <group position={[0.5, -0.2, 0]} rotation={[0, Math.PI / 2, 0]}>\n                    {/* Main vertical strut */}\n                    <mesh castShadow position={[0, -0.2, 0]}>\n                        <cylinderGeometry args={[0.05, 0.05, 0.4, 8]} />\n                        <meshStandardMaterial color=\"#64748b\" metalness={0.6} roughness={0.4} />\n                    </mesh>\n\n                    {/* Horizontal connector bar */}\n                    <mesh castShadow position={[0, -0.4, 0]} rotation={[0, 0, Math.PI / 2]}>\n                        <cylinderGeometry args={[0.04, 0.04, 0.8, 8]} />\n                        <meshStandardMaterial color=\"#475569\" metalness={0.5} roughness={0.5} />\n                    </mesh>\n\n                    {/* Two leg struts on each side */}\n                    <mesh castShadow position={[-0.35, -0.3, 0]} rotation={[0, 0, Math.PI / 6]}>\n                        <cylinderGeometry args={[0.03, 0.03, 0.3, 8]} />\n                        <meshStandardMaterial color=\"#64748b\" metalness={0.6} roughness={0.4} />\n                    </mesh>\n\n                    <mesh castShadow position={[0.35, -0.3, 0]} rotation={[0, 0, -Math.PI / 6]}>\n                        <cylinderGeometry args={[0.03, 0.03, 0.3, 8]} />\n                        <meshStandardMaterial color=\"#64748b\" metalness={0.6} roughness={0.4} />\n                    </mesh>\n\n                    {/* Foot pads */}\n                    <mesh castShadow position={[-0.4, -0.45, 0]}>\n                        <sphereGeometry args={[0.06, 8, 8]} />\n                        <meshStandardMaterial color=\"#475569\" metalness={0.4} roughness={0.6} />\n                    </mesh>\n\n                    <mesh castShadow position={[0.4, -0.45, 0]}>\n                        <sphereGeometry args={[0.06, 8, 8]} />\n                        <meshStandardMaterial color=\"#475569\" metalness={0.4} roughness={0.6} />\n                    </mesh>\n                </group>\n\n                {/* Left landing leg */}\n                <group position={[-0.5, -0.2, 0]} rotation={[0, -Math.PI / 2, 0]}>\n                    {/* Main vertical strut */}\n                    <mesh castShadow position={[0, -0.2, 0]}>\n                        <cylinderGeometry args={[0.05, 0.05, 0.4, 8]} />\n                        <meshStandardMaterial color=\"#64748b\" metalness={0.6} roughness={0.4} />\n                    </mesh>\n\n                    {/* Horizontal connector bar */}\n                    <mesh castShadow position={[0, -0.4, 0]} rotation={[0, 0, Math.PI / 2]}>\n                        <cylinderGeometry args={[0.04, 0.04, 0.8, 8]} />\n                        <meshStandardMaterial color=\"#475569\" metalness={0.5} roughness={0.5} />\n                    </mesh>\n\n                    {/* Two leg struts on each side */}\n                    <mesh castShadow position={[-0.35, -0.3, 0]} rotation={[0, 0, Math.PI / 6]}>\n                        <cylinderGeometry args={[0.03, 0.03, 0.3, 8]} />\n                        <meshStandardMaterial color=\"#64748b\" metalness={0.6} roughness={0.4} />\n                    </mesh>\n\n                    <mesh castShadow position={[0.35, -0.3, 0]} rotation={[0, 0, -Math.PI / 6]}>\n                        <cylinderGeometry args={[0.03, 0.03, 0.3, 8]} />\n                        <meshStandardMaterial color=\"#64748b\" metalness={0.6} roughness={0.4} />\n                    </mesh>\n\n                    {/* Foot pads */}\n                    <mesh castShadow position={[-0.4, -0.45, 0]}>\n                        <sphereGeometry args={[0.06, 8, 8]} />\n                        <meshStandardMaterial color=\"#475569\" metalness={0.4} roughness={0.6} />\n                    </mesh>\n\n                    <mesh castShadow position={[0.4, -0.45, 0]}>\n                        <sphereGeometry args={[0.06, 8, 8]} />\n                        <meshStandardMaterial color=\"#475569\" metalness={0.4} roughness={0.6} />\n                    </mesh>\n                </group>\n\n                {/* Anti-tank mine compartment - bottom */}\n                <group position={[0, -0.3, 0]}>\n                    <mesh castShadow receiveShadow>\n                        <cylinderGeometry args={[0.5, 0.5, 0.2, 12]} />\n                        <meshStandardMaterial color=\"#3d3d3d\" metalness={0.8} roughness={0.3} />\n                    </mesh>\n                    {/* Mines in a circular arrangement */}\n                    {[...Array(3)].map((_, i) => (\n                        <mesh\n                            key={i}\n                            position={[\n                                Math.sin(Math.PI * 2 * i / 3) * 0.25,\n                                -0.1,\n                                Math.cos(Math.PI * 2 * i / 3) * 0.25\n                            ]}\n                            castShadow\n                            receiveShadow\n                        >\n                            <cylinderGeometry args={[0.15, 0.15, 0.05, 12]} />\n                            <meshStandardMaterial color=\"#151515\" metalness={0.7} roughness={0.3} />\n                        </mesh>\n                    ))}\n                </group>\n\n                {/* Mortar launchers - mounted on left side */}\n                <group position={[-0.4, 0.2, 0]}>\n                    {/* Mortar tubes */}\n                    {[...Array(5)].map((_, i) => (\n                        <mesh\n                            key={i}\n                            position={[0, (i - 2) * 0.15, 0]}\n                            rotation={[0, 0, Math.PI / 2]}\n                            castShadow\n                            receiveShadow\n                        >\n                            <cylinderGeometry args={[0.08, 0.1, 0.3, 8]} />\n                            <meshStandardMaterial color=\"#3a3a3a\" metalness={0.7} roughness={0.4} />\n                        </mesh>\n                    ))}\n                    {/* Mortar shells - visible like RPGs */}\n                    {[...Array(5)].map((_, i) => (\n                        <mesh\n                            key={i}\n                            position={[-0.2, (i - 2) * 0.15, 0]}\n                            rotation={[0, 0, Math.PI / 2]}\n                            castShadow\n                            receiveShadow\n                        >\n                            <cylinderGeometry args={[0.06, 0.08, 0.15, 8]} />\n                            <meshStandardMaterial color=\"#626262\" metalness={0.7} roughness={0.3} />\n                        </mesh>\n                    ))}\n                </group>\n\n                {/* RPG launcher - mounted on right side */}\n                <group position={[0.4, 0.2, 0]}>\n                    {/* RPG tubes */}\n                    {[...Array(4)].map((_, i) => (\n                        <mesh\n                            key={i}\n                            position={[0, (i - 1.5) * 0.18, 0]}\n                            rotation={[0, 0, -Math.PI / 2]}\n                            castShadow\n                            receiveShadow\n                        >\n                            <cylinderGeometry args={[0.1, 0.12, 0.4, 8]} />\n                            <meshStandardMaterial color=\"#3a3a3a\" metalness={0.7} roughness={0.4} />\n                        </mesh>\n                    ))}\n                    {/* RPG warheads - shown as conical tips */}\n                    {[...Array(4)].map((_, i) => (\n                        <mesh\n                            key={i}\n                            position={[0.25, (i - 1.5) * 0.18, 0]}\n                            rotation={[0, 0, -Math.PI / 2]}\n                            castShadow\n                            receiveShadow\n                        >\n                            <coneGeometry args={[0.1, 0.3, 8]} />\n                            <meshStandardMaterial color=\"#626262\" metalness={0.7} roughness={0.3} />\n                        </mesh>\n                    ))}\n                </group>\n            </group>\n\n            {/* Render only active projectiles using the optimized renderer */}\n            <ProjectileRenderer projectiles={activeProjectiles} />\n        </>\n    );\n}\n\n// Optimized ProjectileRenderer for better performance\nfunction ProjectileRenderer({ projectiles }) {\n    // Use a simple shared geometry for all projectiles of the same type with low poly designs\n    const geometries = useMemo(() => ({\n        // Tank mine - low poly cylindrical mine design with detonator\n        [WEAPON_TYPES.ANTI_TANK_MINE]: new THREE.Group().add(\n            new THREE.Mesh(\n                new THREE.CylinderGeometry(0.3, 0.3, 0.11, 8),\n                new THREE.MeshStandardMaterial({ color: '#3a3a3a', metalness: 0.7, roughness: 0.3 })\n            ),\n            new THREE.Mesh(\n                new THREE.CylinderGeometry(0.075, 0.075, 0.08, 6),\n                new THREE.MeshStandardMaterial({ color: '#111111', metalness: 0.7, roughness: 0.3 })\n            ).translateY(0.09)\n        ),\n\n        // Mortar - low poly mortar shell design\n        [WEAPON_TYPES.MORTAR]: new THREE.Group().add(\n            new THREE.Mesh(\n                new THREE.CylinderGeometry(0.12, 0.12, 0.3, 8),\n                new THREE.MeshStandardMaterial({ color: '#4a5568', metalness: 0.6, roughness: 0.3 })\n            ),\n            new THREE.Mesh(\n                new THREE.ConeGeometry(0.12, 0.18, 8),\n                new THREE.MeshStandardMaterial({ color: '#2d3748', metalness: 0.7, roughness: 0.4 })\n            ).translateY(-0.24)\n        ).rotateX(Math.PI),\n\n        // RPG - low poly rocket-propelled grenade design\n        [WEAPON_TYPES.RPG]: new THREE.Group().add(\n            new THREE.Mesh(\n                new THREE.CylinderGeometry(0.09, 0.09, 0.38, 8),\n                new THREE.MeshStandardMaterial({ color: '#2c5e1a', metalness: 0.6, roughness: 0.3 })\n            ),\n            new THREE.Mesh(\n                new THREE.ConeGeometry(0.15, 0.23, 8),\n                new THREE.MeshStandardMaterial({ color: '#1e4212', metalness: 0.7, roughness: 0.4 })\n            ).translateY(-0.3),\n            new THREE.Mesh(\n                new THREE.BoxGeometry(0.03, 0.06, 0.15),\n                new THREE.MeshStandardMaterial({ color: '#3a6e27', metalness: 0.5, roughness: 0.5 })\n            ).translateY(0.11).translateZ(0.12)\n        ).rotateX(Math.PI)\n    }), []);\n\n    // Remove the old shared materials since we're using custom meshes with their own materials\n    const ProjectileMesh = React.memo(({ projectile }) => {\n        // Using rotation to simulate the projectile spinning as it falls\n        const [rotation, setRotation] = useState([0, 0, 0]);\n\n        useFrame(() => {\n            // Simple rotation for projectiles to make them look more dynamic\n            if (projectile.type === WEAPON_TYPES.ANTI_TANK_MINE) {\n                setRotation([0, rotation[1] + 0.02, 0]); // Mine rotates on Y axis\n            } else if (projectile.type === WEAPON_TYPES.MORTAR) {\n                setRotation([rotation[0] + 0.03, 0, 0]); // Mortar rotates on X axis (tumbling)\n            } else if (projectile.type === WEAPON_TYPES.RPG) {\n                // RPG doesn't rotate much - just a slight wobble\n                setRotation([Math.sin(Date.now() * 0.01) * 0.05, 0, 0]);\n            }\n        });\n\n        return (\n            <group\n                position={[projectile.position.x, projectile.position.y, projectile.position.z]}\n                rotation={rotation}\n            >\n                <primitive object={geometries[projectile.type].clone()} />\n            </group>\n        );\n    });\n\n    return (\n        <>\n            {projectiles.map(projectile => (\n                <ProjectileMesh key={projectile.id} projectile={projectile} />\n            ))}\n        </>\n    );\n}\n\n// Directly combined motor and propeller unit\nfunction PropellerUnit({ position, index, propRef, active = true, speed = 1.0, counterClockwise = false, scale = 1.0 }) {\n    const motorRef = useRef();\n    const propellerRef = useRef();\n    const direction = counterClockwise ? -1 : 1;\n\n    useFrame(() => {\n        if (propellerRef.current && active) {\n            // Spin propellers continuously, with variable speed\n            propellerRef.current.rotation.y += 0.5 * speed * direction;\n        }\n\n        if (propRef) {\n            propRef(propellerRef.current);\n        }\n    });\n\n    return (\n        <group position={position} scale={scale}>\n            {/* Motor housing - directly on arms */}\n            <mesh castShadow receiveShadow>\n                <cylinderGeometry args={[0.15, 0.18, 0.2, 12]} />\n                <meshStandardMaterial color=\"#2b2d42\" metalness={0.7} roughness={0.3} />\n            </mesh>\n\n            {/* Motor top */}\n            <mesh castShadow position={[0, 0.12, 0]}>\n                <cylinderGeometry args={[0.12, 0.12, 0.05, 12]} />\n                <meshStandardMaterial color=\"#8d99ae\" metalness={0.8} roughness={0.2} />\n            </mesh>\n\n            {/* Propeller - using a more realistic shape with 25% smaller blades */}\n            <group ref={propellerRef} position={[0, 0.15, 0]}>\n                {/* First blade - 25% smaller */}\n                <mesh castShadow>\n                    <meshStandardMaterial color=\"#2b2d42\" metalness={0.5} roughness={0.6} />\n                    <bufferGeometry>\n                        <bufferAttribute\n                            attach=\"attributes-position\"\n                            count={12}\n                            itemSize={3}\n                            array={new Float32Array([\n                                0, 0, 0, 0.45, 0.015, -0.075, 0.45, -0.015, 0.075,  // triangle 1\n                                0, 0, 0, 0.45, -0.015, 0.075, 0.9, 0, 0,        // triangle 2\n                                0, 0, 0, 0.9, 0, 0, 0.45, 0.015, -0.075,  // triangle 3\n                                0.45, 0.015, -0.075, 0.9, 0, 0, 0.45, -0.015, 0.075,  // triangle 4 (back face)\n                            ])}\n                        />\n                        <bufferAttribute\n                            attach=\"attributes-normal\"\n                            count={12}\n                            itemSize={3}\n                            array={new Float32Array([\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, -1, 0, 0, -1, 0, 0, -1, 0,\n                            ])}\n                        />\n                    </bufferGeometry>\n                </mesh>\n\n                {/* Second blade - rotated 180 degrees - 25% smaller */}\n                <mesh castShadow rotation={[0, Math.PI, 0]}>\n                    <meshStandardMaterial color=\"#2b2d42\" metalness={0.5} roughness={0.6} />\n                    <bufferGeometry>\n                        <bufferAttribute\n                            attach=\"attributes-position\"\n                            count={12}\n                            itemSize={3}\n                            array={new Float32Array([\n                                0, 0, 0, 0.45, 0.015, -0.075, 0.45, -0.015, 0.075,  // triangle 1\n                                0, 0, 0, 0.45, -0.015, 0.075, 0.9, 0, 0,        // triangle 2\n                                0, 0, 0, 0.9, 0, 0, 0.45, 0.015, -0.075,  // triangle 3\n                                0.45, 0.015, -0.075, 0.9, 0, 0, 0.45, -0.015, 0.075,  // triangle 4 (back face)\n                            ])}\n                        />\n                        <bufferAttribute\n                            attach=\"attributes-normal\"\n                            count={12}\n                            itemSize={3}\n                            array={new Float32Array([\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, 1, 0, 0, 1, 0, 0, 1, 0,\n                                0, -1, 0, 0, -1, 0, 0, -1, 0,\n                            ])}\n                        />\n                    </bufferGeometry>\n                </mesh>\n\n                {/* Propeller center cap */}\n                <mesh>\n                    <sphereGeometry args={[0.06, 8, 8]} />\n                    <meshStandardMaterial color=\"#2b2d42\" metalness={0.7} roughness={0.2} />\n                </mesh>\n            </group>\n        </group>\n    );\n}\n\n// Simplified landing leg component\nfunction LandingLeg({ position }) {\n    return (\n        <group position={position}>\n            {/* Vertical strut */}\n            <mesh castShadow>\n                <cylinderGeometry args={[0.04, 0.04, 0.6, 8]} />\n                <meshStandardMaterial color=\"#64748b\" metalness={0.6} roughness={0.4} />\n            </mesh>\n\n            {/* Foot pad */}\n            <mesh castShadow position={[0, -0.35, 0]}>\n                <sphereGeometry args={[0.08, 8, 8]} />\n                <meshStandardMaterial color=\"#475569\" metalness={0.4} roughness={0.6} />\n            </mesh>\n        </group>\n    );\n}\n\n// HUD component that will be used outside the Canvas\nexport function BomberHUD({ mineAmmo, mortarAmmo, rpgAmmo, showHUD }) {\n    if (!showHUD) return null;\n\n    return (\n        <div className=\"weapon-hud bomber-hud\">\n            <h2>BOMBER DRONE</h2>\n            <div className=\"weapon-list\">\n                <div className=\"weapon-item\">\n                    <span className=\"weapon-name\">MINE [{mineAmmo}]</span>\n                    <span className=\"weapon-key\">LMB</span>\n                </div>\n                <div className=\"weapon-item\">\n                    <span className=\"weapon-name\">MORTAR [{mortarAmmo}]</span>\n                    <span className=\"weapon-key\">RMB</span>\n                </div>\n                <div className=\"weapon-item\">\n                    <span className=\"weapon-name\">RPG [{rpgAmmo}]</span>\n                    <span className=\"weapon-key\">C</span>\n                </div>\n            </div>\n            <div className=\"view-toggle\">\n                <span>CAMERA VIEW TOGGLE: V</span>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { useDrones, DRONE_TYPES } from '../utils/GameContext';\nimport PlayerController from './player/PlayerController';\nimport Grenadier from './drones/Grenadier';\nimport Kamikaze from './drones/Kamikaze';\nimport Bomber from './drones/Bomber';\n\nexport default function DroneSwitcher({ world }) {\n  const { currentDrone } = useDrones();\n\n  // Render the appropriate drone based on the selection\n  switch (currentDrone) {\n    case DRONE_TYPES.PLAYER:\n      return <PlayerController world={world} />;\n    case DRONE_TYPES.KAMIKAZE:\n      return <Kamikaze />;\n    case DRONE_TYPES.BOMBER:\n      return <Bomber />;\n    case DRONE_TYPES.GRENADIER:\n    default:\n      return <Grenadier />;\n  }\n} ","import React from 'react';\n\nexport const TankA = (props) => (\n  <group {...props}>\n    {/* Main Hull - Using same hull as TankB */}\n    <mesh position={[0, 0.55, 0]}>\n      <boxGeometry args={[3.4, 0.9, 6.0]} />\n      <meshStandardMaterial color=\"#4B5320\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Lower hull/chassis - Same as TankB */}\n    <mesh position={[0, 0.2, 0]}>\n      <boxGeometry args={[3.5, 0.4, 6.1]} />\n      <meshStandardMaterial color=\"#485320\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Upper hull armor plating with beveled edges - Same as TankB */}\n    <mesh position={[0, 1.05, 0]}>\n      <boxGeometry args={[3.2, 0.2, 5.8]} />\n      <meshStandardMaterial color=\"#4D5522\" metalness={0.5} roughness={0.6} />\n    </mesh>\n\n    {/* Track assemblies - left side - using TankB position */}\n    <group position={[-1.9, 0.3, 0]}>\n      {/* Track body */}\n      <mesh position={[0, 0, 0]}>\n        <boxGeometry args={[0.6, 0.6, 6.2]} />\n        <meshStandardMaterial color=\"#252525\" metalness={0.3} roughness={0.8} />\n      </mesh>\n\n      {/* Drive sprocket */}\n      <mesh position={[0, 0, -2.9]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.45, 0.45, 0.65, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Idler wheel */}\n      <mesh position={[0, 0, 2.91]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.395, 0.395, 0.62, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Road wheels - more of them for realism */}\n      {[2.15, 1.5, 0.9, 0.3, -0.3, -0.9, -1.5, -2.15].map((z, i) => (\n        <mesh key={i} position={[0, -0.15, z]} rotation={[0, 0, Math.PI / 2]}>\n          <cylinderGeometry args={[0.3, 0.3, 0.65, 16]} />\n          <meshStandardMaterial color=\"#202020\" metalness={0.5} roughness={0.6} />\n        </mesh>\n      ))}\n    </group>\n\n    {/* Track assemblies - right side (mirrored) - using TankB position */}\n    <group position={[1.9, 0.3, 0]}>\n      {/* Track body */}\n      <mesh position={[0, 0, 0]}>\n        <boxGeometry args={[0.6, 0.6, 6.2]} />\n        <meshStandardMaterial color=\"#252525\" metalness={0.3} roughness={0.8} />\n      </mesh>\n\n      {/* Drive sprocket */}\n      <mesh position={[0, 0, -2.9]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.45, 0.45, 0.65, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Idler wheel */}\n      <mesh position={[0, 0, 2.91]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.395, 0.395, 0.62, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Road wheels - more of them for realism */}\n      {[2.15, 1.5, 0.9, 0.3, -0.3, -0.9, -1.5, -2.15].map((z, i) => (\n        <mesh key={i + 14} position={[0, -0.15, z]} rotation={[0, 0, Math.PI / 2]}>\n          <cylinderGeometry args={[0.3, 0.3, 0.65, 16]} />\n          <meshStandardMaterial color=\"#202020\" metalness={0.5} roughness={0.6} />\n        </mesh>\n      ))}\n    </group>\n\n    {/* Track guards/mudguards - using TankB position and dimensions */}\n    <mesh position={[1.9, 0.65, 0]}>\n      <boxGeometry args={[0.7, 0.1, 6.3]} />\n      <meshStandardMaterial color=\"#4F5D2F\" metalness={0.3} roughness={0.7} />\n    </mesh>\n    <mesh position={[-1.9, 0.65, 0]}>\n      <boxGeometry args={[0.7, 0.1, 6.3]} />\n      <meshStandardMaterial color=\"#4F5D2F\" metalness={0.3} roughness={0.7} />\n    </mesh>\n\n    {/* Keeping TankA's original turret components but positioned for the new hull */}\n    {/* Turret base with realistic rotation ring */}\n    <mesh position={[0, 1.15, -0.5]}>\n      <cylinderGeometry args={[1.4, 1.4, 0.22, 24]} />\n      <meshStandardMaterial color=\"#4B5320\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Main turret body with angled armor */}\n    <mesh position={[0, 1.6, -0.5]}>\n      <boxGeometry args={[2.4, 0.77, 2.86]} />\n      <meshStandardMaterial color=\"#4F5D2F\" metalness={0.4} roughness={0.6} />\n    </mesh>\n\n    {/* Turret front slope */}\n    <mesh position={[0, 1.6, -1.8]} rotation={[-Math.PI / 6, 0, 0]}>\n      <boxGeometry args={[2.2, 0.77, 0.88]} />\n      <meshStandardMaterial color=\"#4F5D2F\" metalness={0.4} roughness={0.6} />\n    </mesh>\n\n    {/* Loader's hatch - now with smoother circular shape */}\n    <mesh position={[-0.6, 2.05, -0.2]}>\n      <cylinderGeometry args={[0.385, 0.385, 0.11, 24]} />\n      <meshStandardMaterial color=\"#3A3A3A\" metalness={0.5} roughness={0.6} />\n    </mesh>\n\n    {/* Main gun assembly - adjusted position for the new hull height */}\n    <group position={[0, 1.6, -0.5]}>\n      {/* Gun mantlet */}\n      <mesh position={[0, 0, -1.32]}>\n        <boxGeometry args={[1.55, 0.88, 0.66]} />\n        <meshStandardMaterial color=\"#3A3A3A\" metalness={0.6} roughness={0.5} />\n      </mesh>\n\n      {/* Main gun barrel */}\n      <mesh position={[0, 0, -2.64]} rotation={[-Math.PI / 2, 0, 0]}>\n        <cylinderGeometry args={[0.18, 0.18, 6.05, 16]} />\n        <meshStandardMaterial color=\"#2A2A2A\" metalness={0.6} roughness={0.5} />\n      </mesh>\n\n      {/* Thermal sleeve */}\n      <mesh position={[0, 0, -1.98]} rotation={[-Math.PI / 2, 0, 0]}>\n        <cylinderGeometry args={[0.22, 0.22, 1.32, 16]} />\n        <meshStandardMaterial color=\"#3A3A3A\" metalness={0.4} roughness={0.7} />\n      </mesh>\n    </group>\n\n    {/* ERA blocks on hull front */}\n    {[-1.35, -0.8, -0.25, 0.25, 0.8, 1.35].map((x, i) => (\n      <mesh key={i + 32} position={[x, 0.75, 2.8]} rotation={[0, 0, 0]}>\n        <boxGeometry args={[0.4, 0.3, 0.2]} />\n        <meshStandardMaterial color=\"#5D6540\" metalness={0.3} roughness={0.8} />\n      </mesh>\n    ))}\n\n    {/* Side skirts - adjusted for new hull */}\n    <mesh position={[2.1, 0.4, 0]}>\n      <boxGeometry args={[0.1, 0.6, 5.8]} />\n      <meshStandardMaterial color=\"#4F5D2F\" metalness={0.3} roughness={0.7} />\n    </mesh>\n    <mesh position={[-2.1, 0.4, 0]}>\n      <boxGeometry args={[0.1, 0.6, 5.8]} />\n      <meshStandardMaterial color=\"#4F5D2F\" metalness={0.3} roughness={0.7} />\n    </mesh>\n\n    {/* Additional side hull detail - adjusted for new hull */}\n    <mesh position={[1.85, 0.5, 0]}>\n      <boxGeometry args={[0.3, 0.6, 6.2]} />\n      <meshStandardMaterial color=\"#4A5128\" metalness={0.4} roughness={0.7} />\n    </mesh>\n    <mesh position={[-1.85, 0.5, 0]}>\n      <boxGeometry args={[0.3, 0.6, 6.2]} />\n      <meshStandardMaterial color=\"#4A5128\" metalness={0.4} roughness={0.7} />\n    </mesh>\n  </group>\n);\n\nexport const TankB = (props) => (\n  <group {...props}>\n    {/* Main Hull - Using military green with realistic dimensions */}\n    <mesh position={[0, 0.55, 0]}>\n      <boxGeometry args={[3.4, 0.9, 6.0]} />\n      <meshStandardMaterial color=\"#3B4A32\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Lower hull/chassis */}\n    <mesh position={[0, 0.2, 0]}>\n      <boxGeometry args={[3.5, 0.4, 6.1]} />\n      <meshStandardMaterial color=\"#323D2A\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Upper hull armor plating with beveled edges */}\n    <mesh position={[0, 1.05, 0]}>\n      <boxGeometry args={[3.2, 0.2, 5.8]} />\n      <meshStandardMaterial color=\"#41503A\" metalness={0.5} roughness={0.6} />\n    </mesh>\n\n    {/* Track assemblies - left side */}\n    <group position={[-1.9, 0.3, 0]}>\n      {/* Track body */}\n      <mesh position={[0, 0, 0]}>\n        <boxGeometry args={[0.6, 0.6, 6.2]} />\n        <meshStandardMaterial color=\"#252525\" metalness={0.3} roughness={0.8} />\n      </mesh>\n\n      {/* Drive sprocket */}\n      <mesh position={[0, 0, -2.9]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.45, 0.45, 0.65, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Idler wheel */}\n      <mesh position={[0, 0, 2.91]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.395, 0.395, 0.62, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Road wheels - more of them for realism */}\n      {[2.15, 1.5, 0.9, 0.3, -0.3, -0.9, -1.5, -2.15].map((z, i) => (\n        <mesh key={i} position={[0, -0.15, z]} rotation={[0, 0, Math.PI / 2]}>\n          <cylinderGeometry args={[0.3, 0.3, 0.65, 16]} />\n          <meshStandardMaterial color=\"#202020\" metalness={0.5} roughness={0.6} />\n        </mesh>\n      ))}\n\n\n    </group>\n\n    {/* Track assemblies - right side (mirrored) */}\n    <group position={[1.9, 0.3, 0]}>\n      {/* Track body */}\n      <mesh position={[0, 0, 0]}>\n        <boxGeometry args={[0.6, 0.6, 6.2]} />\n        <meshStandardMaterial color=\"#252525\" metalness={0.3} roughness={0.8} />\n      </mesh>\n\n      {/* Drive sprocket */}\n      <mesh position={[0, 0, -2.9]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.45, 0.45, 0.65, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Idler wheel */}\n      <mesh position={[0, 0, 2.91]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.395, 0.395, 0.62, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Road wheels - more of them for realism */}\n      {[2.15, 1.5, 0.9, 0.3, -0.3, -0.9, -1.5, -2.15].map((z, i) => (\n        <mesh key={i + 14} position={[0, -0.15, z]} rotation={[0, 0, Math.PI / 2]}>\n          <cylinderGeometry args={[0.3, 0.3, 0.65, 16]} />\n          <meshStandardMaterial color=\"#202020\" metalness={0.5} roughness={0.6} />\n        </mesh>\n      ))}\n\n\n    </group>\n\n    {/* Track guards/mudguards */}\n    <mesh position={[1.9, 0.65, 0]}>\n      <boxGeometry args={[0.7, 0.1, 6.3]} />\n      <meshStandardMaterial color=\"#41503A\" metalness={0.3} roughness={0.7} />\n    </mesh>\n    <mesh position={[-1.9, 0.65, 0]}>\n      <boxGeometry args={[0.7, 0.1, 6.3]} />\n      <meshStandardMaterial color=\"#41503A\" metalness={0.3} roughness={0.7} />\n    </mesh>\n\n    {/* Main turret body with improved shape */}\n    <mesh position={[0, 1.5, -0.2]} rotation={[0, 0, 0]}>\n      <boxGeometry args={[2.6, 0.6, 3.0]} />\n      <meshStandardMaterial color=\"#445139\" metalness={0.5} roughness={0.6} />\n    </mesh>\n\n    {/* Turret front slope */}\n    <mesh position={[0, 1.5, -1.6]} rotation={[-Math.PI / 6, 0, 0]}>\n      <boxGeometry args={[2.4, 0.6, 0.8]} />\n      <meshStandardMaterial color=\"#465339\" metalness={0.5} roughness={0.6} />\n    </mesh>\n\n    {/* Turret rear with stowage rack */}\n    <mesh position={[0, 1.5, 1.4]}>\n      <boxGeometry args={[2.4, 0.5, 0.3]} />\n      <meshStandardMaterial color=\"#404D39\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Loader's hatch */}\n    <mesh position={[-0.6, 1.85, -0.5]}>\n      <cylinderGeometry args={[0.4, 0.4, 0.15, 16]} />\n      <meshStandardMaterial color=\"#394431\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Main gun mantlet (thick armor around gun) */}\n    <mesh position={[0, 1.5, -1.9]}>\n      <boxGeometry args={[1.3, 0.7, 0.6]} />\n      <meshStandardMaterial color=\"#3D4935\" metalness={0.5} roughness={0.6} />\n    </mesh>\n\n    {/* Main gun barrel */}\n    <mesh position={[0, 1.5, -3.8]} rotation={[-Math.PI / 2, 0, 0]}>\n      <cylinderGeometry args={[0.18, 0.18, 3.0, 16]} />\n      <meshStandardMaterial color=\"#2A2A2A\" metalness={0.6} roughness={0.5} />\n    </mesh>\n\n    {/* Thermal sleeve on barrel */}\n    <mesh position={[0, 1.5, -2.8]} rotation={[-Math.PI / 2, 0, 0]}>\n      <cylinderGeometry args={[0.22, 0.22, 1.2, 16]} />\n      <meshStandardMaterial color=\"#252525\" metalness={0.4} roughness={0.7} />\n    </mesh>\n  </group>\n);\n\nexport default { TankA, TankB };","import React from 'react';\n\n/* IFV Vehicle Designs */\nexport const IFV_A = (props) => (\n  <group {...props}>\n    {/* Base hull with realistic proportions - extended length */}\n    <mesh position={[0, 0.4, 0.4]}>\n      <boxGeometry args={[2.4, 0.6, 5.0]} />\n      <meshStandardMaterial color=\"#485142\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Lower hull/chassis - extended length */}\n    <mesh position={[0, 0.2, 0.4]}>\n      <boxGeometry args={[2.5, 0.4, 3.0]} />\n      <meshStandardMaterial color=\"#445029\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Sloped front glacis plate */}\n    <mesh position={[0, 0.5, -2.0]} rotation={[-Math.PI / 4, 0, 0]}>\n      <boxGeometry args={[2.2, 0.7, 0.8]} />\n      <meshStandardMaterial color=\"#4A5144\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Upper hull structure with extended troop compartment */}\n    <mesh position={[0, 0.9, 0.8]}>\n      <boxGeometry args={[2.2, 0.6, 4.4]} />\n      <meshStandardMaterial color=\"#4D5446\" metalness={0.3} roughness={0.6} />\n    </mesh>\n\n    {/* Track assemblies - left side - extended length */}\n    <group position={[-1.3, 0.3, 0.4]}>\n      {/* Track body - extended length */}\n      <mesh position={[0, 0, 0]}>\n        <boxGeometry args={[0.6, 0.6, 5.2]} />\n        <meshStandardMaterial color=\"#252525\" metalness={0.3} roughness={0.8} />\n      </mesh>\n\n      {/* Drive sprocket - moved forward*/}\n      <mesh position={[0, 0, -2.5]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.35, 0.35, 0.65, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Idler wheel - moved backward */}\n      <mesh position={[0, 0, 2.5]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.32, 0.32, 0.65, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Road wheels - repositioned for longer track */}\n      {[1.8, 0.9, 0, -0.9, -1.8].map((z, i) => (\n        <mesh key={i} position={[0, -0.15, z]} rotation={[0, 0, Math.PI / 2]}>\n          <cylinderGeometry args={[0.3, 0.3, 0.65, 16]} />\n          <meshStandardMaterial color=\"#202020\" metalness={0.5} roughness={0.6} />\n        </mesh>\n      ))}\n\n\n    </group>\n\n    {/* Track assemblies - right side - extended length */}\n    <group position={[1.3, 0.3, 0.4]}>\n      {/* Track body - extended length */}\n      <mesh position={[0, 0, 0]}>\n        <boxGeometry args={[0.6, 0.6, 5.2]} />\n        <meshStandardMaterial color=\"#252525\" metalness={0.3} roughness={0.8} />\n      </mesh>\n\n      {/* Drive sprocket - moved forward */}\n      <mesh position={[0, 0, -2.5]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.35, 0.35, 0.65, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Idler wheel - moved backward */}\n      <mesh position={[0, 0, 2.5]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.32, 0.32, 0.65, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Road wheels - repositioned for longer track */}\n      {[1.8, 0.9, 0, -0.9, -1.8].map((z, i) => (\n        <mesh key={i + 14} position={[0, -0.15, z]} rotation={[0, 0, Math.PI / 2]}>\n          <cylinderGeometry args={[0.3, 0.3, 0.65, 16]} />\n          <meshStandardMaterial color=\"#202020\" metalness={0.5} roughness={0.6} />\n        </mesh>\n      ))}\n\n\n    </group>\n\n    {/* Track guards/mudguards - extended length */}\n    <mesh position={[1.3, 0.65, 0.4]}>\n      <boxGeometry args={[0.7, 0.1, 5.3]} />\n      <meshStandardMaterial color=\"#4A5144\" metalness={0.3} roughness={0.7} />\n    </mesh>\n    <mesh position={[-1.3, 0.65, 0.4]}>\n      <boxGeometry args={[0.7, 0.1, 5.3]} />\n      <meshStandardMaterial color=\"#4A5144\" metalness={0.3} roughness={0.7} />\n    </mesh>\n\n    {/* Turret base with rotation ring - same position */}\n    <mesh position={[0, 1.2, -0.4]}>\n      <cylinderGeometry args={[0.9, 0.9, 0.15, 24]} />\n      <meshStandardMaterial color=\"#424739\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Main turret body - same position */}\n    <mesh position={[0, 1.5, -0.4]}>\n      <boxGeometry args={[1.8, 0.5, 1.6]} />\n      <meshStandardMaterial color=\"#4D5446\" metalness={0.4} roughness={0.6} />\n    </mesh>\n\n    {/* Turret front slope - same position */}\n    <mesh position={[0, 1.5, -1.1]} rotation={[-Math.PI / 6, 0, 0]}>\n      <boxGeometry args={[1.6, 0.5, 0.6]} />\n      <meshStandardMaterial color=\"#4D5446\" metalness={0.4} roughness={0.6} />\n    </mesh>\n\n    {/* Loader's hatch - similar to tanks */}\n    <mesh position={[-0.5, 1.8, -0.4]}>\n      <cylinderGeometry args={[0.28, 0.28, 0.08, 24]} />\n      <meshStandardMaterial color=\"#3A3A3A\" metalness={0.5} roughness={0.6} />\n    </mesh>\n\n    {/* Main gun assembly - same position */}\n    <group position={[0, 1.5, -0.4]}>\n      {/* Gun mantlet */}\n      <mesh position={[0, 0, -0.8]}>\n        <boxGeometry args={[1.0, 0.6, 0.4]} />\n        <meshStandardMaterial color=\"#3A3A3A\" metalness={0.6} roughness={0.5} />\n      </mesh>\n\n      {/* Main gun */}\n      <mesh position={[0, 0, -2.0]} rotation={[-Math.PI / 2, 0, 0]}>\n        <cylinderGeometry args={[0.12, 0.12, 2.4, 16]} />\n        <meshStandardMaterial color=\"#2A2A2A\" metalness={0.6} roughness={0.5} />\n      </mesh>\n\n      {/* Thermal sleeve */}\n      <mesh position={[0, 0, -1.4]} rotation={[-Math.PI / 2, 0, 0]}>\n        <cylinderGeometry args={[0.15, 0.15, 1.2, 16]} />\n        <meshStandardMaterial color=\"#3A3A3A\" metalness={0.4} roughness={0.7} />\n      </mesh>\n    </group>\n\n    {/* Troop compartment details - extended */}\n    {/* Side armor plates - extended */}\n    <mesh position={[1.2, 0.7, 0.8]}>\n      <boxGeometry args={[0.1, 0.8, 3.8]} />\n      <meshStandardMaterial color=\"#4A5144\" metalness={0.3} roughness={0.7} />\n    </mesh>\n    <mesh position={[-1.2, 0.7, 0.8]}>\n      <boxGeometry args={[0.1, 0.8, 3.8]} />\n      <meshStandardMaterial color=\"#4A5144\" metalness={0.3} roughness={0.7} />\n    </mesh>\n\n    {/* Extended rear compartment */}\n    <mesh position={[0, 0.9, 2.2]}>\n      <boxGeometry args={[2.2, 0.8, 1.6]} />\n      <meshStandardMaterial color=\"#4D5446\" metalness={0.3} roughness={0.6} />\n    </mesh>\n\n\n\n  </group>\n);\n\n/* IFV Design B – A modern Infantry Fighting Vehicle with realistic proportions and details */\nexport const IFV_B = (props) => (\n  <group {...props}>\n    {/* Main hull with realistic proportions */}\n    <mesh position={[0, 0.35, 0]}>\n      <boxGeometry args={[2.4, 0.6, 4.4]} />\n      <meshStandardMaterial color=\"#4A5144\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Sloped front glacis plate */}\n    <mesh position={[0, 0.55, 2.0]} rotation={[Math.PI / 5, 0, 0]}>\n      <boxGeometry args={[2.4, 0.8, 0.8]} />\n      <meshStandardMaterial color=\"#4D5446\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Upper hull with angled sides for better protection */}\n    <mesh position={[0, 0.8, 0.2]}>\n      <boxGeometry args={[2.2, 0.5, 3.6]} />\n      <meshStandardMaterial color=\"#515749\" metalness={0.3} roughness={0.6} />\n    </mesh>\n\n    {/* Track assemblies - left side (same as IFV_A) */}\n    <group position={[-1.3, 0.3, 0]}>\n      {/* Track body */}\n      <mesh position={[0, 0, 0]}>\n        <boxGeometry args={[0.6, 0.6, 4.4]} />\n        <meshStandardMaterial color=\"#252525\" metalness={0.3} roughness={0.8} />\n      </mesh>\n\n      {/* Drive sprocket */}\n      <mesh position={[0, 0, -2.1]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.35, 0.35, 0.65, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Idler wheel */}\n      <mesh position={[0, 0, 2.1]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.32, 0.32, 0.65, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Road wheels */}\n      {[1.4, 0.7, 0, -0.7, -1.4].map((z, i) => (\n        <mesh key={i} position={[0, -0.15, z]} rotation={[0, 0, Math.PI / 2]}>\n          <cylinderGeometry args={[0.3, 0.3, 0.65, 16]} />\n          <meshStandardMaterial color=\"#202020\" metalness={0.5} roughness={0.6} />\n        </mesh>\n      ))}\n    </group>\n\n    {/* Track assemblies - right side (same as IFV_A) */}\n    <group position={[1.3, 0.3, 0]}>\n      {/* Track body */}\n      <mesh position={[0, 0, 0]}>\n        <boxGeometry args={[0.6, 0.6, 4.4]} />\n        <meshStandardMaterial color=\"#252525\" metalness={0.3} roughness={0.8} />\n      </mesh>\n\n      {/* Drive sprocket */}\n      <mesh position={[0, 0, -2.1]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.35, 0.35, 0.65, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Idler wheel */}\n      <mesh position={[0, 0, 2.1]} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.32, 0.32, 0.65, 16]} />\n        <meshStandardMaterial color=\"#1A1A1A\" metalness={0.5} roughness={0.7} />\n      </mesh>\n\n      {/* Road wheels */}\n      {[1.4, 0.7, 0, -0.7, -1.4].map((z, i) => (\n        <mesh key={i + 14} position={[0, -0.15, z]} rotation={[0, 0, Math.PI / 2]}>\n          <cylinderGeometry args={[0.3, 0.3, 0.65, 16]} />\n          <meshStandardMaterial color=\"#202020\" metalness={0.5} roughness={0.6} />\n        </mesh>\n      ))}\n    </group>\n\n    {/* Track guards/mudguards (same as IFV_A) */}\n    <mesh position={[1.3, 0.65, 0]}>\n      <boxGeometry args={[0.7, 0.1, 4.5]} />\n      <meshStandardMaterial color=\"#4A5144\" metalness={0.3} roughness={0.7} />\n    </mesh>\n    <mesh position={[-1.3, 0.65, 0]}>\n      <boxGeometry args={[0.7, 0.1, 4.5]} />\n      <meshStandardMaterial color=\"#4A5144\" metalness={0.3} roughness={0.7} />\n    </mesh>\n\n    {/* Enhanced turret base with realistic ring */}\n    <mesh position={[0, 1.05, -0.6]}>\n      <cylinderGeometry args={[1.1, 1.1, 0.15, 32]} />\n      <meshStandardMaterial color=\"#3F4438\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Main turret body with modern angular armor */}\n    <mesh position={[0, 1.4, -0.6]}>\n      <boxGeometry args={[1.8, 0.6, 2.0]} />\n      <meshStandardMaterial color=\"#4A5144\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Turret front with composite armor spacing */}\n    <mesh position={[0, 1.4, -1.5]} rotation={[Math.PI / 8, 0, 0]}>\n      <boxGeometry args={[1.8, 0.6, 0.8]} />\n      <meshStandardMaterial color=\"#4D5446\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n    {/* Loader's hatch - similar to tanks */}\n    <mesh position={[-0.5, 1.7, -0.4]}>\n      <cylinderGeometry args={[0.28, 0.28, 0.08, 24]} />\n      <meshStandardMaterial color=\"#3A3A3A\" metalness={0.5} roughness={0.6} />\n    </mesh>\n\n    {/* Main gun with thermal sleeve */}\n    <mesh position={[0, 1.4, -2.4]} rotation={[Math.PI / 2, 0, 0]}>\n      <cylinderGeometry args={[0.15, 0.15, 2.2, 24]} />\n      <meshStandardMaterial color=\"#252525\" metalness={0.6} roughness={0.5} />\n    </mesh>\n\n    {/* Gun thermal sleeve */}\n    <mesh position={[0, 1.4, -1.8]} rotation={[Math.PI / 2, 0, 0]}>\n      <cylinderGeometry args={[0.18, 0.18, 1.0, 24]} />\n      <meshStandardMaterial color=\"#303030\" metalness={0.4} roughness={0.8} />\n    </mesh>\n\n    {/* Rear troop compartment details */}\n    <mesh position={[0, 1.0, 1.0]}>\n      <boxGeometry args={[2.0, 0.4, 1.8]} />\n      <meshStandardMaterial color=\"#485142\" metalness={0.4} roughness={0.7} />\n    </mesh>\n\n  </group>\n);\n\nexport default { IFV_A, IFV_B }; ","import React from 'react';\nimport * as THREE from 'three';\n\n// Shared materials to improve performance\nconst SHARED_MATERIALS = {\n  black: new THREE.MeshStandardMaterial({ color: \"#222\" }),\n  darkGray: new THREE.MeshStandardMaterial({ color: \"#444\" }),\n  oliveGreen: new THREE.MeshStandardMaterial({ color: \"#4d5d28\" }),\n  midBlue: new THREE.MeshStandardMaterial({ color: \"#3498DB\" }),\n  purple: new THREE.MeshStandardMaterial({ color: \"#9B59B6\" }),\n  headlight: new THREE.MeshStandardMaterial({\n    color: \"#FFFFFF\",\n    emissive: \"#FFFFCC\",\n    emissiveIntensity: 0.5\n  }),\n  windshield: new THREE.MeshStandardMaterial({\n    color: \"#87CEEB\",\n    transparent: true,\n    opacity: 0.7\n  })\n};\n\n/* Civilian Truck Vehicles */\n/* Civilian Truck 1 – A simplified two-part truck with a cab and trailer */\nexport const CivilianTruck1 = (props) => (\n  <group {...props}>\n    {/* Cab */}\n    <group position={[0, 0.75, -2.2]}>\n      <mesh>\n        <boxGeometry args={[2, 1.3, 1.8]} />\n        <meshStandardMaterial color=\"#778899\" />\n      </mesh>\n      {/* Windshield */}\n      <mesh position={[0, 0.3, -0.9]}>\n        <boxGeometry args={[1.6, 0.4, 0.1]} />\n        <meshStandardMaterial {...SHARED_MATERIALS.windshield} />\n      </mesh>\n      {/* Headlights */}\n      <mesh position={[0, -0.3, -0.95]}>\n        <boxGeometry args={[1.2, 0.2, 0.05]} />\n        <meshStandardMaterial {...SHARED_MATERIALS.headlight} />\n      </mesh>\n    </group>\n    {/* Cargo area */}\n    <group position={[0, 0.85, 0.8]}>\n      <mesh>\n        <boxGeometry args={[2.2, 1.5, 3.8]} />\n        <meshStandardMaterial color=\"#A9A9A9\" />\n      </mesh>\n      {/* Decorative stripe */}\n      <mesh position={[0, -0.4, 0]}>\n        <boxGeometry args={[2.25, 0.1, 3.85]} />\n        <meshStandardMaterial color=\"#CBD5E0\" /> {/* Light gray */}\n      </mesh>\n    </group>\n    {/* Wheels - thinner width */}\n    {[\n      { pos: [-1.0, 0.4, -2.2] },\n      { pos: [1.0, 0.4, -2.2] },\n      { pos: [-1.1, 0.4, 0.6] },\n      { pos: [1.1, 0.4, 0.6] },\n      { pos: [-1.1, 0.4, 2] },\n      { pos: [1.1, 0.4, 2] }\n    ].map((wheel, i) => (\n      <mesh key={i} position={wheel.pos} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.4, 0.4, 0.22, 8]} />\n        <meshStandardMaterial color=\"#222\" />\n      </mesh>\n    ))}\n\n    {/* Named mesh for hit detection */}\n    <mesh position={[0, 0, 0]} visible={false} name=\"body\">\n      <boxGeometry args={[2.2, 1.5, 5.0]} />\n      <meshStandardMaterial color=\"red\" wireframe opacity={0.1} transparent />\n    </mesh>\n  </group>\n);\n\n/* Civilian Truck 2 – A simplified modern truck with integrated design */\nexport const CivilianTruck2 = (props) => (\n  <group {...props}>\n    {/* Cab */}\n    <group position={[0, 0.75, -2.2]}>\n      <mesh>\n        <boxGeometry args={[2, 1.3, 1.8]} />\n        <meshStandardMaterial color=\"#708090\" />\n      </mesh>\n      {/* Windshield */}\n      <mesh position={[0, 0.3, -0.9]}>\n        <boxGeometry args={[1.6, 0.4, 0.1]} />\n        <meshStandardMaterial {...SHARED_MATERIALS.windshield} />\n      </mesh>\n      {/* Headlights */}\n      <mesh position={[0, -0.3, -0.95]}>\n        <boxGeometry args={[1.2, 0.2, 0.05]} />\n        <meshStandardMaterial {...SHARED_MATERIALS.headlight} />\n      </mesh>\n    </group>\n    {/* Cargo area */}\n    <group position={[0, 0.85, 0.8]}>\n      <mesh>\n        <boxGeometry args={[2.2, 1.5, 3.8]} />\n        <meshStandardMaterial color=\"#696969\" />\n      </mesh>\n      {/* Decorative stripe */}\n      <mesh position={[0, -0.4, 0]}>\n        <boxGeometry args={[2.25, 0.1, 3.85]} />\n        <meshStandardMaterial color=\"#CBD5E0\" /> {/* Light gray */}\n      </mesh>\n    </group>\n    {/* Wheels - thinner width */}\n    {[\n      { pos: [-1.0, 0.4, -2.2] },\n      { pos: [1.0, 0.4, -2.2] },\n      { pos: [-1.1, 0.4, 0.6] },\n      { pos: [1.1, 0.4, 0.6] },\n      { pos: [-1.1, 0.4, 2] },\n      { pos: [1.1, 0.4, 2] }\n    ].map((wheel, i) => (\n      <mesh key={i} position={wheel.pos} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.4, 0.4, 0.22, 8]} />\n        <meshStandardMaterial color=\"#222\" />\n      </mesh>\n    ))}\n\n    {/* Named mesh for hit detection */}\n    <mesh position={[0, 0, 0]} visible={false} name=\"body\">\n      <boxGeometry args={[2.2, 1.5, 5.0]} />\n      <meshStandardMaterial color=\"red\" wireframe opacity={0.1} transparent />\n    </mesh>\n  </group>\n);\n\n/* Civilian Truck 3 – A design similar to Truck 2 but with different colors */\nexport const CivilianTruck3 = (props) => (\n  <group {...props}>\n    {/* Cab */}\n    <group position={[0, 0.75, -2.2]}>\n      <mesh>\n        <boxGeometry args={[2, 1.3, 1.8]} />\n        <meshStandardMaterial color=\"#7D7D7D\" /> {/* Lighter grey */}\n      </mesh>\n      {/* Windshield */}\n      <mesh position={[0, 0.3, -0.9]}>\n        <boxGeometry args={[1.6, 0.4, 0.1]} />\n        <meshStandardMaterial {...SHARED_MATERIALS.windshield} />\n      </mesh>\n      {/* Headlights */}\n      <mesh position={[0, -0.3, -0.95]}>\n        <boxGeometry args={[1.2, 0.2, 0.05]} />\n        <meshStandardMaterial {...SHARED_MATERIALS.headlight} />\n      </mesh>\n    </group>\n    {/* Cargo area */}\n    <group position={[0, 0.85, 0.8]}>\n      <mesh>\n        <boxGeometry args={[2.2, 1.5, 3.8]} />\n        <meshStandardMaterial color=\"#2C5282\" /> {/* Darker blue */}\n      </mesh>\n      {/* Decorative stripe */}\n      <mesh position={[0, -0.4, 0]}>\n        <boxGeometry args={[2.25, 0.1, 3.85]} />\n        <meshStandardMaterial color=\"#CBD5E0\" /> {/* Light gray */}\n      </mesh>\n    </group>\n    {/* Wheels - thinner width */}\n    {[\n      { pos: [-1.0, 0.4, -2.2] },\n      { pos: [1.0, 0.4, -2.2] },\n      { pos: [-1.1, 0.4, 0.6] },\n      { pos: [1.1, 0.4, 0.6] },\n      { pos: [-1.1, 0.4, 2] },\n      { pos: [1.1, 0.4, 2] }\n    ].map((wheel, i) => (\n      <mesh key={i} position={wheel.pos} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.4, 0.4, 0.22, 8]} />\n        <meshStandardMaterial color=\"#222\" />\n      </mesh>\n    ))}\n\n    {/* Named mesh for hit detection */}\n    <mesh position={[0, 0, 0]} visible={false} name=\"body\">\n      <boxGeometry args={[2.2, 1.5, 5.0]} />\n      <meshStandardMaterial color=\"red\" wireframe opacity={0.1} transparent />\n    </mesh>\n  </group>\n);\n\n/* Military Truck Vehicles */\n\n/* Military Truck 1 – A heavily armored truck with reinforced plating and visible mechanical details */\nexport const MilitaryTruck1 = (props) => (\n  <group {...props}>\n    {/* Cab section - raised slightly */}\n    <mesh position={[0, 0.8, -2]}>\n      <boxGeometry args={[1.8, 1.4, 1.8]} />\n      <meshStandardMaterial color=\"#556B2F\" />\n    </mesh>\n    {/* Main cargo/troop section - raised slightly */}\n    <mesh position={[0, 0.8, 0.8]}>\n      <boxGeometry args={[1.8, 1.4, 3.6]} />\n      <meshStandardMaterial color=\"#556B2F\" />\n    </mesh>\n    {/* Additional armor layer - fixed position to prevent z-fighting */}\n    <mesh position={[0, 1.51, -2]}>\n      <boxGeometry args={[1.7, 0.25, 1.7]} />\n      <meshStandardMaterial color=\"#6B8E23\" />\n    </mesh>\n    <mesh position={[0, 1.51, 0.8]}>\n      <boxGeometry args={[1.7, 0.25, 3.5]} />\n      <meshStandardMaterial color=\"#6B8E23\" />\n    </mesh>\n\n    {/* Side armor panels - raised slightly */}\n    <mesh position={[-1.0, 0.8, -2]}>\n      <boxGeometry args={[0.15, 1.2, 1.8]} />\n      <meshStandardMaterial color=\"#4d5d28\" />\n    </mesh>\n    <mesh position={[1.0, 0.8, -2]}>\n      <boxGeometry args={[0.15, 1.2, 1.8]} />\n      <meshStandardMaterial color=\"#4d5d28\" />\n    </mesh>\n    <mesh position={[-1.0, 0.8, 0.8]}>\n      <boxGeometry args={[0.15, 1.2, 3.6]} />\n      <meshStandardMaterial color=\"#4d5d28\" />\n    </mesh>\n    <mesh position={[1.0, 0.8, 0.8]}>\n      <boxGeometry args={[0.15, 1.2, 3.6]} />\n      <meshStandardMaterial color=\"#4d5d28\" />\n    </mesh>\n\n    {/* Smaller wheels - keeping the same height */}\n    {[\n      { pos: [-0.9, 0.4, -2] },\n      { pos: [0.9, 0.4, -2] },\n      { pos: [-0.9, 0.4, 0] },\n      { pos: [0.9, 0.4, 0] },\n      { pos: [-0.9, 0.4, 1.6] },\n      { pos: [0.9, 0.4, 1.6] },\n    ].map((wheel, i) => (\n      <mesh key={i} position={wheel.pos} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.35, 0.35, 0.25, 8]} />\n        <meshStandardMaterial color=\"#222\" />\n      </mesh>\n    ))}\n  </group>\n);\n\n/* Military Truck 2 – A simplified rugged design with less detail */\nexport const MilitaryTruck2 = (props) => (\n  <group {...props}>\n    {/* Cab section - raised slightly */}\n    <mesh position={[0, 0.7, -2.2]}>\n      <boxGeometry args={[1.8, 1.2, 1.9]} />\n      <meshStandardMaterial color=\"#4B5320\" /> {/* Olive drab */}\n    </mesh>\n    {/* Main cargo/troop section - raised slightly */}\n    <mesh position={[0, 0.7, 0.9]}>\n      <boxGeometry args={[1.8, 1.2, 3.8]} />\n      <meshStandardMaterial color=\"#4B5320\" /> {/* Olive drab */}\n    </mesh>\n\n    {/* Armor plating overlay - raised slightly */}\n    <mesh position={[0, 1.4, -2.2]}>\n      <boxGeometry args={[1.9, 0.3, 2]} />\n      <meshStandardMaterial color=\"#5E6142\" /> {/* Darker olive */}\n    </mesh>\n    <mesh position={[0, 1.4, 0.9]}>\n      <boxGeometry args={[1.9, 0.3, 3.9]} />\n      <meshStandardMaterial color=\"#5E6142\" /> {/* Darker olive */}\n    </mesh>\n    {/* Reinforced bumper - raised slightly */}\n    <mesh position={[0, 0.5, -3.2]}>\n      <boxGeometry args={[1.9, 0.6, 0.2]} />\n      <meshStandardMaterial color=\"#3A3A3A\" /> {/* Dark gunmetal */}\n    </mesh>\n    {/* Simplified side-mounted equipment - raised slightly */}\n    <mesh position={[-1.0, 0.8, -2.2]}>\n      <boxGeometry args={[0.2, 0.4, 1.8]} />\n      <meshStandardMaterial color=\"#3D3D29\" /> {/* Dark khaki */}\n    </mesh>\n    <mesh position={[1.0, 0.8, -2.2]}>\n      <boxGeometry args={[0.2, 0.4, 1.8]} />\n      <meshStandardMaterial color=\"#3D3D29\" /> {/* Dark khaki */}\n    </mesh>\n    <mesh position={[-1.0, 0.8, 0.9]}>\n      <boxGeometry args={[0.2, 0.4, 3.6]} />\n      <meshStandardMaterial color=\"#3D3D29\" /> {/* Dark khaki */}\n    </mesh>\n    <mesh position={[1.0, 0.8, 0.9]}>\n      <boxGeometry args={[0.2, 0.4, 3.6]} />\n      <meshStandardMaterial color=\"#3D3D29\" /> {/* Dark khaki */}\n    </mesh>\n\n    {/* Front wheels - smaller - keeping the same height */}\n    {[\n      { pos: [-0.9, 0.4, -2.2] },\n      { pos: [0.9, 0.4, -2.2] }\n    ].map((wheel, i) => (\n      <mesh key={i} position={wheel.pos} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.36, 0.36, 0.25, 8]} />\n        <meshStandardMaterial color=\"#222\" />\n      </mesh>\n    ))}\n    {/* Rear wheels - dual wheel setup - smaller - keeping the same height */}\n    {[\n      { pos: [-0.9, 0.4, 0.6] },\n      { pos: [0.9, 0.4, 0.6] },\n      { pos: [-0.9, 0.4, 2] },\n      { pos: [0.9, 0.4, 2] }\n    ].map((wheel, i) => (\n      <mesh key={i + 2} position={wheel.pos} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.36, 0.36, 0.25, 8]} />\n        <meshStandardMaterial color=\"#222\" />\n      </mesh>\n    ))}\n  </group>\n);\n\n/* Military Truck 3 – A tactical truck with a reinforced top and additional equipment mounts */\nexport const MilitaryTruck3 = (props) => (\n  <group {...props}>\n    {/* Cab section - raised slightly */}\n    <mesh position={[0, 0.75, -2]}>\n      <boxGeometry args={[1.8, 1.1, 1.8]} />\n      <meshStandardMaterial color=\"#5D5D3C\" /> {/* Military tan/olive */}\n    </mesh>\n    {/* Cargo/troop section - raised slightly */}\n    <mesh position={[0, 0.75, 0.8]}>\n      <boxGeometry args={[1.8, 1.1, 3.6]} />\n      <meshStandardMaterial color=\"#5D5D3C\" /> {/* Military tan/olive */}\n    </mesh>\n    {/* Reinforced roof - raised slightly */}\n    <mesh position={[0, 1.45, -2]}>\n      <boxGeometry args={[1.9, 0.3, 1.9]} />\n      <meshStandardMaterial color=\"#6E7B58\" /> {/* Lighter olive */}\n    </mesh>\n    <mesh position={[0, 1.45, 0.8]}>\n      <boxGeometry args={[1.9, 0.3, 3.7]} />\n      <meshStandardMaterial color=\"#6E7B58\" /> {/* Lighter olive */}\n    </mesh>\n\n\n    {/* Side storage boxes - raised slightly */}\n    <mesh position={[-1.0, 0.7, -2]}>\n      <boxGeometry args={[0.2, 0.5, 1.6]} />\n      <meshStandardMaterial color=\"#515141\" /> {/* Dark olive drab */}\n    </mesh>\n    <mesh position={[1.0, 0.7, -2]}>\n      <boxGeometry args={[0.2, 0.5, 1.6]} />\n      <meshStandardMaterial color=\"#515141\" /> {/* Dark olive drab */}\n    </mesh>\n    <mesh position={[-1.0, 0.7, 0]}>\n      <boxGeometry args={[0.2, 0.5, 1.8]} />\n      <meshStandardMaterial color=\"#515141\" /> {/* Dark olive drab */}\n    </mesh>\n    <mesh position={[1.0, 0.7, 0]}>\n      <boxGeometry args={[0.2, 0.5, 1.8]} />\n      <meshStandardMaterial color=\"#515141\" /> {/* Dark olive drab */}\n    </mesh>\n    <mesh position={[-1.0, 0.7, 1.8]}>\n      <boxGeometry args={[0.2, 0.5, 1.8]} />\n      <meshStandardMaterial color=\"#515141\" /> {/* Dark olive drab */}\n    </mesh>\n    <mesh position={[1.0, 0.7, 1.8]}>\n      <boxGeometry args={[0.2, 0.5, 1.8]} />\n      <meshStandardMaterial color=\"#515141\" /> {/* Dark olive drab */}\n    </mesh>\n    {/* Front wheels - smaller - keeping the same height */}\n    {[\n      { pos: [-0.9, 0.4, -2] },\n      { pos: [0.9, 0.4, -2] }\n    ].map((wheel, i) => (\n      <mesh key={i} position={wheel.pos} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.33, 0.33, 0.25, 8]} />\n        <meshStandardMaterial color=\"#222\" />\n      </mesh>\n    ))}\n    {/* Middle and rear wheels - smaller - keeping the same height */}\n    {[\n      { pos: [-0.9, 0.4, 0] },\n      { pos: [0.9, 0.4, 0] },\n      { pos: [-0.9, 0.4, 1.8] },\n      { pos: [0.9, 0.4, 1.8] }\n    ].map((wheel, i) => (\n      <mesh key={i + 2} position={wheel.pos} rotation={[0, 0, Math.PI / 2]}>\n        <cylinderGeometry args={[0.33, 0.33, 0.25, 8]} />\n        <meshStandardMaterial color=\"#222\" />\n      </mesh>\n    ))}\n  </group>\n);\n\nexport const civilianTrucks = { CivilianTruck1, CivilianTruck2, CivilianTruck3 };\nexport const militaryTrucks = { MilitaryTruck1, MilitaryTruck2, MilitaryTruck3 };\n\nexport default { ...civilianTrucks, ...militaryTrucks }; ","import React from 'react';\n\n/* Car Vehicles */\nexport const CarA = (props) => (\n  <group {...props}>\n    {/* Car body with subtle curves */}\n    <mesh position={[0, 0.41, 0]}>\n      <boxGeometry args={[1.8, 0.81, 3.6]} />\n      <meshStandardMaterial color=\"#0000CD\" />\n    </mesh>\n    {/* Detailed front grille */}\n    <mesh position={[0, 0.54, -1.71]}>\n      <boxGeometry args={[1.62, 0.18, 0.09]} />\n      <meshStandardMaterial color=\"#333\" />\n    </mesh>\n    {/* Headlights - boxGeometry style */}\n    {[-0.72, 0.72].map((x, i) => (\n      <mesh key={`hl-${i}`} position={[x, 0.61, -1.8]}>\n        <boxGeometry args={[0.35, 0.18, 0.08]} />\n        <meshStandardMaterial color=\"#FFFACD\" emissive=\"#FFFF66\" />\n      </mesh>\n    ))}\n    {/* Wheels */}\n    {[-0.95, 0.95].map((x, i) =>\n      [-1.35, 1.35].map((z, j) => (\n        <mesh key={`${i}-${j}`} position={[x, 0.22, z]} rotation={[0, 0, Math.PI / 2]}>\n          <cylinderGeometry args={[0.25, 0.25, 0.14, 24]} />\n          <meshStandardMaterial color=\"#222\" />\n        </mesh>\n      ))\n    )}\n  </group>\n);\n\nexport const CarB = (props) => (\n  <group {...props}>\n    {/* Hatchback body with a sloping roof */}\n    <mesh position={[0, 0.45, 0]}>\n      <boxGeometry args={[1.98, 0.9, 3.78]} />\n      <meshStandardMaterial color=\"#1E90FF\" />\n    </mesh>\n    {/* Small front grille */}\n    <mesh position={[0, 0.39, -1.89]}>\n      <boxGeometry args={[1.3, 0.15, 0.08]} />\n      <meshStandardMaterial color=\"#333\" />\n    </mesh>\n    {/* Side accent stripe */}\n    <mesh position={[0, 0.81, 0]}>\n      <boxGeometry args={[1.8, 0.09, 0.09]} />\n      <meshStandardMaterial color=\"#FF4500\" />\n    </mesh>\n    {/* Detailed wheel setup */}\n    {[-1.05, 1.05].map((x, i) =>\n      [-1.4, 1.4].map((z, j) => (\n        <mesh key={`${i}-${j}`} position={[x, 0.25, z]} rotation={[0, 0, Math.PI / 2]}>\n          <cylinderGeometry args={[0.27, 0.27, 0.15, 24]} />\n          <meshStandardMaterial color=\"#222\" />\n        </mesh>\n      ))\n    )}\n    {/* Headlights - boxGeometry style */}\n    {[-0.72, 0.72].map((x, i) => (\n      <mesh key={`hlb-${i}`} position={[x, 0.66, -1.89]}>\n        <boxGeometry args={[0.35, 0.18, 0.08]} />\n        <meshStandardMaterial color=\"#FFFACD\" emissive=\"#FFFF66\" />\n      </mesh>\n    ))}\n  </group>\n);\n\nexport const CarC = (props) => (\n  <group {...props}>\n    {/* Car body with a tapered design */}\n    <mesh position={[0, 0.41, 0]}>\n      <boxGeometry args={[1.62, 0.72, 3.42]} />\n      <meshStandardMaterial color=\"#FFD700\" />\n    </mesh>\n    {/* Front splitter */}\n    <mesh position={[0, 0.36, -1.76]}>\n      <boxGeometry args={[1.44, 0.09, 0.27]} />\n      <meshStandardMaterial color=\"#333\" />\n    </mesh>\n    {/* Rear spoiler */}\n    <mesh position={[0, 0.72, 1.71]} rotation={[-0.2, 0, 0]}>\n      <boxGeometry args={[0.9, 0.09, 0.36]} />\n      <meshStandardMaterial color=\"#333\" />\n    </mesh>\n    {/* Wheels */}\n    {[-0.9, 0.9].map((x, i) =>\n      [-1.3, 1.3].map((z, j) => (\n        <mesh key={`${i}-${j}`} position={[x, 0.22, z]} rotation={[0, 0, Math.PI / 2]}>\n          <cylinderGeometry args={[0.25, 0.25, 0.14, 24]} />\n          <meshStandardMaterial color=\"#222\" />\n        </mesh>\n      ))\n    )}\n    {/* Headlights - boxGeometry style */}\n    {[-0.62, 0.62].map((x, i) => (\n      <mesh key={`hlc-${i}`} position={[x, 0.61, -1.8]}>\n        <boxGeometry args={[0.35, 0.18, 0.08]} />\n        <meshStandardMaterial color=\"#FFFACD\" emissive=\"#FFFF66\" />\n      </mesh>\n    ))}\n  </group>\n);\n\nexport const CarD = (props) => (\n  <group {...props}>\n    {/* SUV-style body with taller profile, adjusted to match other cars but with 20% more height */}\n    <mesh position={[0, 0.45, 0]}>\n      <boxGeometry args={[1.8, 0.97, 3.6]} />\n      <meshStandardMaterial color=\"#1A4731\" />\n    </mesh>\n    {/* Roof rails */}\n    {[-0.75, 0.75].map((x, i) => (\n      <mesh key={`rail-${i}`} position={[x, 0.94, 0]}>\n        <boxGeometry args={[0.09, 0.09, 3.0]} />\n        <meshStandardMaterial color=\"#444\" />\n      </mesh>\n    ))}\n    {/* Rugged wheel setup */}\n    {[-0.98, 0.98].map((x, i) =>\n      [-1.35, 1.35].map((z, j) => (\n        <mesh key={`${i}-${j}`} position={[x, 0.28, z]} rotation={[0, 0, Math.PI / 2]}>\n          <cylinderGeometry args={[0.28, 0.28, 0.16, 24]} />\n          <meshStandardMaterial color=\"#111\" />\n        </mesh>\n      ))\n    )}\n    {/* Headlights - smaller and similar to other cars */}\n    {[-0.72, 0.72].map((x, i) => (\n      <mesh key={`hld-${i}`} position={[x, 0.61, -1.8]}>\n        <boxGeometry args={[0.35, 0.18, 0.08]} />\n        <meshStandardMaterial color=\"#FFFACD\" emissive=\"#FFFF66\" />\n      </mesh>\n    ))}\n  </group>\n);\n\nexport const CarE = (props) => (\n  <group {...props}>\n    {/* Sports coupe with low profile - even lower */}\n    <mesh position={[0, 0.29, 0]}>\n      <boxGeometry args={[1.89, 0.51, 3.78]} />\n      <meshStandardMaterial color=\"#8B0000\" />\n    </mesh>\n    {/* Sloped windshield */}\n    <mesh position={[0, 0.51, -0.72]} rotation={[0.4, 0, 0]}>\n      <boxGeometry args={[1.8, 0.59, 0.09]} />\n      <meshStandardMaterial color=\"#87CEEB\" transparent opacity={0.7} />\n    </mesh>\n    {/* Hood air intake */}\n    <mesh position={[0, 0.36, -1.35]}>\n      <boxGeometry args={[0.72, 0.07, 0.72]} />\n      <meshStandardMaterial color=\"#111\" />\n    </mesh>\n    {/* Performance wheels - adjusted to be more visible but smaller */}\n    {[-0.98, 0.98].map((x, i) =>\n      [-1.4, 1.4].map((z, j) => (\n        <mesh key={`${i}-${j}`} position={[x, 0.21, z]} rotation={[0, 0, Math.PI / 2]}>\n          <cylinderGeometry args={[0.22, 0.22, 0.12, 24]} />\n          <meshStandardMaterial color=\"#222\" />\n        </mesh>\n      ))\n    )}\n    {/* Headlights - boxGeometry style, adjusted to prevent Z-fighting */}\n    {[-0.72, 0.72].map((x, i) => (\n      <mesh key={`hle-${i}`} position={[x, 0.41, -1.88]}>\n        <boxGeometry args={[0.35, 0.16, 0.05]} />\n        <meshStandardMaterial color=\"#FFFACD\" emissive=\"#FFFF66\" />\n      </mesh>\n    ))}\n    {/* Dual exhausts */}\n    {[-0.36, 0.36].map((x, i) => (\n      <mesh key={`exh-${i}`} position={[x, 0.22, 1.89]}>\n        <cylinderGeometry args={[0.09, 0.09, 0.27, 12]} rotation={[Math.PI / 2, 0, 0]} />\n        <meshStandardMaterial color=\"#444\" />\n      </mesh>\n    ))}\n  </group>\n);\n\nexport default { CarA, CarB, CarC, CarD, CarE }; ","// Vehicle components index file\nimport TankVehicles, { TankA, TankB } from './TankVehicles';\nimport IFVVehicles, { IFV_A, IFV_B } from './IFVVehicles';\nimport TruckVehicles, {\n    CivilianTruck1, CivilianTruck2, CivilianTruck3,\n    MilitaryTruck1, MilitaryTruck2, MilitaryTruck3,\n    civilianTrucks, militaryTrucks\n} from './TruckVehicles';\nimport CarVehicles, { CarA, CarB, CarC, CarD, CarE } from './CarVehicles';\n\n// Grouped exports\nexport const Tanks = TankVehicles;\nexport const IFVs = IFVVehicles;\nexport const Trucks = TruckVehicles;\nexport const Cars = CarVehicles;\n\n// Individual exports\nexport {\n    // Tanks\n    TankA, TankB,\n\n    // IFVs\n    IFV_A, IFV_B,\n\n    // Trucks - Civilian\n    CivilianTruck1, CivilianTruck2, CivilianTruck3,\n    civilianTrucks,\n\n    // Trucks - Military\n    MilitaryTruck1, MilitaryTruck2, MilitaryTruck3,\n    militaryTrucks,\n\n    // Cars\n    CarA, CarB, CarC, CarD, CarE\n};\n\n// Vehicle type mapping for dynamic usage\nexport const VehicleTypes = {\n    // Tanks\n    tank_a: TankA,\n    tank_b: TankB,\n\n    // IFVs\n    ifv_a: IFV_A,\n    ifv_b: IFV_B,\n\n    // Civilian Trucks\n    civilian_truck_1: CivilianTruck1,\n    civilian_truck_2: CivilianTruck2,\n    civilian_truck_3: CivilianTruck3,\n\n    // Military Trucks\n    military_truck_1: MilitaryTruck1,\n    military_truck_2: MilitaryTruck2,\n    military_truck_3: MilitaryTruck3,\n\n    // Cars\n    car_a: CarA,\n    car_b: CarB,\n    car_c: CarC,\n    car_d: CarD,\n    car_e: CarE\n};\n\nexport default {\n    Tanks,\n    IFVs,\n    Trucks,\n    Cars,\n    VehicleTypes\n}; ","import React, { useEffect, cloneElement, Children } from 'react';\nimport { useVehicleHealthStore } from '../../utils/VehicleHealthSystem';\nimport VehicleDamageEffects from '../effects/VehicleDamageEffects';\n\n/**\n * Higher-order component that adds health system to vehicles\n * @param {React.ComponentType} VehicleComponent - The original vehicle component\n * @param {string} vehicleType - The type of vehicle from VehicleTypes\n * @returns {React.ComponentType} - Enhanced vehicle component with health system\n */\nexport const withVehicleHealth = (VehicleComponent, vehicleType) => {\n    return React.forwardRef((props, ref) => {\n        const { id, ...otherProps } = props;\n\n        // Get vehicle health management functions from the store\n        const {\n            initVehicle,\n            getVehicleHealth\n        } = useVehicleHealthStore();\n\n        // Generate a stable ID if not provided\n        const vehicleId = id || `vehicle-${vehicleType}-${Math.floor(Math.random() * 10000)}`;\n\n        // Initialize vehicle health on mount\n        useEffect(() => {\n            initVehicle(vehicleId, vehicleType);\n\n            // Cleanup on unmount - could add removeVehicle here if needed\n            // return () => removeVehicle(vehicleId);\n        }, [vehicleId, vehicleType]);\n\n        // Get current health state for this vehicle\n        const vehicleHealth = getVehicleHealth(vehicleId);\n\n        // If no health data yet, render original component\n        if (!vehicleHealth) {\n            return <VehicleComponent {...otherProps} ref={ref} />;\n        }\n\n        // If vehicle is destroyed, don't render anything\n        if (vehicleHealth.isDestroyed) {\n            return null;\n        }\n\n        // If vehicle is dead, adjust its appearance (lower to ground, etc.)\n        const adjustedProps = { ...otherProps };\n\n        if (vehicleHealth.isDead) {\n            // Adjust position to make it appear destroyed (slightly into the ground)\n            if (adjustedProps.position) {\n                const [x, y, z] = adjustedProps.position;\n                adjustedProps.position = [x, y - 0.15, z];\n            }\n\n            // Could also adjust rotation to make it appear tilted when destroyed\n            if (adjustedProps.rotation) {\n                const [x, y, z] = adjustedProps.rotation;\n                adjustedProps.rotation = [\n                    x + (Math.random() * 0.2 - 0.1),\n                    y,\n                    z + (Math.random() * 0.2 - 0.1)\n                ];\n            }\n        }\n\n        // Tag vehicle parts for hit detection\n        const processVehicleChildren = (children) => {\n            return Children.map(children, child => {\n                if (!child) return child;\n\n                // For parts specifically named (like turret, wheels, etc.)\n                // Add specific userData to identify them as vehicle parts\n                let partType = null;\n\n                // Detect part type based on name (if available)\n                if (child.props && child.props.name) {\n                    const name = child.props.name.toLowerCase();\n                    if (name.includes('turret')) {\n                        partType = 'turret';\n                    } else if (name.includes('track') || name.includes('tracks')) {\n                        partType = 'tracks';\n                    } else if (name.includes('wheel') || name.includes('wheels')) {\n                        partType = 'wheels';\n                    } else if (name.includes('cabin')) {\n                        partType = 'cabin';\n                    } else if (name.includes('engine')) {\n                        partType = 'engine';\n                    } else if (name.includes('cargo')) {\n                        partType = 'cargo';\n                    } else if (name.includes('rear')) {\n                        partType = 'rear';\n                    } else if (name.includes('front')) {\n                        partType = 'front';\n                    } else {\n                        partType = 'body';\n                    }\n                }\n\n                // Create new userData for this part\n                const newUserData = {\n                    ...(child.props.userData || {}),\n                    isVehiclePart: true,\n                    partType: partType,\n                    parentVehicleId: vehicleId,\n                    parentVehicleType: vehicleType\n                };\n\n                // Process any children of this part recursively\n                let newChildren = child.props.children;\n                if (newChildren) {\n                    newChildren = processVehicleChildren(newChildren);\n                }\n\n                // Clone the child with new props\n                return cloneElement(child, {\n                    ...child.props,\n                    userData: newUserData,\n                    children: newChildren\n                });\n            });\n        };\n\n        // Return original vehicle with damage effects on top\n        return (\n            <group ref={ref}>\n                <VehicleComponent\n                    {...adjustedProps}\n                    userData={{\n                        vehicleId,\n                        vehicleType,\n                        health: vehicleHealth.currentHealth,\n                        maxHealth: vehicleHealth.maxHealth,\n                        isDead: vehicleHealth.isDead,\n                        isDestroyed: vehicleHealth.isDestroyed,\n                        mobilityFactor: vehicleHealth.mobilityFactor,\n                        // Vehicle is immobile at 50% health or below\n                        canMove: vehicleHealth.healthPercentage > 0.5\n                    }}\n                />\n            </group>\n        );\n    });\n};\n\nexport default withVehicleHealth; ","import { withVehicleHealth } from './withVehicleHealth';\nimport {\n    TankA, TankB,\n    IFV_A, IFV_B,\n    CivilianTruck1, CivilianTruck2, CivilianTruck3,\n    MilitaryTruck1, MilitaryTruck2, MilitaryTruck3,\n    CarA, CarB, CarC, CarD, CarE\n} from './index';\n\n// Enhance individual vehicles with health system\nexport const EnhancedTankA = withVehicleHealth(TankA, 'tank_a');\nexport const EnhancedTankB = withVehicleHealth(TankB, 'tank_b');\n\nexport const EnhancedIFV_A = withVehicleHealth(IFV_A, 'ifv_a');\nexport const EnhancedIFV_B = withVehicleHealth(IFV_B, 'ifv_b');\n\nexport const EnhancedCivilianTruck1 = withVehicleHealth(CivilianTruck1, 'civilian_truck_1');\nexport const EnhancedCivilianTruck2 = withVehicleHealth(CivilianTruck2, 'civilian_truck_2');\nexport const EnhancedCivilianTruck3 = withVehicleHealth(CivilianTruck3, 'civilian_truck_3');\n\nexport const EnhancedMilitaryTruck1 = withVehicleHealth(MilitaryTruck1, 'military_truck_1');\nexport const EnhancedMilitaryTruck2 = withVehicleHealth(MilitaryTruck2, 'military_truck_2');\nexport const EnhancedMilitaryTruck3 = withVehicleHealth(MilitaryTruck3, 'military_truck_3');\n\nexport const EnhancedCarA = withVehicleHealth(CarA, 'car_a');\nexport const EnhancedCarB = withVehicleHealth(CarB, 'car_b');\nexport const EnhancedCarC = withVehicleHealth(CarC, 'car_c');\nexport const EnhancedCarD = withVehicleHealth(CarD, 'car_d');\nexport const EnhancedCarE = withVehicleHealth(CarE, 'car_e');\n\n// Group vehicles by category\nexport const EnhancedTanks = {\n    TankA: EnhancedTankA,\n    TankB: EnhancedTankB\n};\n\nexport const EnhancedIFVs = {\n    IFV_A: EnhancedIFV_A,\n    IFV_B: EnhancedIFV_B\n};\n\nexport const EnhancedCivilianTrucks = [\n    EnhancedCivilianTruck1,\n    EnhancedCivilianTruck2,\n    EnhancedCivilianTruck3\n];\n\nexport const EnhancedMilitaryTrucks = [\n    EnhancedMilitaryTruck1,\n    EnhancedMilitaryTruck2,\n    EnhancedMilitaryTruck3\n];\n\nexport const EnhancedCars = {\n    CarA: EnhancedCarA,\n    CarB: EnhancedCarB,\n    CarC: EnhancedCarC,\n    CarD: EnhancedCarD,\n    CarE: EnhancedCarE\n};\n\n// Vehicle type mapping for dynamic usage with health-enhanced versions\nexport const EnhancedVehicleTypes = {\n    // Tanks\n    tank_a: EnhancedTankA,\n    tank_b: EnhancedTankB,\n\n    // IFVs\n    ifv_a: EnhancedIFV_A,\n    ifv_b: EnhancedIFV_B,\n\n    // Civilian Trucks\n    civilian_truck_1: EnhancedCivilianTruck1,\n    civilian_truck_2: EnhancedCivilianTruck2,\n    civilian_truck_3: EnhancedCivilianTruck3,\n\n    // Military Trucks\n    military_truck_1: EnhancedMilitaryTruck1,\n    military_truck_2: EnhancedMilitaryTruck2,\n    military_truck_3: EnhancedMilitaryTruck3,\n\n    // Cars\n    car_a: EnhancedCarA,\n    car_b: EnhancedCarB,\n    car_c: EnhancedCarC,\n    car_d: EnhancedCarD,\n    car_e: EnhancedCarE\n};\n\nexport default EnhancedVehicleTypes; ","import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { VehicleTypes } from './vehicles';\nimport { EnhancedVehicleTypes } from './vehicles/enhancedVehicles';\nimport { ROAD_WIDTH, ROAD_SPACING, TOTAL_ROAD_WIDTH, ROAD_EXTENSION } from './Road';\nimport { ORIGINAL_TERRAIN_SIZE, HALF_WIDTH_TERRAIN_SIZE } from './Terrain';\nimport { useVehicleHealthStore } from '../utils/VehicleHealthSystem';\nimport { useMapStore } from '../utils/MapStore';\n\n// Vehicle movement speed in units per second\nconst SPEED_MIN = 0.216;  // Increased by 20% from 0.18\nconst SPEED_MAX = 0.3;    // Increased by 20% from 0.25\n\n// Special speeds for cars and civilian trucks (44% faster - increased by 15% from previous 25%)\nconst CAR_CIVILIAN_SPEED_MIN = SPEED_MIN * 1.44;  // 44% faster than standard (25% + 15% more)\nconst CAR_CIVILIAN_SPEED_MAX = SPEED_MAX * 1.44;  // 44% faster than standard (25% + 15% more)\n\n// Number of vehicles to spawn per road\nconst VEHICLES_PER_ROAD = 8; // Reduced from 11 to further reduce congestion\n\n// Congestion detection settings\nconst CONGESTION_THRESHOLD = 3; // Number of stopped vehicles in proximity required to detect congestion\nconst CONGESTION_PROXIMITY = 30; // How close vehicles need to be to count as congested\nconst CONGESTION_SPEED_THRESHOLD = 0.05; // Vehicles moving below this speed are considered stopped\nconst REDUCED_SPAWN_FACTOR = 0.5; // Spawn only 50% of vehicles in congested areas\n\n// Lane widths - now with 4 lanes per road\nconst LANE_WIDTH = ROAD_WIDTH / 4; // Each road has 4 lanes now\n\n// Define lane types\nconst LANE_TYPES = {\n    FAST: 'fast',    // Left lane (for military columns)\n    SLOW: 'slow'     // Right lane (for civilian vehicles)\n};\n\n// Vehicle dimensions (approximate average)\nconst VEHICLE_LENGTH = 16; // Updated for 4x scale (was 12 for 3x scale)\nconst MINIMUM_DISTANCE = 60; // Updated to match civilian distance\nconst CIVILIAN_MINIMUM_DISTANCE = 60; // Increased spacing for civilian vehicles (60 meters)\nconst COLUMN_VEHICLE_SPACING = 40; // Increased by 10% from 30 meters distance between vehicles in a column\nconst TANK_SPACING = 55; // 20% more distance for tanks (new constant)\nconst IFV_SPACING = 45; // 20% more distance for IFVs (new constant)\nconst SAFE_DISTANCE = Math.max(VEHICLE_LENGTH * 1.8, MINIMUM_DISTANCE); // Updated to match civilian safe distance\nconst CIVILIAN_SAFE_DISTANCE = Math.max(VEHICLE_LENGTH * 1.8, CIVILIAN_MINIMUM_DISTANCE); // Increased safe distance for civilian vehicles\n\n// Collision avoidance - now same for both military and civilian\nconst DETECTION_DISTANCE = SAFE_DISTANCE * 1; // Distance to start slowing down\nconst EMERGENCY_DISTANCE = 45; // Fixed 45 meter emergency distance as requested\nconst CIVILIAN_DETECTION_DISTANCE = CIVILIAN_SAFE_DISTANCE * 1; // Increased detection distance for civilian vehicles\nconst CIVILIAN_EMERGENCY_DISTANCE = 45; // Fixed 45 meter emergency distance for civilian vehicles\n\n// Traffic jam recovery settings\nconst TRAFFIC_JAM_SPEED_THRESHOLD = 0.05; // Speed below this is considered \"stopped\"\nconst TRAFFIC_JAM_RECOVERY_BOOST = 1.1; // Reduced from 1.2 to prevent excessive acceleration\nconst TRAFFIC_JAM_CHECK_INTERVAL = 500; // Check every 0.5 seconds\n\n// Delay after vehicle destruction before column resumes movement\nconst DESTROYED_VEHICLE_WAIT_PERIOD = 2000; // 2 seconds\n\n// Military column definitions\nconst MILITARY_COLUMNS = [\n    // Combo 1: 3 tanks, 2 IFVs, 1 military truck\n    {\n        id: 'combo1',\n        vehicles: [\n            { type: 'military_truck', count: 1 },\n            { type: 'ifv', count: 2 },\n            { type: 'tank', count: 3 },\n        ]\n    },\n    // Combo 2: 1 tank, 3 IFVs, 2 military trucks\n    {\n        id: 'combo2',\n        vehicles: [\n            { type: 'military_truck', count: 2 },\n            { type: 'ifv', count: 3 },\n            { type: 'tank', count: 1 }\n        ]\n    },\n    // Combo 3: 2 tanks, 2 IFVs, 2 military trucks\n    {\n        id: 'combo3',\n        vehicles: [\n            { type: 'military_truck', count: 2 },\n            { type: 'ifv', count: 2 },\n            { type: 'tank', count: 2 }\n        ]\n    },\n    // Combo 4: 1 tank, 4 IFVs, 1 military truck\n    {\n        id: 'combo4',\n        vehicles: [\n            { type: 'military_truck', count: 1 },\n            { type: 'ifv', count: 4 },\n            { type: 'tank', count: 1 }\n        ]\n    }\n];\n\n// Define constants to track and manage column spawning\nconst MAX_COLUMNS_PER_LANE = 1; // Maximum number of active columns per lane\nconst COLUMN_RESPAWN_DELAY = 7000; // 7 seconds delay before respawning a new column (increased from 5000)\n\n// Create reusable Vector3 and Euler objects to prevent memory leaks\nconst tempVector3 = new THREE.Vector3();\nconst tempEuler = new THREE.Euler();\n\n// Object pooling to reuse vehicle objects\nclass VehiclePool {\n    constructor() {\n        this.pool = [];\n        this.inUse = new Set();\n    }\n\n    get() {\n        // Try to get a vehicle from the pool, or create a new one if pool is empty\n        let vehicle = this.pool.pop();\n        if (!vehicle) {\n            vehicle = {\n                position: new THREE.Vector3(),\n                hitbox: { width: 1.0, height: 1.0, depth: 3.0 }\n            };\n        }\n        this.inUse.add(vehicle);\n        return vehicle;\n    }\n\n    release(vehicle) {\n        if (this.inUse.has(vehicle)) {\n            this.inUse.delete(vehicle);\n            this.pool.push(vehicle);\n        }\n    }\n\n    releaseAll() {\n        this.inUse.forEach(vehicle => {\n            this.pool.push(vehicle);\n        });\n        this.inUse.clear();\n    }\n}\n\n// Function to get random item from array\nfunction getRandomItem(array) {\n    return array[Math.floor(Math.random() * array.length)];\n}\n\n// Function to get a random vehicle of the specified type\nfunction getRandomVehicleOfType(type) {\n    const vehicleKeys = Object.keys(VehicleTypes);\n    let matchingVehicles = [];\n\n    if (type === 'tank') {\n        matchingVehicles = vehicleKeys.filter(key => key.includes('tank_'));\n    } else if (type === 'ifv') {\n        matchingVehicles = vehicleKeys.filter(key => key.includes('ifv_'));\n    } else if (type === 'military_truck') {\n        matchingVehicles = vehicleKeys.filter(key => key.includes('military_truck_'));\n    } else if (type === 'car') {\n        matchingVehicles = vehicleKeys.filter(key => key.includes('car_'));\n    } else if (type === 'civilian_truck') {\n        matchingVehicles = vehicleKeys.filter(key => key.includes('civilian_truck_'));\n    }\n\n    return matchingVehicles.length > 0 ? getRandomItem(matchingVehicles) : null;\n}\n\n// Function to check if vehicle is a car or civilian truck\nfunction isCarOrCivilianTruck(vehicleType) {\n    return vehicleType.includes('car_') || vehicleType.includes('civilian_truck_');\n}\n\nexport default function VehiclesOnRoad() {\n    const [vehicles, setVehicles] = useState([]);\n    const initializedRef = useRef(false);\n    const columnSpawnTimersRef = useRef({});\n    const timeoutRefsRef = useRef([]); // New ref to track all timeout IDs for cleanup\n    const vehiclePoolRef = useRef(new VehiclePool()); // Object pool for reusing vehicle objects\n    const congestionMapRef = useRef(new Map()); // Track congested road sections\n\n    // Add a ref to store references to vehicle meshes for culling\n    const vehicleRefsMap = useRef(new Map());\n\n    // Access vehicle health store for mobility factor and health data\n    const vehicleHealthStore = useVehicleHealthStore();\n    const getVehicleHealth = vehicleHealthStore.getVehicleHealth;\n\n    // Cache for vehicle objects by ID to avoid expensive array searches\n    const vehiclesById = useRef(new Map());\n\n    // Pre-compute rotations to avoid creating new Euler objects\n    const rotationMap = useMemo(() => {\n        return {\n            right: new THREE.Euler(0, -Math.PI / 2, 0),\n            left: new THREE.Euler(0, Math.PI / 2, 0)\n        };\n    }, []);\n\n    // Get current map type from store\n    const { currentMapType } = useMapStore();\n\n    // Get the terrain size based on the current map type\n    const terrainSize = useMemo(() => {\n        if (currentMapType === 'half-width') {\n            return HALF_WIDTH_TERRAIN_SIZE;\n        }\n        return { width: ORIGINAL_TERRAIN_SIZE, height: ORIGINAL_TERRAIN_SIZE };\n    }, [currentMapType]);\n\n    // Function to detect congestion in a road section\n    const detectCongestion = (allVehicles) => {\n        const newCongestionMap = new Map();\n\n        // Group vehicles by road sections (divide the road into 100-unit sections)\n        const roadSections = new Map();\n\n        // Track columns that have been completely destroyed\n        const destroyedColumns = new Set();\n        const activeColumns = new Set();\n\n        // Identify active and destroyed columns\n        allVehicles.forEach(vehicle => {\n            if (vehicle.isInColumn && vehicle.columnId) {\n                const healthData = getVehicleHealth(vehicle.id);\n                if (healthData && healthData.isDead) {\n                    destroyedColumns.add(vehicle.columnId);\n                } else {\n                    activeColumns.add(vehicle.columnId);\n                }\n            }\n        });\n\n        // Remove columns from destroyedColumns that still have active vehicles\n        activeColumns.forEach(activeId => {\n            destroyedColumns.delete(activeId);\n        });\n\n        allVehicles.forEach(vehicle => {\n            // Skip destroyed vehicles \n            const healthData = getVehicleHealth(vehicle.id);\n            if (healthData && healthData.isDead) return;\n\n            // Determine road section (divide the road into segments)\n            const sectionKey = `${Math.floor(vehicle.position.x / 100)}-${vehicle.road}-${vehicle.direction}`;\n\n            if (!roadSections.has(sectionKey)) {\n                roadSections.set(sectionKey, []);\n            }\n            roadSections.get(sectionKey).push(vehicle);\n        });\n\n        // Check each road section for congestion\n        roadSections.forEach((sectionVehicles, sectionKey) => {\n            // Count stopped or very slow vehicles\n            let stoppedCount = 0;\n\n            // Check if this section contains a lane where a column was fully destroyed\n            const [_, road, direction] = sectionKey.split('-');\n            let sectionHasDestroyedColumn = false;\n\n            sectionVehicles.forEach(vehicle => {\n                if (vehicle.speed < CONGESTION_SPEED_THRESHOLD) {\n                    stoppedCount++;\n                }\n\n                // Check if any vehicle in this section was part of a now-destroyed column\n                if (vehicle.isInColumn && destroyedColumns.has(vehicle.columnId)) {\n                    sectionHasDestroyedColumn = true;\n                }\n            });\n\n            // If a column in this section was completely destroyed, \n            // don't mark as congested to allow traffic to recover\n            if (sectionHasDestroyedColumn) {\n                return;\n            }\n\n            // Check if enough vehicles are stopped/slow to qualify as congestion\n            if (stoppedCount >= CONGESTION_THRESHOLD) {\n                newCongestionMap.set(sectionKey, {\n                    stoppedCount,\n                    totalVehicles: sectionVehicles.length,\n                    lastDetectedTime: Date.now()\n                });\n            }\n        });\n\n        return newCongestionMap;\n    };\n\n    // Initialize vehicles\n    useEffect(() => {\n        if (initializedRef.current) return;\n        initializedRef.current = true;\n\n        const newVehicles = [];\n\n        // For each road (upper and lower)\n        [-ROAD_SPACING / 2, ROAD_SPACING / 2].forEach(roadZ => {\n            // Define all 4 lanes for this road\n            const lanes = [\n                // Left side lanes (vehicles move in negative X direction)\n                {\n                    z: roadZ - (ROAD_WIDTH * 3 / 8), // First lane center (outer left)\n                    direction: -1,\n                    type: LANE_TYPES.FAST\n                },\n                {\n                    z: roadZ - (ROAD_WIDTH * 1 / 8), // Second lane center (inner left)\n                    direction: -1,\n                    type: LANE_TYPES.SLOW\n                },\n                // Right side lanes (vehicles move in positive X direction)\n                {\n                    z: roadZ + (ROAD_WIDTH * 1 / 8), // Third lane center (inner right)\n                    direction: 1,\n                    type: LANE_TYPES.SLOW\n                },\n                {\n                    z: roadZ + (ROAD_WIDTH * 3 / 8), // Fourth lane center (outer right)\n                    direction: 1,\n                    type: LANE_TYPES.FAST\n                }\n            ];\n\n            // Group lanes by direction and type\n            const fastLanes = lanes.filter(lane => lane.type === LANE_TYPES.FAST);\n            const slowLanes = lanes.filter(lane => lane.type === LANE_TYPES.SLOW);\n\n            // Create military columns on fast lanes (one per direction)\n            fastLanes.forEach(lane => {\n                // Choose a random column configuration\n                const columnConfig = getRandomItem(MILITARY_COLUMNS);\n                const columnId = `column-${roadZ}-${lane.z}`;\n\n                // Generate a random position along the road for the column to spawn\n                // Use a range within the terrain size with some padding\n                const randomOffset = Math.random() * (terrainSize.width * 0.7) - (terrainSize.width * 0.35);\n\n                // Starting position for the column - random point on the road\n                const startingX = lane.direction > 0 ?\n                    -terrainSize.width / 2 + 100 + randomOffset : // For positive direction\n                    terrainSize.width / 2 - 100 + randomOffset;  // For negative direction\n\n                let currentX = startingX;\n                let vehicleIndex = 0;\n\n                // Create all vehicles for this column\n                for (const vehicleGroup of columnConfig.vehicles) {\n                    for (let i = 0; i < vehicleGroup.count; i++) {\n                        const vehicleType = getRandomVehicleOfType(vehicleGroup.type);\n                        if (!vehicleType) continue;\n\n                        const vehicleId = `${columnId}-${vehicleGroup.type}-${i}`;\n\n                        // Adjust speed based on vehicle type (cars and civilian trucks are 25% faster)\n                        const baseSpeedMin = isCarOrCivilianTruck(vehicleType) ? CAR_CIVILIAN_SPEED_MIN : SPEED_MIN;\n                        const baseSpeedMax = isCarOrCivilianTruck(vehicleType) ? CAR_CIVILIAN_SPEED_MAX : SPEED_MAX;\n\n                        newVehicles.push({\n                            id: vehicleId,\n                            type: vehicleType,\n                            columnId: columnId,\n                            columnPosition: vehicleIndex,\n                            position: new THREE.Vector3(\n                                currentX,\n                                0.3,\n                                lane.z + (Math.random() * 0.2 - 0.1)\n                            ),\n                            rotation: lane.direction > 0 ? rotationMap.right : rotationMap.left,\n                            speed: baseSpeedMin + Math.random() * (baseSpeedMax - baseSpeedMin),\n                            direction: lane.direction,\n                            lane: lane.z,\n                            road: roadZ,\n                            laneType: lane.type,\n                            isInColumn: true,\n                            hitbox: { width: 1.33, height: 1.33, depth: 4.0 }\n                        });\n\n                        // Move to next vehicle position - use specific spacing based on vehicle type\n                        if (vehicleGroup.type === 'tank') {\n                            currentX += lane.direction * TANK_SPACING;\n                        } else if (vehicleGroup.type === 'ifv') {\n                            currentX += lane.direction * IFV_SPACING;\n                        } else {\n                            currentX += lane.direction * COLUMN_VEHICLE_SPACING;\n                        }\n                        vehicleIndex++;\n                    }\n                }\n            });\n\n            // Populate slow lanes with civilian vehicles\n            slowLanes.forEach(lane => {\n                // Check for congestion in this lane's direction and road\n                const roadSection = `${Math.floor(-terrainSize.width / 2 / 100)}-${roadZ}-${lane.direction}`;\n                const isCongested = congestionMapRef.current.has(roadSection);\n\n                // Adjust vehicle count based on congestion\n                let vehiclesPerLane = VEHICLES_PER_ROAD / 2; // Default - split evenly between slow lanes\n\n                if (isCongested) {\n                    // Reduce vehicle count in congested areas\n                    vehiclesPerLane = Math.floor(vehiclesPerLane * REDUCED_SPAWN_FACTOR);\n                    console.log(`Congestion detected in section ${roadSection}, reducing spawns to ${vehiclesPerLane}`);\n                }\n\n                // Track vehicle positions to ensure proper spacing\n                const vehiclePositions = [];\n\n                for (let i = 0; i < vehiclesPerLane; i++) {\n                    // Randomly choose between car and civilian truck (adjusted ratio)\n                    const vehicleType = Math.random() < 0.7 ?\n                        getRandomVehicleOfType('car') :\n                        getRandomVehicleOfType('civilian_truck');\n\n                    if (!vehicleType) continue;\n\n                    // Calculate position with good spacing along the road\n                    const segmentLength = terrainSize.width / vehiclesPerLane;\n                    const minSegmentLength = CIVILIAN_MINIMUM_DISTANCE * 1.5;\n                    const effectiveSegmentLength = Math.max(segmentLength, minSegmentLength);\n\n                    // Create a base position for this vehicle with some randomness\n                    let segmentStart = -terrainSize.width / 2 + (i * effectiveSegmentLength);\n                    let xPos = segmentStart + Math.random() * (effectiveSegmentLength * 0.6);\n\n                    // Calculate Z position with slight random variation\n                    const zJitter = Math.random() * 0.5 - 0.25; // Small random Z variation for visual interest\n                    let zPos = lane.z + zJitter;\n\n                    // Check for conflicts with existing vehicles in the same lane\n                    let hasConflict = false;\n                    let conflictResolutionAttempts = 0;\n                    const MAX_CONFLICT_RESOLUTION_ATTEMPTS = 5;\n\n                    // Make sure this position is not too close to other spawned vehicles\n                    while (conflictResolutionAttempts < MAX_CONFLICT_RESOLUTION_ATTEMPTS) {\n                        hasConflict = false;\n\n                        // Check against all previously placed vehicles in this lane\n                        for (const pos of vehiclePositions) {\n                            const xDistance = Math.abs(pos.x - xPos);\n                            const zDistance = Math.abs(pos.z - zPos);\n\n                            // If too close to another vehicle, adjust position\n                            if (xDistance < CIVILIAN_MINIMUM_DISTANCE && zDistance < 2.0) {\n                                hasConflict = true;\n\n                                // Move this vehicle further along the road\n                                xPos += lane.direction > 0 ? CIVILIAN_MINIMUM_DISTANCE : -CIVILIAN_MINIMUM_DISTANCE;\n\n                                // Apply small Z variation to avoid being in the exact same line\n                                const newZJitter = Math.random() * 0.8 - 0.4;\n                                zPos = lane.z + newZJitter;\n                                break;\n                            }\n                        }\n\n                        if (!hasConflict) break;\n                        conflictResolutionAttempts++;\n                    }\n\n                    // If we still have conflicts after max attempts, skip this vehicle\n                    if (hasConflict) continue;\n\n                    // Track this position\n                    vehiclePositions.push({ x: xPos, z: zPos });\n\n                    const vehicleId = `vehicle-${roadZ}-${lane.z}-${i}`;\n\n                    // Adjust hitbox dimensions based on vehicle type\n                    let hitbox;\n                    if (vehicleType.includes('car_')) {\n                        hitbox = { width: 2.0, height: 1.0, depth: 4.0 }; // Car hitbox - increased width\n                    } else if (vehicleType === 'civilian_truck_1') {\n                        hitbox = { width: 2.4, height: 1.5, depth: 6.5 }; // Specific hitbox for CivilianTruck1 with trailer\n                    } else if (vehicleType.includes('civilian_truck_')) {\n                        hitbox = { width: 2.2, height: 1.5, depth: 5.0 }; // Updated hitbox for civilian trucks\n                    } else {\n                        hitbox = { width: 2.0, height: 1.2, depth: 4.5 }; // Default hitbox as fallback\n                    }\n\n                    newVehicles.push({\n                        id: vehicleId,\n                        type: vehicleType,\n                        position: new THREE.Vector3(xPos, 0.3, zPos),\n                        rotation: lane.direction > 0 ? rotationMap.right : rotationMap.left,\n                        speed: CAR_CIVILIAN_SPEED_MIN + Math.random() * (CAR_CIVILIAN_SPEED_MAX - CAR_CIVILIAN_SPEED_MIN),\n                        direction: lane.direction,\n                        lane: lane.z,\n                        road: roadZ,\n                        laneType: lane.type,\n                        isInColumn: false,\n                        hitbox: hitbox,\n                        jamCounter: 0  // Initialize jam counter\n                    });\n                }\n            });\n        });\n\n        // Update the cache for quick lookups\n        newVehicles.forEach(vehicle => {\n            vehiclesById.current.set(vehicle.id, vehicle);\n        });\n\n        setVehicles(newVehicles);\n\n        // Cleanup function for the component unmount\n        return () => {\n            // Release all vehicles back to the pool\n            vehiclePoolRef.current.releaseAll();\n\n            // Clear all tracked timeouts\n            timeoutRefsRef.current.forEach(timeoutId => {\n                clearTimeout(timeoutId);\n            });\n\n            // Clear all column spawn timers\n            Object.values(columnSpawnTimersRef.current).forEach(timerId => {\n                if (timerId) clearTimeout(timerId);\n            });\n        };\n    }, [rotationMap, congestionMapRef.current, terrainSize]); // Add terrainSize to dependencies\n\n    // Memory optimization: Limit the number of timeouts tracked\n    useEffect(() => {\n        // Periodically clean up completed timeouts from our tracking array\n        const intervalId = setInterval(() => {\n            // Remove nullish or completed timeouts from the array\n            if (timeoutRefsRef.current.length > 100) {\n                timeoutRefsRef.current = timeoutRefsRef.current.slice(-100);\n            }\n        }, 30000); // Every 30 seconds\n\n        // Periodically remove vehicles that have drifted too far from the road\n        const cleanupIntervalId = setInterval(() => {\n            setVehicles(prevVehicles => {\n                // Define the valid area boundary for cleanup (larger than rendering boundary)\n                const cleanup_buffer = 150; // larger buffer for cleanup\n                const minX = -terrainSize.width / 2 - cleanup_buffer;\n                const maxX = terrainSize.width / 2 + cleanup_buffer;\n\n                // Define valid Z-coordinate range (road width with buffer)\n                const roadHalfWidth = ROAD_WIDTH / 2;\n                const validZRanges = [\n                    // Upper road Z range\n                    { min: ROAD_SPACING / 2 - roadHalfWidth - 20, max: ROAD_SPACING / 2 + roadHalfWidth + 20 },\n                    // Lower road Z range\n                    { min: -ROAD_SPACING / 2 - roadHalfWidth - 20, max: -ROAD_SPACING / 2 + roadHalfWidth + 20 }\n                ];\n\n                // Filter out vehicles that are too far from the road\n                return prevVehicles.filter(vehicle => {\n                    // Skip removed vehicles or those in columns (handled separately)\n                    if (vehicle.isRemoved || vehicle.isInColumn) return true;\n\n                    // Check if vehicle is within X bounds\n                    const validX = vehicle.position.x >= minX && vehicle.position.x <= maxX;\n\n                    // Check if vehicle is within any valid Z range\n                    const validZ = validZRanges.some(range =>\n                        vehicle.position.z >= range.min && vehicle.position.z <= range.max\n                    );\n\n                    // Only keep vehicles within valid X and Z coordinates\n                    if (!(validX && validZ)) {\n                        console.log(`Removing vehicle ${vehicle.id} that drifted too far from the road`);\n                        // Remove the vehicle completely if it's civilian\n                        if (!vehicle.isInColumn) {\n                            return false;\n                        }\n                        // Only respawn military vehicles\n                        const timeoutId = setTimeout(() => {\n                            vehicleHealthStore.respawnVehicle(vehicle.id);\n                        }, 0);\n                        timeoutRefsRef.current.push(timeoutId);\n                        return false;\n                    }\n                    return true;\n                });\n            });\n        }, 10000); // Check every 10 seconds\n\n        return () => {\n            clearInterval(intervalId);\n            clearInterval(cleanupIntervalId);\n        };\n    }, [terrainSize]);\n\n    // Pre-compute reusable geometries and materials\n    const vehicleGeometries = useMemo(() => {\n        const geometries = {};\n        // Return pre-computed geometries to be reused\n        return geometries;\n    }, []);\n\n    // Memoize the vehicle detection lookup map for collision detection\n    const vehicleLookupMapRef = useRef(new Map());\n\n    // Update vehicle positions on each frame with memory optimization\n    useFrame((state, delta) => {\n        // Cache current time outside the loop to avoid multiple calls\n        const currentTime = Date.now();\n\n        setVehicles(vehicles => {\n            // Update congestion map every 3 seconds (not every frame to save performance)\n            if (currentTime % 3000 < 16) { // Run if we're within 16ms of a 3-second mark\n                congestionMapRef.current = detectCongestion(vehicles);\n            }\n\n            // Update the vehicle ID cache\n            vehiclesById.current.clear();\n            vehicles.forEach(vehicle => {\n                vehiclesById.current.set(vehicle.id, vehicle);\n            });\n\n            // Track the positions where destroyed vehicles were removed\n            const removedDestroyedPositions = new Map(); // Map<lane, {x, road, direction, removalTime}>\n\n            // First, check if any column is fully destroyed (all vehicles destroyed)\n            const activeColumns = new Set();\n            const columnsToRespawn = new Set();\n            const destroyedVehicles = new Map(); // Track destroyed vehicles by ID\n            const clearedDestroyedPositions = new Map(); // Track positions where a destroyed vehicle was removed and cleared\n            const newlyDestroyedColumns = new Map(); // Track columns with newly destroyed vehicles\n\n            // Optimize vehicle lookup for collision detection\n            const updateVehicleLookupMap = (vehiclesList) => {\n                vehicleLookupMapRef.current.clear();\n\n                vehiclesList.forEach(vehicle => {\n                    const key = `${Math.floor(vehicle.position.x / 10)}-${vehicle.lane}-${vehicle.direction}`;\n                    if (!vehicleLookupMapRef.current.has(key)) {\n                        vehicleLookupMapRef.current.set(key, []);\n                    }\n                    vehicleLookupMapRef.current.get(key).push(vehicle);\n                });\n            };\n\n            // More efficient collision detection that uses the map\n            const optimizedDetectCollisionAhead = (vehicle, allVehicles, checkDistance = SAFE_DISTANCE) => {\n                const sectorKey = `${Math.floor(vehicle.position.x / 10)}-${vehicle.lane}-${vehicle.direction}`;\n                const nextSectorKey = `${Math.floor((vehicle.position.x + (vehicle.direction * 10)) / 10)}-${vehicle.lane}-${vehicle.direction}`;\n\n                // Check more sectors ahead for better detection at high speeds\n                const farSectorKey = `${Math.floor((vehicle.position.x + (vehicle.direction * 20)) / 10)}-${vehicle.lane}-${vehicle.direction}`;\n                const veryFarSectorKey = `${Math.floor((vehicle.position.x + (vehicle.direction * 30)) / 10)}-${vehicle.lane}-${vehicle.direction}`;\n\n                // Get vehicles in current and next sectors\n                const sectorsToCheck = [\n                    vehicleLookupMapRef.current.get(sectorKey) || [],\n                    vehicleLookupMapRef.current.get(nextSectorKey) || [],\n                    vehicleLookupMapRef.current.get(farSectorKey) || [],\n                    vehicleLookupMapRef.current.get(veryFarSectorKey) || []\n                ];\n\n                // Check adjacent lanes too for civilian vehicles, but only if they're not cars\n                // Cars should be less affected by adjacent lanes than trucks\n                if (!vehicle.isInColumn) {\n                    // Calculate adjacent lane keys\n                    const laneWidth = LANE_WIDTH; // Use the defined lane width\n                    const adjacentLaneUp = vehicle.lane + laneWidth;\n                    const adjacentLaneDown = vehicle.lane - laneWidth;\n\n                    // Determine if this is a car (which should have less adjacent lane checking)\n                    const isCar = vehicle.type && vehicle.type.includes('car_');\n\n                    // Adjust the adjacent lane check distance based on vehicle type\n                    // Cars should ignore vehicles in adjacent lanes unless they're very close\n                    const adjacentLaneZThreshold = isCar ? 1.8 : 3.5;\n\n                    // Add vehicles from adjacent lanes to check\n                    const adjacentSectorKeyUp = `${Math.floor(vehicle.position.x / 10)}-${adjacentLaneUp}-${vehicle.direction}`;\n                    const adjacentSectorKeyDown = `${Math.floor(vehicle.position.x / 10)}-${adjacentLaneDown}-${vehicle.direction}`;\n                    const nextAdjacentSectorKeyUp = `${Math.floor((vehicle.position.x + (vehicle.direction * 10)) / 10)}-${adjacentLaneUp}-${vehicle.direction}`;\n                    const nextAdjacentSectorKeyDown = `${Math.floor((vehicle.position.x + (vehicle.direction * 10)) / 10)}-${adjacentLaneDown}-${vehicle.direction}`;\n\n                    // Store the adjacent lane vehicles in a separate array for special handling\n                    const adjacentLaneVehicles = [\n                        ...(vehicleLookupMapRef.current.get(adjacentSectorKeyUp) || []),\n                        ...(vehicleLookupMapRef.current.get(adjacentSectorKeyDown) || []),\n                        ...(vehicleLookupMapRef.current.get(nextAdjacentSectorKeyUp) || []),\n                        ...(vehicleLookupMapRef.current.get(nextAdjacentSectorKeyDown) || [])\n                    ];\n\n                    // For cars, we'll check adjacent lane vehicles separately with a narrower Z threshold\n                    if (isCar) {\n                        // We'll handle these separately below\n                    } else {\n                        // Add all adjacent vehicles to sectors to check for trucks\n                        sectorsToCheck.push(...adjacentLaneVehicles);\n                    }\n\n                    // Store the adjacent lane vehicles on the vehicle object for special handling\n                    vehicle.adjacentLaneVehicles = adjacentLaneVehicles;\n                    vehicle.adjacentLaneZThreshold = adjacentLaneZThreshold;\n                }\n\n                let closestDistance = Infinity;\n                let hasCollision = false;\n\n                // Flatten and filter vehicles\n                const potentialCollisions = sectorsToCheck.flat().filter(v =>\n                    v.id !== vehicle.id &&\n                    Math.abs(v.road - vehicle.road) < 0.5 &&\n                    v.direction === vehicle.direction // Only check vehicles going in same direction\n                );\n\n                // Check these filtered vehicles for collision\n                potentialCollisions.forEach(otherVehicle => {\n                    // Skip checking destroyed vehicles\n                    const healthData = getVehicleHealth(otherVehicle.id);\n                    if (healthData && healthData.isDead && healthData.isDestroyed) return;\n\n                    // Calculate Z-distance between vehicles\n                    const zDistance = Math.abs(otherVehicle.position.z - vehicle.position.z);\n\n                    // Only consider vehicles within a certain Z-distance (based on vehicle width)\n                    // Use a wider threshold for civilian vehicles to prevent side collisions\n                    const zThreshold = vehicle.isInColumn ? 2.0 : 3.5;\n\n                    if (zDistance < zThreshold) {\n                        // For right-moving vehicles\n                        if (vehicle.direction > 0 && otherVehicle.direction > 0) {\n                            // Check if other vehicle is ahead\n                            if (otherVehicle.position.x > vehicle.position.x) {\n                                const distance = otherVehicle.position.x - vehicle.position.x;\n\n                                // Use a fixed check distance that doesn't decrease with Z-distance\n                                // This prevents vehicles from thinking they can slip through when they can't\n                                if (distance < checkDistance) {\n                                    hasCollision = true;\n                                    closestDistance = Math.min(closestDistance, distance);\n                                }\n                            }\n                        }\n                        // For left-moving vehicles\n                        else if (vehicle.direction < 0 && otherVehicle.direction < 0) {\n                            // Check if other vehicle is ahead\n                            if (otherVehicle.position.x < vehicle.position.x) {\n                                const distance = vehicle.position.x - otherVehicle.position.x;\n\n                                // Use a fixed check distance that doesn't decrease with Z-distance\n                                if (distance < checkDistance) {\n                                    hasCollision = true;\n                                    closestDistance = Math.min(closestDistance, distance);\n                                }\n                            }\n                        }\n                    }\n                });\n\n                // Special handling for cars - check adjacent lane vehicles with a narrower Z threshold\n                if (!vehicle.isInColumn && vehicle.type && vehicle.type.includes('car_') && vehicle.adjacentLaneVehicles) {\n                    const adjacentLaneZThreshold = vehicle.adjacentLaneZThreshold || 1.8;\n\n                    vehicle.adjacentLaneVehicles.forEach(otherVehicle => {\n                        // Skip checking destroyed vehicles\n                        const healthData = getVehicleHealth(otherVehicle.id);\n                        if (healthData && healthData.isDead && healthData.isDestroyed) return;\n\n                        // Skip checking military columns unless they're extremely close\n                        if (otherVehicle.isInColumn) {\n                            // Calculate Z-distance between vehicles\n                            const zDistance = Math.abs(otherVehicle.position.z - vehicle.position.z);\n\n                            // Cars should only be affected by military columns if they're extremely close\n                            if (zDistance >= adjacentLaneZThreshold) {\n                                return; // Skip this military column vehicle\n                            }\n                        }\n\n                        // Calculate Z-distance between vehicles\n                        const zDistance = Math.abs(otherVehicle.position.z - vehicle.position.z);\n\n                        // Only consider vehicles within a tighter Z-distance for cars\n                        if (zDistance < adjacentLaneZThreshold) {\n                            // For right-moving vehicles\n                            if (vehicle.direction > 0 && otherVehicle.direction > 0) {\n                                // Check if other vehicle is ahead\n                                if (otherVehicle.position.x > vehicle.position.x) {\n                                    const distance = otherVehicle.position.x - vehicle.position.x;\n\n                                    // For cars, we only care about adjacent lane vehicles that are VERY close\n                                    if (distance < checkDistance * 0.7) {\n                                        hasCollision = true;\n                                        closestDistance = Math.min(closestDistance, distance);\n                                    }\n                                }\n                            }\n                            // For left-moving vehicles\n                            else if (vehicle.direction < 0 && otherVehicle.direction < 0) {\n                                // Check if other vehicle is ahead\n                                if (otherVehicle.position.x < vehicle.position.x) {\n                                    const distance = vehicle.position.x - otherVehicle.position.x;\n\n                                    // For cars, we only care about adjacent lane vehicles that are VERY close\n                                    if (distance < checkDistance * 0.7) {\n                                        hasCollision = true;\n                                        closestDistance = Math.min(closestDistance, distance);\n                                    }\n                                }\n                            }\n                        }\n                    });\n\n                    // Clean up our temporary properties\n                    delete vehicle.adjacentLaneVehicles;\n                    delete vehicle.adjacentLaneZThreshold;\n                }\n\n                // Store the closest distance for speed regulation\n                if (hasCollision) {\n                    vehicle.distanceToNext = closestDistance;\n                } else {\n                    vehicle.distanceToNext = Infinity;\n                }\n\n                return hasCollision;\n            };\n\n            // Update the lookup map for efficient collision detection\n            updateVehicleLookupMap(vehicles);\n\n            // Gather active column IDs and mark destroyed vehicles\n            vehicles.forEach(vehicle => {\n                if (vehicle.isInColumn && vehicle.columnId) {\n                    activeColumns.add(vehicle.columnId);\n\n                    // Check if this vehicle is destroyed\n                    const healthData = getVehicleHealth(vehicle.id);\n                    if (healthData && healthData.isDead) {\n                        destroyedVehicles.set(vehicle.id, vehicle);\n\n                        // Mark this column as having a destroyed vehicle\n                        if (!vehicle.hasNotifiedColumn) {\n                            newlyDestroyedColumns.set(vehicle.columnId, currentTime);\n                        }\n\n                        // If vehicle is destroyed but not yet marked for clearing, mark it with a clearing time\n                        if (!vehicle.clearingStarted) {\n                            const timeoutId = setTimeout(() => {\n                                setVehicles(prevVehicles => {\n                                    // Find all vehicles in the same column\n                                    const columnId = vehicle.columnId;\n\n                                    return prevVehicles.map(v => {\n                                        if (v.id === vehicle.id) {\n                                            // This is the destroyed vehicle\n                                            return {\n                                                ...v,\n                                                clearingStarted: true,\n                                                clearingTime: currentTime,\n                                                hasNotifiedColumn: true\n                                            };\n                                        }\n                                        else if (v.columnId === columnId) {\n                                            // This is another vehicle in the same column\n                                            return {\n                                                ...v,\n                                                columnHasDestroyed: true,\n                                                lastDestroyedTime: currentTime\n                                            };\n                                        }\n                                        return v;\n                                    });\n                                });\n                            }, 0);\n                            timeoutRefsRef.current.push(timeoutId);\n                        }\n\n                        // Mark it for removal after a delay if not already marked and vehicle is fully destroyed\n                        if (!vehicle.markedForRemoval && vehicle.clearingStarted && healthData.isDestroyed) {\n                            const timeoutId = setTimeout(() => {\n                                setVehicles(prevVehicles => {\n                                    return prevVehicles.map(v => {\n                                        if (v.id === vehicle.id) {\n                                            return {\n                                                ...v,\n                                                markedForRemoval: true\n                                            };\n                                        }\n                                        return v;\n                                    });\n                                });\n                            }, DESTROYED_VEHICLE_WAIT_PERIOD); // 2 seconds delay before removing destroyed vehicles\n                            timeoutRefsRef.current.push(timeoutId);\n                        }\n                    }\n                }\n            });\n\n            // First, remove any destroyed column vehicles that have been marked for removal\n            const filteredVehicles = vehicles.filter(vehicle => {\n                if (vehicle.isInColumn) {\n                    const healthData = getVehicleHealth(vehicle.id);\n                    // Remove if it's destroyed AND marked for removal\n                    if (healthData && healthData.isDead && healthData.isDestroyed && vehicle.markedForRemoval) {\n                        // When removing the vehicle, add its position to the cleared positions map with a timestamp\n                        // This information will be used by vehicles behind it\n                        const laneKey = `${vehicle.columnId}-${vehicle.columnPosition}`;\n                        clearedDestroyedPositions.set(laneKey, {\n                            x: vehicle.position.x,\n                            lane: vehicle.lane,\n                            road: vehicle.road,\n                            columnId: vehicle.columnId,\n                            columnPosition: vehicle.columnPosition,\n                            direction: vehicle.direction,\n                            clearingTime: currentTime // Use current time when actually removed, not previous clearing time\n                        });\n\n                        // Notify all other vehicles in the column that a vehicle has been completely removed\n                        const timeoutId = setTimeout(() => {\n                            setVehicles(prevVehicles => {\n                                return prevVehicles.map(v => {\n                                    if (v.columnId === vehicle.columnId) {\n                                        return {\n                                            ...v,\n                                            columnHasRemoval: true,\n                                            lastRemovalTime: currentTime\n                                        };\n                                    }\n                                    return v;\n                                });\n                            });\n                        }, 0);\n                        timeoutRefsRef.current.push(timeoutId);\n\n                        return false;\n                    }\n                }\n                // Keep all other vehicles\n                return true;\n            });\n\n            // Then continue with the regular update process\n            // Group vehicles by columns for synchronized movement\n            const columnMap = new Map();\n            filteredVehicles.forEach(vehicle => {\n                if (vehicle.isInColumn && vehicle.columnId) {\n                    if (!columnMap.has(vehicle.columnId)) {\n                        columnMap.set(vehicle.columnId, []);\n                    }\n                    columnMap.get(vehicle.columnId).push(vehicle);\n                }\n            });\n\n            // First update individual vehicles (non-column vehicles)\n            const updatedVehicles = filteredVehicles.map(vehicle => {\n                // Skip column vehicles as they'll be updated together\n                if (vehicle.isInColumn) return vehicle;\n\n                // Get the vehicle's health data to adjust mobility\n                const healthData = getVehicleHealth(vehicle.id);\n\n                // If vehicle is dead, don't update its position\n                if (healthData && healthData.isDead) {\n                    return vehicle;\n                }\n\n                // Apply mobility factor from health system (if available)\n                const mobilityFactor = healthData ? healthData.mobilityFactor : 1.0;\n\n                // Store original speed for reference\n                const originalSpeed = vehicle.speed * mobilityFactor;\n\n                // Check for vehicles ahead with the new distances\n                // Use different distance thresholds for civilian vehicles\n                let speed = originalSpeed;\n\n                if (!vehicle.isInColumn) {\n                    // Check if vehicle is in a potential traffic jam (very slow for several frames)\n                    if (!vehicle.jamCounter) vehicle.jamCounter = 0;\n                    if (!vehicle.lastJamCheck) vehicle.lastJamCheck = currentTime;\n\n                    // Only update jam status periodically to avoid rapid changes\n                    if (currentTime - vehicle.lastJamCheck > TRAFFIC_JAM_CHECK_INTERVAL) {\n                        if (vehicle.speed < TRAFFIC_JAM_SPEED_THRESHOLD) {\n                            vehicle.jamCounter++;\n                        } else {\n                            // Reset jam counter if moving at decent speed\n                            vehicle.jamCounter = Math.max(0, vehicle.jamCounter - 2); // Faster recovery\n                        }\n                        vehicle.lastJamCheck = currentTime;\n                    }\n\n                    // Determine if in traffic jam\n                    const isInTrafficJam = vehicle.jamCounter > 5;\n\n                    // Get the actual distance to the next vehicle\n                    const hasCollisionEmergency = optimizedDetectCollisionAhead(vehicle, filteredVehicles, CIVILIAN_EMERGENCY_DISTANCE);\n                    const hasMinimumDistance = optimizedDetectCollisionAhead(vehicle, filteredVehicles, CIVILIAN_MINIMUM_DISTANCE);\n                    const hasCollisionWarning = optimizedDetectCollisionAhead(vehicle, filteredVehicles, CIVILIAN_DETECTION_DISTANCE);\n\n                    // Store the previous speed for acceleration control\n                    if (!vehicle.previousSpeed) vehicle.previousSpeed = vehicle.speed;\n\n                    // Determine appropriate speed for civilian vehicles with traffic jam recovery\n                    let targetSpeed;\n                    if (hasCollisionEmergency) {\n                        // Emergency stop - too close\n                        targetSpeed = 0;\n                    } else if (hasMinimumDistance) {\n                        // Strong slowing down when below minimum distance\n                        const distanceFactor = Math.max(0, (vehicle.distanceToNext - CIVILIAN_EMERGENCY_DISTANCE)) /\n                            (CIVILIAN_MINIMUM_DISTANCE - CIVILIAN_EMERGENCY_DISTANCE);\n                        // More aggressive braking for close vehicles\n                        targetSpeed = originalSpeed * Math.max(0.02, Math.min(0.1, distanceFactor * 0.1));\n                    } else if (hasCollisionWarning) {\n                        // Gradual slow down based on distance\n                        const distanceFactor = Math.max(0, (vehicle.distanceToNext - CIVILIAN_MINIMUM_DISTANCE)) /\n                            (CIVILIAN_DETECTION_DISTANCE - CIVILIAN_MINIMUM_DISTANCE);\n                        // More aggressive deceleration curve\n                        targetSpeed = originalSpeed * Math.max(0.2, Math.min(0.8, distanceFactor));\n                    } else {\n                        // No obstacles ahead - recover speed\n                        targetSpeed = originalSpeed;\n\n                        // Apply boost if recovering from traffic jam\n                        // Only boost if we have significant space ahead (more than detection distance)\n                        if (isInTrafficJam && vehicle.distanceToNext > CIVILIAN_DETECTION_DISTANCE * 1.5) {\n                            targetSpeed *= TRAFFIC_JAM_RECOVERY_BOOST;\n                        }\n                    }\n\n                    // Smoother, more responsive deceleration\n                    const accelerationRate = targetSpeed > vehicle.speed ? 0.08 : 0.25; // Even faster deceleration than before\n                    speed = vehicle.speed + (targetSpeed - vehicle.speed) * accelerationRate;\n\n                    // Store current speed for next frame\n                    vehicle.previousSpeed = speed;\n                } else {\n                    // Military column vehicles - now using same distances as civilians\n                    const hasCollisionEmergency = optimizedDetectCollisionAhead(vehicle, filteredVehicles, CIVILIAN_EMERGENCY_DISTANCE);\n                    const hasMinimumDistance = optimizedDetectCollisionAhead(vehicle, filteredVehicles, CIVILIAN_MINIMUM_DISTANCE);\n                    const hasCollisionWarning = optimizedDetectCollisionAhead(vehicle, filteredVehicles, CIVILIAN_DETECTION_DISTANCE);\n\n                    // Determine appropriate speed for military vehicles - using civilian distance factors\n                    if (hasCollisionEmergency) {\n                        // Emergency stop - too close\n                        speed = 0;\n                    } else if (hasMinimumDistance) {\n                        // Strong slowing down when below minimum distance\n                        const distanceFactor = Math.max(0, (vehicle.distanceToNext - CIVILIAN_EMERGENCY_DISTANCE)) /\n                            (CIVILIAN_MINIMUM_DISTANCE - CIVILIAN_EMERGENCY_DISTANCE);\n                        // More aggressive braking for close vehicles\n                        speed = originalSpeed * Math.max(0.02, Math.min(0.1, distanceFactor * 0.1));\n                    } else if (hasCollisionWarning) {\n                        // Gradual slow down based on distance\n                        const distanceFactor = Math.max(0, (vehicle.distanceToNext - CIVILIAN_MINIMUM_DISTANCE)) /\n                            (CIVILIAN_DETECTION_DISTANCE - CIVILIAN_MINIMUM_DISTANCE);\n                        // More aggressive deceleration curve\n                        speed = originalSpeed * Math.max(0.2, Math.min(0.8, distanceFactor));\n                    }\n                }\n\n                // Calculate the new position with smoother acceleration/deceleration\n                const speedChange = Math.min(Math.abs(speed - vehicle.speed), 0.01); // Limit speed change per frame\n                const newSpeed = speed > vehicle.speed\n                    ? vehicle.speed + speedChange\n                    : vehicle.speed - speedChange;\n\n                const newX = vehicle.position.x + (newSpeed * vehicle.direction * delta * 60);\n\n                // Calculate the new position by modifying existing Vector3 instead of creating a new one\n                if (vehicle.direction > 0 && newX > terrainSize.width / 2) {\n                    // Reset to the beginning of the road (right direction vehicles)\n                    tempVector3.set(-terrainSize.width / 2, 0.3, vehicle.position.z);\n                    vehicle.position.copy(tempVector3);\n                    return {\n                        ...vehicle,\n                        speed: vehicle.speed\n                    };\n                } else if (vehicle.direction < 0 && newX < -terrainSize.width / 2) {\n                    // Reset to the beginning of the road (left direction vehicles)\n                    tempVector3.set(terrainSize.width / 2, 0.3, vehicle.position.z);\n                    vehicle.position.copy(tempVector3);\n                    return {\n                        ...vehicle,\n                        speed: vehicle.speed\n                    };\n                }\n\n                // Update position by modifying the existing object\n                tempVector3.set(newX, vehicle.position.y, vehicle.position.z);\n\n                // Only run one collision detection - remove this redundant section\n                return {\n                    ...vehicle,\n                    position: tempVector3.clone(), // Need to clone here since we're returning a new object\n                    speed: newSpeed\n                };\n            });\n\n            // Update lookup cache for new vehicle states\n            updatedVehicles.forEach(vehicle => {\n                vehiclesById.current.set(vehicle.id, vehicle);\n            });\n\n            // Now update column vehicles together\n            columnMap.forEach((columnVehicles, columnId) => {\n                // Sort by column position\n                columnVehicles.sort((a, b) => a.columnPosition - b.columnPosition);\n\n                if (columnVehicles.length === 0) return;\n\n                // Find the first non-destroyed vehicle to act as the lead\n                let leadVehicleIndex = 0;\n                let leadVehicle = columnVehicles[leadVehicleIndex];\n                let leadVehicleHealth = getVehicleHealth(leadVehicle.id);\n\n                // If the first vehicle is destroyed, find the next available vehicle to lead\n                while (leadVehicleIndex < columnVehicles.length - 1 &&\n                    leadVehicleHealth && leadVehicleHealth.isDead) {\n                    leadVehicleIndex++;\n                    leadVehicle = columnVehicles[leadVehicleIndex];\n                    leadVehicleHealth = getVehicleHealth(leadVehicle.id);\n                }\n\n                // If all vehicles are destroyed, the column can't move\n                if (leadVehicleHealth && leadVehicleHealth.isDead) {\n                    // Find the next non-destroyed vehicle to be the new lead\n                    // Instead of stopping the column, look for another vehicle to lead\n                    let newLeadFound = false;\n                    let newLeadVehicleIndex = -1;\n\n                    // Try to find any non-destroyed vehicle to be the new lead\n                    for (let i = 0; i < columnVehicles.length; i++) {\n                        const potentialLeadHealth = getVehicleHealth(columnVehicles[i].id);\n                        if (!(potentialLeadHealth && potentialLeadHealth.isDead)) {\n                            newLeadVehicleIndex = i;\n                            newLeadFound = true;\n                            break;\n                        }\n                    }\n\n                    if (newLeadFound) {\n                        // Update lead vehicle to the newly found non-destroyed vehicle\n                        leadVehicleIndex = newLeadVehicleIndex;\n                        leadVehicle = columnVehicles[leadVehicleIndex];\n                        leadVehicleHealth = getVehicleHealth(leadVehicle.id);\n                    } else {\n                        // All vehicles are destroyed, but we'll continue moving the column\n                        // Use the original lead vehicle's properties for movement calculation\n                        leadVehicle = columnVehicles[0];\n                    }\n                }\n\n                // Replace the lead vehicle concept with a column-wide movement strategy\n                // Instead of following a leader, vehicles maintain their original positions\n\n                // Find any non-destroyed vehicle to serve as a reference point\n                let referenceVehicle = null;\n                let referenceVehicleHealth = null;\n                let hasActiveVehicle = false;\n\n                for (const vehicle of columnVehicles) {\n                    const health = getVehicleHealth(vehicle.id);\n                    if (!(health && health.isDead)) {\n                        referenceVehicle = vehicle;\n                        referenceVehicleHealth = health;\n                        hasActiveVehicle = true;\n                        break;\n                    }\n                }\n\n                // Initialize column speed here with a default value\n                const initialSpeed = SPEED_MIN;\n                let columnSpeed = initialSpeed;\n\n                // If we have an active vehicle, use its speed as reference\n                if (hasActiveVehicle) {\n                    // Use the health of reference vehicle for mobility factor\n                    const mobilityFactor = referenceVehicleHealth ? referenceVehicleHealth.mobilityFactor : 1.0;\n                    const baseSpeed = referenceVehicle.speed * mobilityFactor;\n                    columnSpeed = baseSpeed;\n                }\n\n                // Filter to active vehicles for processing\n                const activeColumnVehicles = columnVehicles.filter(vehicle => {\n                    const health = getVehicleHealth(vehicle.id);\n                    return !(health && health.isDead);\n                });\n\n                // Check if any vehicles in the column were destroyed and track timing\n                let columnHasDestroyed = false;\n                let lastDestroyedTime = null;\n\n                // Create a map of destroyed vehicles by position to make lookups faster\n                const destroyedVehicleMap = new Map();\n\n                for (const veh of columnVehicles) {\n                    const health = getVehicleHealth(veh.id);\n                    if (health && health.isDead) {\n                        columnHasDestroyed = true;\n                        destroyedVehicleMap.set(veh.columnPosition, veh);\n\n                        // If this vehicle was just destroyed, update the destroyed time\n                        if (!veh.wasMarkedDestroyed) {\n                            lastDestroyedTime = currentTime;\n                            // Mark the vehicle so we don't update the time again\n                            const updateIdx = updatedVehicles.findIndex(v => v.id === veh.id);\n                            if (updateIdx !== -1) {\n                                updatedVehicles[updateIdx] = {\n                                    ...updatedVehicles[updateIdx],\n                                    wasMarkedDestroyed: true,\n                                    clearingTime: currentTime\n                                };\n                            }\n                        } else if (veh.clearingTime && (!lastDestroyedTime || veh.clearingTime > lastDestroyedTime)) {\n                            lastDestroyedTime = veh.clearingTime;\n                        }\n                    }\n                }\n\n                // Update all vehicles in this column with the destroyed status\n                if (columnHasDestroyed && lastDestroyedTime) {\n                    columnVehicles.forEach(veh => {\n                        const updateIdx = updatedVehicles.findIndex(v => v.id === veh.id);\n                        if (updateIdx !== -1) {\n                            updatedVehicles[updateIdx] = {\n                                ...updatedVehicles[updateIdx],\n                                columnHasDestroyed: true,\n                                lastDestroyedTime: lastDestroyedTime\n                            };\n                        }\n                    });\n                }\n\n                // Apply collision avoidance based on the frontmost active vehicle\n                const frontmostActiveVehicle = activeColumnVehicles.reduce((front, current) => {\n                    // For positive direction, higher X is more forward\n                    // For negative direction, lower X is more forward\n                    if (referenceVehicle.direction > 0) {\n                        return current.position.x > front.position.x ? current : front;\n                    } else {\n                        return current.position.x < front.position.x ? current : front;\n                    }\n                }, activeColumnVehicles[0] || columnVehicles[0]); // Fallback to first column vehicle if no active vehicles\n\n                // Check for obstacles ahead using civilian distances for better safety\n                const hasCollisionEmergency = optimizedDetectCollisionAhead(frontmostActiveVehicle, updatedVehicles, CIVILIAN_EMERGENCY_DISTANCE);\n                const hasMinimumDistance = optimizedDetectCollisionAhead(frontmostActiveVehicle, updatedVehicles, CIVILIAN_MINIMUM_DISTANCE);\n                const hasCollisionWarning = optimizedDetectCollisionAhead(frontmostActiveVehicle, updatedVehicles, CIVILIAN_DETECTION_DISTANCE);\n\n                // Adjust speed based on conditions\n                if (hasCollisionEmergency) {\n                    columnSpeed = 0;\n                } else if (hasMinimumDistance) {\n                    const distanceFactor = (frontmostActiveVehicle.distanceToNext - CIVILIAN_EMERGENCY_DISTANCE) /\n                        (CIVILIAN_MINIMUM_DISTANCE - CIVILIAN_EMERGENCY_DISTANCE);\n                    columnSpeed = columnSpeed * Math.max(0.05, distanceFactor * 0.1);\n                } else if (hasCollisionWarning) {\n                    const distanceFactor = (frontmostActiveVehicle.distanceToNext - CIVILIAN_MINIMUM_DISTANCE) /\n                        (CIVILIAN_DETECTION_DISTANCE - CIVILIAN_MINIMUM_DISTANCE);\n                    columnSpeed = columnSpeed * Math.max(0.3, distanceFactor);\n                }\n\n                // Ensure column keeps moving even with destroyed vehicles\n                if (columnHasDestroyed && !hasCollisionEmergency) {\n                    columnSpeed = Math.max(columnSpeed, SPEED_MIN);\n                }\n\n                // Smooth acceleration/deceleration\n                const speedChange = Math.min(Math.abs(columnSpeed - (hasActiveVehicle ? referenceVehicle.speed : SPEED_MIN)), 0.01);\n                const newColumnSpeed = columnSpeed > (hasActiveVehicle ? referenceVehicle.speed : SPEED_MIN)\n                    ? (hasActiveVehicle ? referenceVehicle.speed : SPEED_MIN) + speedChange\n                    : (hasActiveVehicle ? referenceVehicle.speed : SPEED_MIN) - speedChange;\n\n                // Calculate movement for all vehicles\n                columnVehicles.forEach(vehicle => {\n                    const updatedVehicleIndex = updatedVehicles.findIndex(v => v.id === vehicle.id);\n                    if (updatedVehicleIndex === -1) return;\n\n                    // Skip processing destroyed vehicles\n                    const vehicleHealth = getVehicleHealth(vehicle.id);\n                    if (vehicleHealth && vehicleHealth.isDead) return;\n\n                    // Check if the column needs to wait for destroyed vehicles\n                    const shouldWaitInPlace = columnHasDestroyed && lastDestroyedTime &&\n                        currentTime - lastDestroyedTime < DESTROYED_VEHICLE_WAIT_PERIOD;\n\n                    // Find if there are any destroyed vehicles ahead of this one by comparing positions\n                    let hasDestroyedVehicleAhead = false;\n\n                    // More efficient check: directly compare positions to find destroyed vehicles ahead\n                    for (const [position, destroyedVehicle] of destroyedVehicleMap.entries()) {\n                        // For positive direction: destroyed vehicle is ahead if its x position is greater\n                        // For negative direction: destroyed vehicle is ahead if its x position is smaller\n                        if ((vehicle.direction > 0 && destroyedVehicle.position.x > vehicle.position.x) ||\n                            (vehicle.direction < 0 && destroyedVehicle.position.x < vehicle.position.x)) {\n\n                            // Check if there's a destroyed vehicle ahead that's still in the wait period\n                            const timeSinceDestroyed = destroyedVehicle.clearingTime ?\n                                (currentTime - destroyedVehicle.clearingTime) : 0;\n\n                            if (timeSinceDestroyed < DESTROYED_VEHICLE_WAIT_PERIOD) {\n                                hasDestroyedVehicleAhead = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    // Only wait if there's a destroyed vehicle directly ahead AND we're in the wait period\n                    // Otherwise, continue moving\n                    if (shouldWaitInPlace && hasDestroyedVehicleAhead) {\n                        // Keep the vehicle in place during the wait period\n                        tempVector3.set(vehicle.position.x, vehicle.position.y, vehicle.position.z);\n                        updatedVehicles[updatedVehicleIndex] = {\n                            ...vehicle,\n                            position: tempVector3.clone(),\n                            speed: 0,\n                            columnHasDestroyed,\n                            lastDestroyedTime,\n                            waitingForVehicleAhead: true\n                        };\n                    } else {\n                        // Move the vehicle forward - either it's ahead of any destroyed vehicles,\n                        // or there is no need to wait anymore\n\n                        // For vehicles that were waiting, add a small boost to catch up with the formation\n                        const catchUpBoost = vehicle.waitingForVehicleAhead ? 1.2 : 1.0;\n\n                        // Calculate the position offset from a baseline column position\n                        const xMovement = newColumnSpeed * vehicle.direction * delta * 60 * catchUpBoost;\n\n                        // Calculate new position, preserving the exact formation\n                        tempVector3.set(\n                            vehicle.position.x + xMovement,\n                            vehicle.position.y,\n                            vehicle.position.z\n                        );\n\n                        updatedVehicles[updatedVehicleIndex] = {\n                            ...vehicle,\n                            position: tempVector3.clone(),\n                            speed: newColumnSpeed * catchUpBoost,\n                            columnHasDestroyed,\n                            lastDestroyedTime,\n                            waitingForVehicleAhead: false\n                        };\n                    }\n                });\n\n                // Check if column has reached the end of the road\n                const frontmostX = frontmostActiveVehicle.position.x + (newColumnSpeed * frontmostActiveVehicle.direction * delta * 60);\n\n                if (frontmostActiveVehicle.direction > 0 && frontmostX > terrainSize.width / 2 ||\n                    frontmostActiveVehicle.direction < 0 && frontmostX < -terrainSize.width / 2) {\n\n                    // Remove the column from the scene\n                    columnVehicles.forEach((vehicle) => {\n                        const updatedVehicleIndex = updatedVehicles.findIndex(v => v.id === vehicle.id);\n                        if (updatedVehicleIndex !== -1) {\n                            updatedVehicles[updatedVehicleIndex] = {\n                                ...vehicle,\n                                isRemoved: true\n                            };\n                        }\n                    });\n\n                    // Schedule a new column to spawn\n                    scheduleColumnRespawn(frontmostActiveVehicle.lane, frontmostActiveVehicle.direction);\n                }\n            });\n\n            // Handle cleanup of removed vehicles and respawning\n            const processedVehicles = updatedVehicles.filter(vehicle => {\n                if (!vehicle) return false; // Skip null vehicles\n                if (vehicle.isRemoved) return false;\n\n                // Skip column vehicles as they're handled differently\n                if (vehicle.isInColumn) return true;\n\n                const healthData = getVehicleHealth(vehicle.id);\n\n                if (healthData && healthData.isDead && healthData.isDestroyed) {\n                    // Skip respawning for civilian vehicles\n                    if (!vehicle.isInColumn) {\n                        return false; // Remove the civilian vehicle completely\n                    }\n\n                    // For military columns, keep the existing respawn logic\n                    const randomOffset = Math.random() * (terrainSize.width * 0.4);\n                    const respawnPosition = vehicle.direction > 0 ?\n                        -terrainSize.width / 2 + randomOffset :\n                        terrainSize.width / 2 + randomOffset;\n\n                    const vehiclesAtStartingPoint = updatedVehicles.filter(v =>\n                        v && v.id !== vehicle.id && // Add null check\n                        v.direction === vehicle.direction &&\n                        v.lane === vehicle.lane &&\n                        v.road === vehicle.road &&\n                        ((vehicle.direction > 0 &&\n                            v.position.x > respawnPosition &&\n                            v.position.x < respawnPosition + MINIMUM_DISTANCE * 2.5) ||\n                            (vehicle.direction < 0 &&\n                                v.position.x < respawnPosition &&\n                                v.position.x > respawnPosition - MINIMUM_DISTANCE * 2.5))\n                    );\n\n                    const respawnOffset = vehiclesAtStartingPoint.length > 0\n                        ? (vehicle.direction > 0 ? -MINIMUM_DISTANCE * 2.5 : MINIMUM_DISTANCE * 2.5)\n                        : 0;\n\n                    const respawnedVehicle = {\n                        ...vehicle,\n                        position: new THREE.Vector3(\n                            respawnPosition + respawnOffset,\n                            0.3,\n                            vehicle.position.z\n                        ),\n                        speed: SPEED_MIN + Math.random() * (SPEED_MAX - SPEED_MIN)\n                    };\n\n                    // Reset the vehicle's health in the health system only for military vehicles\n                    const timeoutId = setTimeout(() => {\n                        vehicleHealthStore.respawnVehicle(vehicle.id);\n                    }, 0);\n                    timeoutRefsRef.current.push(timeoutId);\n\n                    return respawnedVehicle;\n                }\n\n                return true;\n            }).filter(Boolean); // Remove any remaining null values\n\n            // Add in new columns from the spawn queue\n            const newColumns = processColumnSpawnQueue();\n            if (newColumns.length > 0) {\n                processedVehicles.push(...newColumns);\n            }\n\n            return processedVehicles;\n        });\n    });\n\n    // Function to schedule a column respawn with proper timeout tracking\n    function scheduleColumnRespawn(lane, direction) {\n        const laneKey = `${lane}-${direction}`;\n\n        // Only schedule if there isn't already a pending spawn\n        if (!columnSpawnTimersRef.current[laneKey]) {\n            const timeoutId = setTimeout(() => {\n                // Clear the timer reference\n                columnSpawnTimersRef.current[laneKey] = null;\n\n                // Add this lane to the queue for respawning a column\n                // The actual spawning will happen in the next frame update\n                setVehicles(vehicles => {\n                    // Directly add the new column here\n                    return [...vehicles, ...createNewColumn(lane, direction)];\n                });\n            }, COLUMN_RESPAWN_DELAY);\n\n            // Store the timeout ID for cleanup\n            columnSpawnTimersRef.current[laneKey] = timeoutId;\n            timeoutRefsRef.current.push(timeoutId);\n        }\n    }\n\n    // Function to process any pending column spawns\n    function processColumnSpawnQueue() {\n        // This is now handled by the setTimeout callbacks\n        return [];\n    }\n\n    // Function to create a new column with optimized object creation\n    function createNewColumn(lane, direction) {\n        const newVehicles = [];\n        const columnConfig = getRandomItem(MILITARY_COLUMNS);\n        const newColumnId = `column-${Math.random().toString(36).substring(2, 9)}`;\n\n        // Generate a random position along the road for the column to spawn\n        // Use a range within the terrain size with some padding\n        const randomOffset = Math.random() * (terrainSize.width * 0.7) - (terrainSize.width * 0.35);\n\n        // Starting position for the new column - random point on the road\n        const startingX = direction > 0 ?\n            -terrainSize.width / 2 + 100 + randomOffset : // For positive direction\n            terrainSize.width / 2 - 100 + randomOffset;  // For negative direction\n\n        // Get road from lane position (extract Z coordinate)\n        const roadZ = Math.abs(lane) < ROAD_WIDTH ? -ROAD_SPACING / 2 : ROAD_SPACING / 2;\n\n        let currentX = startingX;\n        let vehicleIndex = 0;\n\n        // Create all vehicles for the new column\n        for (const vehicleGroup of columnConfig.vehicles) {\n            for (let i = 0; i < vehicleGroup.count; i++) {\n                const vehicleType = getRandomVehicleOfType(vehicleGroup.type);\n                if (!vehicleType) continue;\n\n                const vehicleId = `${newColumnId}-${vehicleGroup.type}-${i}`;\n\n                // Get a vehicle from the pool\n                const vehicle = vehiclePoolRef.current.get();\n\n                // Configure the vehicle\n                vehicle.id = vehicleId;\n                vehicle.type = vehicleType;\n                vehicle.columnId = newColumnId;\n                vehicle.columnPosition = vehicleIndex;\n                vehicle.position.set(\n                    currentX,\n                    0.3,\n                    lane + (Math.random() * 0.2 - 0.1)\n                );\n                vehicle.rotation = direction > 0 ? rotationMap.right : rotationMap.left;\n                vehicle.speed = SPEED_MIN + Math.random() * (SPEED_MAX - SPEED_MIN) * 0.5;\n                vehicle.direction = direction;\n                vehicle.lane = lane;\n                vehicle.road = roadZ;\n                vehicle.laneType = LANE_TYPES.FAST;\n                vehicle.isInColumn = true;\n                vehicle.hitbox = { width: 1.33, height: 1.33, depth: 4.0 };\n\n                // Add to new vehicles\n                newVehicles.push(vehicle);\n\n                // Move to next vehicle position - use specific spacing based on vehicle type\n                if (vehicleGroup.type === 'tank') {\n                    currentX += direction * TANK_SPACING;\n                } else if (vehicleGroup.type === 'ifv') {\n                    currentX += direction * IFV_SPACING;\n                } else {\n                    currentX += direction * COLUMN_VEHICLE_SPACING;\n                }\n                vehicleIndex++;\n            }\n        }\n\n        return newVehicles;\n    }\n\n    // Add useFrame for distance-based culling similar to EnvironmentObjects\n    const { camera } = useThree();\n    useFrame(() => {\n        const cameraPosition = camera.position;\n        const FAR_DISTANCE = 1200; // Set slightly higher than environment objects to avoid pop-in\n\n        // Apply distance-based culling to vehicles\n        vehicleRefsMap.current.forEach((vehicleRef, vehicleId) => {\n            if (vehicleRef && vehicleRef.current) {\n                // Get the vehicle position\n                const position = vehicleRef.current.position;\n\n                // Calculate distance from camera\n                const distanceToCamera = new THREE.Vector3(\n                    position.x,\n                    position.y,\n                    position.z\n                ).distanceTo(cameraPosition);\n\n                // Set visibility based on distance\n                vehicleRef.current.visible = (distanceToCamera < FAR_DISTANCE);\n            }\n        });\n    });\n\n    // Memoize the rendering of vehicles to reduce unnecessary re-renders\n    const renderVehicles = useMemo(() => {\n        // Clear old references for vehicles that no longer exist\n        const currentVehicleIds = new Set(vehicles.map(v => v.id));\n        vehicleRefsMap.current.forEach((_, id) => {\n            if (!currentVehicleIds.has(id)) {\n                vehicleRefsMap.current.delete(id);\n            }\n        });\n\n        return vehicles\n            // Filter out vehicles outside the visible area - only render vehicles within the terrain bounds\n            .filter((vehicle) => {\n                // Define the visible area boundary with a small buffer\n                const buffer = 50; // buffer in units beyond the terrain edge\n                const minX = -terrainSize.width / 2 - buffer;\n                const maxX = terrainSize.width / 2 + buffer;\n\n                // Define valid Z-coordinate range (road width)\n                const roadHalfWidth = ROAD_WIDTH / 2;\n                const validZRanges = [\n                    // Upper road Z range\n                    { min: ROAD_SPACING / 2 - roadHalfWidth - 5, max: ROAD_SPACING / 2 + roadHalfWidth + 5 },\n                    // Lower road Z range\n                    { min: -ROAD_SPACING / 2 - roadHalfWidth - 5, max: -ROAD_SPACING / 2 + roadHalfWidth + 5 }\n                ];\n\n                // Check if vehicle is within X bounds\n                const validX = vehicle.position.x >= minX && vehicle.position.x <= maxX;\n\n                // Check if vehicle is within any valid Z range\n                const validZ = validZRanges.some(range =>\n                    vehicle.position.z >= range.min && vehicle.position.z <= range.max\n                );\n\n                // Only render vehicles within valid X and Z coordinates\n                return validX && validZ;\n            })\n            .map((vehicle) => {\n                // Get health data for visual effects from our pre-fetched function\n                const healthData = getVehicleHealth(vehicle.id);\n\n                // Use the enhanced vehicle component with health system\n                const VehicleComponent = EnhancedVehicleTypes[vehicle.type];\n\n                // Create a ref for this vehicle if it doesn't exist yet\n                if (!vehicleRefsMap.current.has(vehicle.id)) {\n                    vehicleRefsMap.current.set(vehicle.id, React.createRef());\n                }\n\n                // Get the ref for this vehicle\n                const vehicleRef = vehicleRefsMap.current.get(vehicle.id);\n\n                return (\n                    <group\n                        key={vehicle.id}\n                        ref={vehicleRef}\n                        position={[vehicle.position.x, vehicle.position.y, vehicle.position.z]}\n                        rotation={[vehicle.rotation.x, vehicle.rotation.y, vehicle.rotation.z]}\n                        userData={{\n                            vehicleId: vehicle.id,\n                            vehicleType: vehicle.type,\n                            isVehicle: true,\n                            isInColumn: vehicle.isInColumn,\n                            columnId: vehicle.columnId,\n                            hitbox: {\n                                width: vehicle.hitbox?.width || 1.0,\n                                height: vehicle.hitbox?.height || 1.0,\n                                depth: vehicle.hitbox?.depth || 3.0\n                            }\n                        }}\n                        name={`vehicle-${vehicle.id}`}\n                    >\n                        {/* Enhanced Vehicle Type Component with hitbox information */}\n                        <VehicleComponent\n                            id={vehicle.id}\n                            scale={[4, 4, 4]}\n                            userData={{\n                                vehicleId: vehicle.id,\n                                vehicleType: vehicle.type,\n                                isVehicle: true\n                            }}\n                        />\n\n                        {/* DEBUG: Visual hitbox representation - disabled in production */}\n                        {false && (\n                            <mesh\n                                visible={true}\n                                position={[0, vehicle.hitbox?.height / 2 || 0.5, 0]}\n                                userData={{\n                                    isVehicleHitbox: true,\n                                    parentVehicleId: vehicle.id\n                                }}\n                            >\n                                <boxGeometry args={[\n                                    vehicle.hitbox?.depth || 4.0,\n                                    vehicle.hitbox?.height || 1.33,\n                                    vehicle.hitbox?.width || 1.33\n                                ]} />\n                                <meshBasicMaterial color=\"red\" wireframe={true} opacity={0.5} transparent={true} />\n                            </mesh>\n                        )}\n                    </group>\n                );\n            });\n    }, [vehicles, getVehicleHealth, terrainSize]);\n\n    return <>{renderVehicles}</>;\n}\n","import React, { useEffect } from 'react';\r\nimport { useThree } from '@react-three/fiber';\r\n\r\n/**\r\n * Component for handling vehicle selection via raycasting in the 3D scene\r\n * Does not render any UI elements directly\r\n */\r\nconst VehicleSelector = ({ onSelectVehicle }) => {\r\n    const { scene, camera, gl, raycaster } = useThree();\r\n\r\n    // Set up click handler for selecting vehicles\r\n    useEffect(() => {\r\n        const handleClick = (event) => {\r\n            // Calculate mouse position in normalized device coordinates\r\n            const canvas = gl.domElement;\r\n            const rect = canvas.getBoundingClientRect();\r\n\r\n            const x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n            const y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\r\n\r\n            // Update raycaster with mouse position and camera\r\n            raycaster.setFromCamera({ x, y }, camera);\r\n\r\n            // Find intersected objects\r\n            const intersects = raycaster.intersectObjects(scene.children, true);\r\n\r\n            // Look for vehicle objects\r\n            let found = false;\r\n\r\n            for (let i = 0; i < intersects.length; i++) {\r\n                const object = intersects[i].object;\r\n\r\n                // Go up the parent chain to find object with userData containing vehicleId\r\n                let currentObject = object;\r\n                while (currentObject) {\r\n                    if (currentObject.userData && currentObject.userData.vehicleId) {\r\n                        onSelectVehicle(currentObject.userData.vehicleId);\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                    currentObject = currentObject.parent;\r\n                }\r\n\r\n                if (found) break;\r\n            }\r\n\r\n            // If no vehicle was clicked, deselect is handled by onPointerMissed in Canvas\r\n        };\r\n\r\n        // Add click event listener to canvas\r\n        const canvasElement = gl.domElement;\r\n        canvasElement.addEventListener('click', handleClick);\r\n\r\n        return () => {\r\n            canvasElement.removeEventListener('click', handleClick);\r\n        };\r\n    }, [scene, camera, gl, raycaster, onSelectVehicle]);\r\n\r\n    // This component doesn't render anything directly\r\n    return null;\r\n};\r\n\r\nexport default VehicleSelector; ","import React, { useEffect, useMemo } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { Environment, Sky } from '@react-three/drei';\nimport { FogExp2 } from 'three';\nimport OriginalTerrain from './terrain/OriginalTerrain';\nimport Road from '../Road';\nimport OriginalEnvironmentObjects from './objects/OriginalEnvironmentObjects';\nimport DroneSwitcher from '../DroneSwitcher';\nimport VehiclesOnRoad from '../VehiclesOnRoad';\nimport ExplosionsManager from '../effects/ExplosionsManager';\nimport ShotgunEffectsManager from '../effects/ShotgunEffectsManager';\nimport { DamageIndicatorsManager } from '../effects/DamageIndicator';\nimport VehicleSelector from '../VehicleSelector';\n\n// OriginalMap - The green, grassy map with plenty of trees and vegetation\nexport default function OriginalMap() {\n    const { scene, camera } = useThree();\n\n    useEffect(() => {\n        // Create exponential fog for the original map\n        scene.fog = new FogExp2('#b5d3e7', 0.00085);\n\n        // Set camera position for original map\n        camera.position.set(0, 20, 100);\n        camera.updateProjectionMatrix();\n\n        return () => {\n            // Cleanup if needed when map is unmounted\n        };\n    }, [scene, camera]);\n\n    // Sky attributes for original map\n    const skyProps = useMemo(() => ({\n        distance: 450000,\n        sunPosition: [0, 1, 0],\n        inclination: 0.5,\n        azimuth: 0.25\n    }), []);\n\n    return (\n        <>\n            {/* Environmental lighting */}\n            <Environment preset=\"sunset\" />\n\n            {/* Sky */}\n            <Sky\n                distance={skyProps.distance}\n                sunPosition={skyProps.sunPosition}\n                inclination={skyProps.inclination}\n                azimuth={skyProps.azimuth}\n            />\n\n            {/* Directional light */}\n            <directionalLight\n                position={[50, 50, 25]}\n                intensity={1.5}\n                shadow-mapSize={[2048, 2048]}\n                shadow-camera-left={-1000}\n                shadow-camera-right={1000}\n                shadow-camera-top={1000}\n                shadow-camera-bottom={-1000}\n                shadow-camera-near={0.1}\n                shadow-camera-far={2000}\n            />\n\n            {/* Ambient light */}\n            <ambientLight intensity={0.2} />\n\n            {/* Original terrain */}\n            <OriginalTerrain />\n\n            {/* Road network */}\n            <Road mapType=\"original\" />\n\n            {/* Environment objects specific to original map */}\n            <OriginalEnvironmentObjects />\n\n            {/* Vehicles and game elements that are common across maps */}\n            <VehiclesOnRoad />\n            <DroneSwitcher />\n            <ExplosionsManager />\n            <ShotgunEffectsManager />\n            <DamageIndicatorsManager />\n            <VehicleSelector />\n        </>\n    );\n} ","import React, { useMemo, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { useFrame } from '@react-three/fiber';\r\n\r\n// Constants for desert terrain configuration\r\nexport const DESERT_TERRAIN_SIZE = 2000; // 2000m x 2000m\r\nconst CHUNK_SIZE = 205; // Increased from 200 to add slight overlap\r\nconst OVERLAP_FACTOR = 5; // 5 units of overlap between chunks\r\n\r\nexport default function DesertTerrain() {\r\n    // Calculate chunks count\r\n    const terrainSize = DESERT_TERRAIN_SIZE;\r\n    const chunksCount = useMemo(() => {\r\n        const count = Math.ceil(terrainSize / (CHUNK_SIZE - OVERLAP_FACTOR));\r\n        return { x: count, z: count };\r\n    }, [terrainSize]);\r\n\r\n    const SEGMENTS = 200; // Segment resolution for the entire terrain\r\n    const segmentsPerChunk = useMemo(() => ({\r\n        x: Math.floor(SEGMENTS / chunksCount.x),\r\n        z: Math.floor(SEGMENTS / chunksCount.z)\r\n    }), [chunksCount]);\r\n\r\n    // Add some noise to the terrain to create sand dune effect\r\n    const planeGeometry = useMemo(() => {\r\n        const geometry = new THREE.PlaneGeometry(\r\n            CHUNK_SIZE,\r\n            CHUNK_SIZE,\r\n            segmentsPerChunk.x,\r\n            segmentsPerChunk.z\r\n        );\r\n\r\n        // Create sand dune effect by adding subtle height variation\r\n        // This creates the appearance of rolling sand dunes\r\n        const vertices = geometry.attributes.position.array;\r\n        for (let i = 0; i < vertices.length; i += 3) {\r\n            const x = vertices[i];\r\n            const z = vertices[i + 2];\r\n\r\n            // Create sand dune effect\r\n            const noise1 = Math.sin(x * 0.05) * Math.cos(z * 0.05) * 2;\r\n            const noise2 = Math.sin(x * 0.1 + 0.3) * Math.sin(z * 0.1 + 0.1) * 1.5;\r\n            const noise3 = Math.cos(x * 0.2 + 1.1) * Math.sin(z * 0.15 + 0.5) * 1;\r\n\r\n            // Apply smoother, more rounded dunes for a desert\r\n            vertices[i + 1] = noise1 + noise2 + noise3;\r\n        }\r\n\r\n        // Update normals for proper lighting\r\n        geometry.computeVertexNormals();\r\n\r\n        return geometry;\r\n    }, [segmentsPerChunk]);\r\n\r\n    // Sandy material for desert terrain\r\n    const planeMaterial = useMemo(() => {\r\n        return new THREE.MeshStandardMaterial({\r\n            color: '#DEB887', // Sandy color\r\n            roughness: 0.9,\r\n            metalness: 0.05,\r\n            flatShading: false // Disable for smoother appearance\r\n        });\r\n    }, []);\r\n\r\n    // Use instanced mesh for efficient rendering of multiple chunks\r\n    const instancedMeshRef = useRef();\r\n    const tempObject = useMemo(() => new THREE.Object3D(), []);\r\n\r\n    // Create the chunks based on the terrain size\r\n    const chunks = useMemo(() => {\r\n        const result = [];\r\n        const halfSize = terrainSize / 2;\r\n        const chunkOffset = (CHUNK_SIZE - OVERLAP_FACTOR) / 2;\r\n\r\n        for (let x = 0; x < chunksCount.x; x++) {\r\n            for (let z = 0; z < chunksCount.z; z++) {\r\n                result.push({\r\n                    position: [\r\n                        -halfSize + x * (CHUNK_SIZE - OVERLAP_FACTOR) + chunkOffset,\r\n                        0,\r\n                        -halfSize + z * (CHUNK_SIZE - OVERLAP_FACTOR) + chunkOffset\r\n                    ],\r\n                    rotation: [-Math.PI / 2, 0, 0] // Rotate to make it horizontal\r\n                });\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }, [terrainSize, chunksCount]);\r\n\r\n    // Setup the instanced mesh on the first render\r\n    useFrame(() => {\r\n        if (instancedMeshRef.current) {\r\n            chunks.forEach((chunk, i) => {\r\n                const [x, y, z] = chunk.position;\r\n                const [rx, ry, rz] = chunk.rotation;\r\n\r\n                tempObject.position.set(x, y, z);\r\n                tempObject.rotation.set(rx, ry, rz);\r\n                tempObject.updateMatrix();\r\n\r\n                instancedMeshRef.current.setMatrixAt(i, tempObject.matrix);\r\n            });\r\n\r\n            instancedMeshRef.current.instanceMatrix.needsUpdate = true;\r\n\r\n            // Only need to run this once to set up the instances\r\n            return null;\r\n        }\r\n    }, [chunks]);\r\n\r\n    return (\r\n        <instancedMesh\r\n            ref={instancedMeshRef}\r\n            args={[planeGeometry, planeMaterial, chunks.length]}\r\n            receiveShadow\r\n        />\r\n    );\r\n} ","import React, { useMemo, useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { useFrame, useThree } from '@react-three/fiber';\r\nimport { DESERT_TERRAIN_SIZE } from '../terrain/DesertTerrain';\r\n\r\n// Constants for desert environment objects\r\nconst ROAD_WIDTH = 140;\r\nconst ROAD_SPACING = 300;\r\nconst MIN_SCALE = 1.2;\r\nconst MAX_SCALE = 1.8;\r\n\r\n// Tree type definitions\r\nconst TREE_TYPES = {\r\n    PINE: 'pine',\r\n    OAK: 'oak',\r\n    PALM: 'palm',\r\n    BIRCH: 'birch'\r\n};\r\n\r\n// Spatial hash grid for efficient object placement\r\nclass SpatialHashGrid {\r\n    constructor(bounds, dimensions) {\r\n        this.bounds = bounds;\r\n        this.dimensions = dimensions;\r\n        this.cells = {};\r\n    }\r\n\r\n    // Calculate the cell coordinates for a position\r\n    getCell(position) {\r\n        const { min, max } = this.bounds;\r\n        const cellX = Math.floor((position.x - min.x) / (max.x - min.x) * this.dimensions.x);\r\n        const cellZ = Math.floor((position.z - min.z) / (max.z - min.z) * this.dimensions.z);\r\n        return { x: cellX, z: cellZ };\r\n    }\r\n\r\n    // Get cell key for hashing\r\n    getCellKey(cell) {\r\n        return `${cell.x},${cell.z}`;\r\n    }\r\n\r\n    // Add object to grid\r\n    insert(position, object) {\r\n        const cell = this.getCell(position);\r\n        const key = this.getCellKey(cell);\r\n\r\n        if (!this.cells[key]) {\r\n            this.cells[key] = [];\r\n        }\r\n        this.cells[key].push({ position, object });\r\n    }\r\n\r\n    // Find objects near a position\r\n    query(position, radius) {\r\n        const result = [];\r\n        const center = this.getCell(position);\r\n\r\n        // Calculate how many cells we need to check based on radius\r\n        const cellRadius = Math.ceil(radius / Math.min(\r\n            (this.bounds.max.x - this.bounds.min.x) / this.dimensions.x,\r\n            (this.bounds.max.z - this.bounds.min.z) / this.dimensions.z\r\n        ));\r\n\r\n        // Check all cells within cell radius\r\n        for (let x = -cellRadius; x <= cellRadius; x++) {\r\n            for (let z = -cellRadius; z <= cellRadius; z++) {\r\n                const cell = { x: center.x + x, z: center.z + z };\r\n                const key = this.getCellKey(cell);\r\n\r\n                if (this.cells[key]) {\r\n                    for (const item of this.cells[key]) {\r\n                        const dx = item.position.x - position.x;\r\n                        const dz = item.position.z - position.z;\r\n                        const distance = Math.sqrt(dx * dx + dz * dz);\r\n\r\n                        if (distance <= radius) {\r\n                            result.push(item.object);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// Generate a deterministic random number based on seed\r\nfunction seededRandom(seed) {\r\n    const x = Math.sin(seed) * 10000;\r\n    return x - Math.floor(x);\r\n}\r\n\r\n// Generate desert environment objects with a focus on arid landscape\r\nexport default function DesertEnvironmentObjects() {\r\n    const terrainSize = DESERT_TERRAIN_SIZE;\r\n    const seed = 54321; // Different seed for desert to ensure a different layout\r\n\r\n    // Setup spatial grid\r\n    const halfWidth = terrainSize / 2;\r\n    const halfHeight = terrainSize / 2;\r\n\r\n    // Use a fixed seed for deterministic generation\r\n    const { trees, rocks, bushes, cacti, largeBush } = useMemo(() => {\r\n        // Initialize spatial hash grid for position checking\r\n        const bounds = {\r\n            min: { x: -halfWidth, z: -halfHeight },\r\n            max: { x: halfWidth, z: halfHeight }\r\n        };\r\n        const grid = new SpatialHashGrid(bounds, { x: 20, z: 20 });\r\n\r\n        // Check if a position is on the road\r\n        const isOnRoad = (x, z) => {\r\n            return (\r\n                Math.abs(z - ROAD_SPACING / 2) < ROAD_WIDTH / 2 ||\r\n                Math.abs(z + ROAD_SPACING / 2) < ROAD_WIDTH / 2\r\n            );\r\n        };\r\n\r\n        // Generate fixed positions for each object type with spatial constraints\r\n        const trees = { pine: [], oak: [], palm: [], birch: [] };\r\n        const rocks = [];\r\n        const bushes = [];\r\n        const cacti = [];\r\n\r\n        // Minimum required distance between objects to avoid overlapping\r\n        const MIN_DISTANCE = 12;\r\n\r\n        // Function to check if position is valid (not on road, not too close to other objects)\r\n        const isPositionValid = (x, z, radius) => {\r\n            if (isOnRoad(x, z)) return false;\r\n\r\n            // Add a safety margin around roads\r\n            const roadMargin = 10;\r\n            if (\r\n                Math.abs(z - ROAD_SPACING / 2) < (ROAD_WIDTH / 2) + roadMargin ||\r\n                Math.abs(z + ROAD_SPACING / 2) < (ROAD_WIDTH / 2) + roadMargin\r\n            ) {\r\n                return false;\r\n            }\r\n\r\n            // Check spatial grid for nearby objects\r\n            const pos = { x, z };\r\n            const nearby = grid.query(pos, radius);\r\n            return nearby.length === 0;\r\n        };\r\n\r\n        // Function to add an object at a valid position with deterministic randomness\r\n        const addObject = (collection, objectType, baseIndex, count, minDistance) => {\r\n            for (let i = 0; i < count; i++) {\r\n                const seedValue = seed + baseIndex + i;\r\n\r\n                // Use deterministic random values\r\n                const randX = seededRandom(seedValue * 1.1);\r\n                const randZ = seededRandom(seedValue * 2.3);\r\n                const randScale = seededRandom(seedValue * 3.7);\r\n                const randRotation = seededRandom(seedValue * 4.5);\r\n                const randType = Math.floor(seededRandom(seedValue * 5.9) * 4);\r\n\r\n                // Calculate position using deterministic randomness\r\n                const x = randX * terrainSize - halfWidth;\r\n                const z = randZ * terrainSize - halfHeight;\r\n\r\n                // Skip if position is invalid (deterministic skipping)\r\n                if (!isPositionValid(x, z, minDistance)) continue;\r\n\r\n                // Create object with properties\r\n                const scale = MIN_SCALE + randScale * (MAX_SCALE - MIN_SCALE);\r\n                const rotation = randRotation * Math.PI * 2;\r\n                const position = new THREE.Vector3(x, 0, z);\r\n\r\n                const object = {\r\n                    position: [x, 0, z],\r\n                    scale,\r\n                    rotation,\r\n                    type: randType\r\n                };\r\n\r\n                // Add to collection based on object type\r\n                if (objectType === 'tree') {\r\n                    const treeTypeName = Object.values(TREE_TYPES)[randType];\r\n                    trees[treeTypeName].push(object);\r\n                } else if (objectType === 'rock') {\r\n                    rocks.push(object);\r\n                } else if (objectType === 'bush') {\r\n                    bushes.push(object);\r\n                } else if (objectType === 'cactus') {\r\n                    cacti.push(object);\r\n                }\r\n\r\n                // Insert into spatial grid\r\n                grid.insert({ x, z }, object);\r\n            }\r\n        };\r\n\r\n        // Setup desert environment with fewer trees, more rocks and cacti\r\n        const treeCount = 80;      // Very few trees in desert\r\n        const rockCount = 300;     // Many rocks in desert\r\n        const bushCount = 100;     // Fewer bushes, more sparse\r\n        const cactusCount = 150;   // Add cacti for desert theme\r\n\r\n        // Generate fixed number of objects with deterministic positioning\r\n        addObject(trees, 'tree', 0, treeCount, MIN_DISTANCE);\r\n        addObject(rocks, 'rock', 10000, rockCount, MIN_DISTANCE / 3);\r\n        addObject(bushes, 'bush', 20000, bushCount, MIN_DISTANCE / 3);\r\n        addObject(cacti, 'cactus', 30000, cactusCount, MIN_DISTANCE);\r\n\r\n        // Special large rock formation (instead of a bush) for desert theme\r\n        const specialSeed = seed * 9876;\r\n        const specialX = seededRandom(specialSeed) * terrainSize - halfWidth;\r\n        const specialZ = seededRandom(specialSeed + 100) * terrainSize - halfHeight;\r\n\r\n        let largeBush = null;\r\n        if (!isOnRoad(specialX, specialZ)) {\r\n            largeBush = {\r\n                position: [specialX, 0, specialZ],\r\n                scale: 4.0,\r\n                rotation: seededRandom(specialSeed + 200) * Math.PI * 2\r\n            };\r\n        }\r\n\r\n        return { trees, rocks, bushes, cacti, largeBush };\r\n    }, [halfWidth, halfHeight, terrainSize]);\r\n\r\n    const { camera } = useThree();\r\n\r\n    // References to our instanced meshes\r\n    const treeRefs = {\r\n        pine: { trunk: useRef(), foliage: useRef() },\r\n        oak: { trunk: useRef(), foliage: useRef() },\r\n        palm: { trunk: useRef(), foliage: useRef() },\r\n        birch: { trunk: useRef(), foliage: useRef() }\r\n    };\r\n\r\n    const rocksRef = useRef();\r\n    const bushesRef = useRef();\r\n    const cactiRef = useRef();\r\n    const largeBushRef = useRef();\r\n\r\n    // Create a frustum for culling\r\n    const frustum = useMemo(() => new THREE.Frustum(), []);\r\n    const projScreenMatrix = useMemo(() => new THREE.Matrix4(), []);\r\n    const tempObject = useMemo(() => new THREE.Object3D(), []);\r\n\r\n    // Materials for desert environment - dry, pale colors\r\n    const treeMaterials = useMemo(() => ({\r\n        pine: {\r\n            trunk: new THREE.MeshStandardMaterial({\r\n                color: '#8B4513',\r\n                roughness: 0.9,\r\n                flatShading: true\r\n            }),\r\n            foliage: new THREE.MeshStandardMaterial({\r\n                color: '#8B8B65', // Pale olive\r\n                roughness: 0.8,\r\n                flatShading: true\r\n            })\r\n        },\r\n        oak: {\r\n            trunk: new THREE.MeshStandardMaterial({\r\n                color: '#654321',\r\n                roughness: 0.9,\r\n                flatShading: true\r\n            }),\r\n            foliage: new THREE.MeshStandardMaterial({\r\n                color: '#9B9B65', // Pale brown-green\r\n                roughness: 0.8,\r\n                flatShading: true\r\n            })\r\n        },\r\n        palm: {\r\n            trunk: new THREE.MeshStandardMaterial({\r\n                color: '#A0522D',\r\n                roughness: 0.8,\r\n                flatShading: true\r\n            }),\r\n            foliage: new THREE.MeshStandardMaterial({\r\n                color: '#A8C27D', // Pale green\r\n                roughness: 0.9,\r\n                flatShading: true\r\n            })\r\n        },\r\n        birch: {\r\n            trunk: new THREE.MeshStandardMaterial({\r\n                color: '#F5F5DC',\r\n                roughness: 0.7,\r\n                flatShading: true\r\n            }),\r\n            foliage: new THREE.MeshStandardMaterial({\r\n                color: '#D3D3A4', // Pale yellow-green\r\n                roughness: 0.8,\r\n                flatShading: true\r\n            })\r\n        }\r\n    }), []);\r\n\r\n    // Desert rocks - more reddish-orange\r\n    const rockMaterial = useMemo(() =>\r\n        new THREE.MeshStandardMaterial({\r\n            color: '#B8860B', // Dark goldenrod\r\n            roughness: 1.0,\r\n            flatShading: true\r\n        }),\r\n        []);\r\n\r\n    // Desert bushes - dried out\r\n    const bushMaterial = useMemo(() =>\r\n        new THREE.MeshStandardMaterial({\r\n            color: '#8B8B6A', // Dried beige-green\r\n            roughness: 0.9,\r\n            flatShading: true\r\n        }),\r\n        []);\r\n\r\n    // Cactus material\r\n    const cactusMaterial = useMemo(() =>\r\n        new THREE.MeshStandardMaterial({\r\n            color: '#4C7F50', // Cactus green\r\n            roughness: 0.8,\r\n            flatShading: true\r\n        }),\r\n        []);\r\n\r\n    // Create optimized geometries\r\n    const rockGeometry = useMemo(() => new THREE.IcosahedronGeometry(1, 0), []);\r\n    const bushGeometry = useMemo(() => new THREE.SphereGeometry(2, 6, 4), []);\r\n    const cactusGeometry = useMemo(() => new THREE.CylinderGeometry(0.8, 1.2, 5, 8, 4), []);\r\n\r\n    // Tree dimension presets\r\n    const treeDimensions = useMemo(() => ({\r\n        pine: {\r\n            trunkHeight: 4.8,\r\n            trunkRadius: 0.75,\r\n            foliageOffset: 4.8\r\n        },\r\n        oak: {\r\n            trunkHeight: 4.5,\r\n            trunkRadius: 0.975,\r\n            foliageOffset: 3\r\n        },\r\n        palm: {\r\n            trunkHeight: 7.5,\r\n            trunkRadius: 0.525,\r\n            foliageOffset: 7.5\r\n        },\r\n        birch: {\r\n            trunkHeight: 6.75,\r\n            trunkRadius: 0.4875,\r\n            foliageOffset: 4.5\r\n        }\r\n    }), []);\r\n\r\n    // Create simplified LOD geometries\r\n    const treeGeometries = useMemo(() => {\r\n        // Create high detail geometries\r\n        const highDetail = {\r\n            pine: {\r\n                trunk: new THREE.CylinderGeometry(0.6, 0.75, 4.8, 8, 3),\r\n                foliage: new THREE.ConeGeometry(3, 9.6, 8, 4)\r\n            },\r\n            oak: {\r\n                trunk: new THREE.CylinderGeometry(0.9, 1.05, 4.5, 10, 4),\r\n                foliage: new THREE.SphereGeometry(3.75, 12, 10)\r\n            },\r\n            palm: {\r\n                trunk: new THREE.CylinderGeometry(0.45, 0.6, 7.5, 8, 5),\r\n                foliage: new THREE.DodecahedronGeometry(3.75, 1)\r\n            },\r\n            birch: {\r\n                trunk: new THREE.CylinderGeometry(0.45, 0.53, 6.75, 9, 4),\r\n                foliage: new THREE.OctahedronGeometry(3, 2)\r\n            }\r\n        };\r\n\r\n        // Create low detail geometries\r\n        const lowDetail = {\r\n            pine: {\r\n                trunk: new THREE.CylinderGeometry(0.6, 0.75, 4.8, 4, 1),\r\n                foliage: new THREE.ConeGeometry(3, 9.6, 5, 1)\r\n            },\r\n            oak: {\r\n                trunk: new THREE.CylinderGeometry(0.9, 1.05, 4.5, 6, 1),\r\n                foliage: new THREE.SphereGeometry(3.75, 6, 4)\r\n            },\r\n            palm: {\r\n                trunk: new THREE.CylinderGeometry(0.45, 0.6, 7.5, 4, 1),\r\n                foliage: new THREE.DodecahedronGeometry(3.75, 0)\r\n            },\r\n            birch: {\r\n                trunk: new THREE.CylinderGeometry(0.45, 0.53, 6.75, 5, 1),\r\n                foliage: new THREE.OctahedronGeometry(3, 0)\r\n            }\r\n        };\r\n\r\n        return { highDetail, lowDetail };\r\n    }, []);\r\n\r\n    // Setup instanced mesh matrices\r\n    useEffect(() => {\r\n        // Setup trees for each type with proper positioning\r\n        Object.entries(trees).forEach(([treeType, positions]) => {\r\n            if (!positions.length) return;\r\n\r\n            const {\r\n                trunkHeight,\r\n                trunkRadius,\r\n                foliageOffset\r\n            } = treeDimensions[treeType];\r\n\r\n            // Setup trunk matrices\r\n            const trunkRef = treeRefs[treeType].trunk;\r\n            if (trunkRef.current && positions.length > 0) {\r\n                positions.forEach((tree, i) => {\r\n                    const [x, y, z] = tree.position;\r\n                    const scale = tree.scale;\r\n\r\n                    const scaledTrunkHeight = trunkHeight * scale;\r\n                    const trunkY = scaledTrunkHeight / 2;\r\n\r\n                    tempObject.position.set(x, trunkY, z);\r\n                    tempObject.rotation.set(0, tree.rotation, 0);\r\n                    tempObject.scale.set(scale, scale, scale);\r\n                    tempObject.updateMatrix();\r\n\r\n                    trunkRef.current.setMatrixAt(i, tempObject.matrix);\r\n                });\r\n                trunkRef.current.instanceMatrix.needsUpdate = true;\r\n                trunkRef.current.computeBoundingSphere();\r\n                if (trunkRef.current.boundingSphere) {\r\n                    trunkRef.current.boundingSphere.radius *= 1.5;\r\n                }\r\n            }\r\n\r\n            // Setup foliage matrices\r\n            const foliageRef = treeRefs[treeType].foliage;\r\n            if (foliageRef.current && positions.length > 0) {\r\n                positions.forEach((tree, i) => {\r\n                    const [x, y, z] = tree.position;\r\n                    const scale = tree.scale;\r\n\r\n                    // Scale foliage position\r\n                    const scaledFoliageOffset = foliageOffset * scale;\r\n\r\n                    // Determine foliage position based on tree type\r\n                    let foliageY;\r\n                    switch (treeType) {\r\n                        case 'pine':\r\n                            foliageY = scaledFoliageOffset + (4.8 * scale);\r\n                            break;\r\n                        case 'birch':\r\n                            foliageY = scaledFoliageOffset + (2.25 * scale);\r\n                            break;\r\n                        case 'oak':\r\n                        case 'palm':\r\n                        default:\r\n                            foliageY = scaledFoliageOffset + (1.5 * scale);\r\n                    }\r\n\r\n                    tempObject.position.set(x, foliageY, z);\r\n                    tempObject.rotation.set(0, tree.rotation, 0);\r\n                    tempObject.scale.setScalar(scale);\r\n                    tempObject.updateMatrix();\r\n\r\n                    foliageRef.current.setMatrixAt(i, tempObject.matrix);\r\n                });\r\n                foliageRef.current.instanceMatrix.needsUpdate = true;\r\n                foliageRef.current.computeBoundingSphere();\r\n                if (foliageRef.current.boundingSphere) {\r\n                    foliageRef.current.boundingSphere.radius *= 1.5;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Setup rocks\r\n        if (rocksRef.current && rocks.length > 0) {\r\n            rocks.forEach((rock, i) => {\r\n                const [x, y, z] = rock.position;\r\n                const scale = rock.scale;\r\n                const objectY = 0.5 * scale;\r\n\r\n                tempObject.position.set(x, objectY, z);\r\n                tempObject.rotation.set(0, rock.rotation, 0);\r\n                tempObject.scale.setScalar(scale);\r\n                tempObject.updateMatrix();\r\n\r\n                rocksRef.current.setMatrixAt(i, tempObject.matrix);\r\n            });\r\n            rocksRef.current.instanceMatrix.needsUpdate = true;\r\n            rocksRef.current.computeBoundingSphere();\r\n            if (rocksRef.current.boundingSphere) {\r\n                rocksRef.current.boundingSphere.radius *= 1.5;\r\n            }\r\n        }\r\n\r\n        // Setup bushes\r\n        if (bushesRef.current && bushes.length > 0) {\r\n            bushes.forEach((bush, i) => {\r\n                const [x, y, z] = bush.position;\r\n                const scale = bush.scale;\r\n                const objectY = 2 * scale * 0.5;\r\n\r\n                tempObject.position.set(x, objectY, z);\r\n                tempObject.rotation.set(0, bush.rotation, 0);\r\n                tempObject.scale.setScalar(scale);\r\n                tempObject.updateMatrix();\r\n\r\n                bushesRef.current.setMatrixAt(i, tempObject.matrix);\r\n            });\r\n            bushesRef.current.instanceMatrix.needsUpdate = true;\r\n            bushesRef.current.computeBoundingSphere();\r\n            if (bushesRef.current.boundingSphere) {\r\n                bushesRef.current.boundingSphere.radius *= 1.5;\r\n            }\r\n        }\r\n\r\n        // Setup cacti\r\n        if (cactiRef.current && cacti.length > 0) {\r\n            cacti.forEach((cactus, i) => {\r\n                const [x, y, z] = cactus.position;\r\n                const scale = cactus.scale;\r\n                const objectY = 2.5 * scale;\r\n\r\n                tempObject.position.set(x, objectY, z);\r\n                tempObject.rotation.set(0, cactus.rotation, 0);\r\n                tempObject.scale.setScalar(scale);\r\n                tempObject.updateMatrix();\r\n\r\n                cactiRef.current.setMatrixAt(i, tempObject.matrix);\r\n            });\r\n            cactiRef.current.instanceMatrix.needsUpdate = true;\r\n            cactiRef.current.computeBoundingSphere();\r\n            if (cactiRef.current.boundingSphere) {\r\n                cactiRef.current.boundingSphere.radius *= 1.5;\r\n            }\r\n        }\r\n\r\n        // Setup large bush/rock\r\n        if (largeBushRef.current && largeBush) {\r\n            const [x, y, z] = largeBush.position;\r\n            const scale = largeBush.scale;\r\n            const objectY = 2 * scale * 0.5;\r\n\r\n            tempObject.position.set(x, objectY, z);\r\n            tempObject.rotation.set(0, largeBush.rotation, 0);\r\n            tempObject.scale.setScalar(scale);\r\n            tempObject.updateMatrix();\r\n\r\n            largeBushRef.current.matrix.copy(tempObject.matrix);\r\n            largeBushRef.current.matrixAutoUpdate = false;\r\n            // Regular meshes don't have computeBoundingSphere method\r\n            // Create a manual bounding sphere for distance checks\r\n            if (!largeBushRef.current.boundingSphere) {\r\n                largeBushRef.current.boundingSphere = new THREE.Sphere(\r\n                    new THREE.Vector3(x, objectY, z),\r\n                    2 * scale // Approximate radius based on scale\r\n                );\r\n            }\r\n        }\r\n    }, [trees, rocks, bushes, cacti, largeBush, treeDimensions, tempObject]);\r\n\r\n    // Distance-based culling for performance\r\n    useFrame(({ camera }) => {\r\n        const cameraPosition = camera.position;\r\n        const FAR_DISTANCE = 1000;\r\n        const MID_DISTANCE = 500;\r\n\r\n        // Apply culling for trees\r\n        Object.entries(treeRefs).forEach(([treeType, refs]) => {\r\n            if (!refs.trunk.current || !refs.trunk.current.boundingSphere ||\r\n                !refs.foliage.current || !refs.foliage.current.boundingSphere) {\r\n                return;\r\n            }\r\n\r\n            const trunkDistance = refs.trunk.current.boundingSphere.center.distanceTo(cameraPosition);\r\n            const foliageDistance = refs.foliage.current.boundingSphere.center.distanceTo(cameraPosition);\r\n\r\n            refs.trunk.current.visible = (trunkDistance < FAR_DISTANCE);\r\n            refs.foliage.current.visible = (foliageDistance < FAR_DISTANCE);\r\n        });\r\n\r\n        // Apply culling for rocks and bushes\r\n        if (rocksRef.current && rocksRef.current.boundingSphere) {\r\n            const rocksDistance = rocksRef.current.boundingSphere.center.distanceTo(cameraPosition);\r\n            rocksRef.current.visible = (rocksDistance < FAR_DISTANCE);\r\n        }\r\n\r\n        if (bushesRef.current && bushesRef.current.boundingSphere) {\r\n            const bushesDistance = bushesRef.current.boundingSphere.center.distanceTo(cameraPosition);\r\n            bushesRef.current.visible = (bushesDistance < FAR_DISTANCE);\r\n        }\r\n\r\n        // Apply culling for cacti\r\n        if (cactiRef.current && cactiRef.current.boundingSphere) {\r\n            const cactiDistance = cactiRef.current.boundingSphere.center.distanceTo(cameraPosition);\r\n            cactiRef.current.visible = (cactiDistance < FAR_DISTANCE);\r\n        }\r\n\r\n        // Large bush/rock - individual mesh\r\n        if (largeBushRef.current && largeBushRef.current.boundingSphere) {\r\n            const largeDistance = largeBushRef.current.boundingSphere.center.distanceTo(cameraPosition);\r\n            largeBushRef.current.visible = (largeDistance < FAR_DISTANCE);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <group>\r\n            {/* All tree types with proper culling */}\r\n            {Object.entries(trees).map(([treeType, positions]) => {\r\n                if (!positions.length) return null;\r\n\r\n                // Get tree geometries\r\n                const highGeo = treeGeometries.highDetail[treeType];\r\n                const treeMat = treeMaterials[treeType];\r\n\r\n                return (\r\n                    <group key={treeType}>\r\n                        <instancedMesh\r\n                            ref={treeRefs[treeType].trunk}\r\n                            args={[null, null, positions.length]}\r\n                            frustumCulled={true}\r\n                        >\r\n                            <primitive object={highGeo.trunk} />\r\n                            <primitive object={treeMat.trunk} />\r\n                        </instancedMesh>\r\n\r\n                        <instancedMesh\r\n                            ref={treeRefs[treeType].foliage}\r\n                            args={[null, null, positions.length]}\r\n                            frustumCulled={true}\r\n                        >\r\n                            <primitive object={highGeo.foliage} />\r\n                            <primitive object={treeMat.foliage} />\r\n                        </instancedMesh>\r\n                    </group>\r\n                );\r\n            })}\r\n\r\n            {/* Rocks with instanced mesh */}\r\n            <instancedMesh\r\n                ref={rocksRef}\r\n                args={[rockGeometry, rockMaterial, rocks.length]}\r\n                frustumCulled={true}\r\n            />\r\n\r\n            {/* Bushes with instanced mesh */}\r\n            <instancedMesh\r\n                ref={bushesRef}\r\n                args={[bushGeometry, bushMaterial, bushes.length]}\r\n                frustumCulled={true}\r\n            />\r\n\r\n            {/* Cacti with instanced mesh */}\r\n            <instancedMesh\r\n                ref={cactiRef}\r\n                args={[cactusGeometry, cactusMaterial, cacti.length]}\r\n                frustumCulled={true}\r\n            />\r\n\r\n            {/* Special Large Rock Formation */}\r\n            {largeBush && (\r\n                <mesh\r\n                    ref={largeBushRef}\r\n                    frustumCulled={true}\r\n                >\r\n                    <sphereGeometry args={[2, 10, 8]} />\r\n                    <meshStandardMaterial\r\n                        color=\"#8B8B6A\"\r\n                        roughness={0.9}\r\n                        metalness={0.05}\r\n                        flatShading={true}\r\n                    />\r\n                </mesh>\r\n            )}\r\n        </group>\r\n    );\r\n} ","import React, { useEffect, useMemo } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { Environment, Sky } from '@react-three/drei';\nimport { FogExp2 } from 'three';\nimport DesertTerrain from './terrain/DesertTerrain';\nimport Road from '../Road';\nimport DesertEnvironmentObjects from './objects/DesertEnvironmentObjects';\nimport DroneSwitcher from '../DroneSwitcher';\nimport VehiclesOnRoad from '../VehiclesOnRoad';\nimport ExplosionsManager from '../effects/ExplosionsManager';\nimport ShotgunEffectsManager from '../effects/ShotgunEffectsManager';\nimport { DamageIndicatorsManager } from '../effects/DamageIndicator';\nimport VehicleSelector from '../VehicleSelector';\n\n// DesertMap - A sandy, arid desert with sparse vegetation, cacti, and more rocks\nexport default function DesertMap() {\n    const { scene, camera } = useThree();\n\n    useEffect(() => {\n        // Create dusty exponential fog for the desert map\n        scene.fog = new FogExp2('#e6d9c9', 0.0009);\n\n        // Set camera position for desert map\n        camera.position.set(0, 25, 90);\n        camera.updateProjectionMatrix();\n\n        return () => {\n            // Cleanup if needed when map is unmounted\n        };\n    }, [scene, camera]);\n\n    // Sky attributes for desert map - more orange/yellow tones\n    const skyProps = useMemo(() => ({\n        distance: 450000,\n        sunPosition: [0.5, 0.8, 0],\n        inclination: 0.6,\n        azimuth: 0.35\n    }), []);\n\n    return (\n        <>\n            {/* Environmental lighting */}\n            <Environment preset=\"sunset\" />\n\n            {/* Sky with desert atmosphere */}\n            <Sky\n                distance={skyProps.distance}\n                sunPosition={skyProps.sunPosition}\n                inclination={skyProps.inclination}\n                azimuth={skyProps.azimuth}\n            />\n\n            {/* Directional light - stronger in desert */}\n            <directionalLight\n                position={[50, 50, 25]}\n                intensity={1.8}\n                shadow-mapSize={[2048, 2048]}\n                shadow-camera-left={-1000}\n                shadow-camera-right={1000}\n                shadow-camera-top={1000}\n                shadow-camera-bottom={-1000}\n                shadow-camera-near={0.1}\n                shadow-camera-far={2000}\n            />\n\n            {/* Ambient light */}\n            <ambientLight intensity={0.15} />\n\n            {/* Desert terrain */}\n            <DesertTerrain />\n\n            {/* Road network */}\n            <Road mapType=\"desert\" />\n\n            {/* Environment objects specific to desert map */}\n            <DesertEnvironmentObjects />\n\n            {/* Vehicles and game elements that are common across maps */}\n            <VehiclesOnRoad />\n            <DroneSwitcher />\n            <ExplosionsManager />\n            <ShotgunEffectsManager />\n            <DamageIndicatorsManager />\n            <VehicleSelector />\n        </>\n    );\n} ","import React from 'react';\r\nimport { useMapStore } from '../utils/MapStore';\r\nimport OriginalMap from './maps/OriginalMap';\r\nimport DesertMap from './maps/DesertMap';\r\n\r\n// This component handles loading the appropriate map based on the current selection\r\nconst MapContainer = () => {\r\n    const { currentMapType } = useMapStore();\r\n\r\n    // Render a different map component based on the selected map type\r\n    const renderMap = () => {\r\n        switch (currentMapType) {\r\n            case 'desert':\r\n                return <DesertMap />;\r\n            case 'original':\r\n            default:\r\n                return <OriginalMap />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {renderMap()}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MapContainer; ","import React from 'react';\nimport MapContainer from './MapContainer';\nimport VehicleSelector from './VehicleSelector';\n\nexport default function Scene({ onSelectVehicle }) {\n    return (\n        <>\n            {/* MapContainer loads the appropriate map based on the current selection */}\n            <MapContainer />\n\n            {/* Vehicle selection system (no UI rendering) */}\n            <VehicleSelector onSelectVehicle={onSelectVehicle} />\n        </>\n    );\n} ","import React, { useEffect } from 'react';\nimport { useKeyboardControls } from '@react-three/drei';\nimport { useDrones, DRONE_TYPES } from '../utils/GameContext';\nimport { Controls } from './KeyboardControls';\nimport '../styles/droneSelector.css';\n\nexport default function DroneSelector() {\n    const { currentDrone, switchDrone } = useDrones();\n    const [subscribeKeys] = useKeyboardControls();\n\n    // Handle keyboard selection\n    useEffect(() => {\n        return subscribeKeys((state) => {\n            if (state[Controls.selectDrone1]) switchDrone(DRONE_TYPES.GRENADIER);\n            if (state[Controls.selectDrone2]) switchDrone(DRONE_TYPES.KAMIKAZE);\n            if (state[Controls.selectDrone3]) switchDrone(DRONE_TYPES.BOMBER);\n            if (state[Controls.selectDrone4]) switchDrone(DRONE_TYPES.PLAYER);\n        });\n    }, [subscribeKeys, switchDrone]);\n\n    return (\n        <div className=\"drone-selector\">\n            <div className=\"selector-heading\">Select Drone</div>\n            <div className=\"selector-options\">\n                <button\n                    className={`selector-button ${currentDrone === DRONE_TYPES.GRENADIER ? 'active' : ''}`}\n                    onClick={() => switchDrone(DRONE_TYPES.GRENADIER)}\n                >\n                    <div className=\"icon grenadier\">💣</div>\n                    <div>Grenadier</div>\n                    <div className=\"key-hint\">1</div>\n                </button>\n\n                <button\n                    className={`selector-button ${currentDrone === DRONE_TYPES.KAMIKAZE ? 'active' : ''}`}\n                    onClick={() => switchDrone(DRONE_TYPES.KAMIKAZE)}\n                >\n                    <div className=\"icon kamikaze\">💥</div>\n                    <div>Kamikaze</div>\n                    <div className=\"key-hint\">2</div>\n                </button>\n\n                <button\n                    className={`selector-button ${currentDrone === DRONE_TYPES.BOMBER ? 'active' : ''}`}\n                    onClick={() => switchDrone(DRONE_TYPES.BOMBER)}\n                >\n                    <div className=\"icon bomber\">✈️</div>\n                    <div>Bomber</div>\n                    <div className=\"key-hint\">3</div>\n                </button>\n\n                <button\n                    className={`selector-button ${currentDrone === DRONE_TYPES.PLAYER ? 'active' : ''}`}\n                    onClick={() => switchDrone(DRONE_TYPES.PLAYER)}\n                >\n                    <div className=\"icon player\">👤</div>\n                    <div>Player</div>\n                    <div className=\"key-hint\">4</div>\n                </button>\n            </div>\n        </div>\n    );\n} ","import React, { useState, useEffect } from 'react';\r\nimport { useVehicleHealthStore } from '../../utils/VehicleHealthSystem';\r\nimport { getWeaponName } from '../../utils/WeaponPhysics';\r\n\r\n/**\r\n * HUD component to display selected vehicle's health information\r\n */\r\nconst VehicleHealthHUD = ({ selectedVehicleId }) => {\r\n    const [healthInfo, setHealthInfo] = useState(null);\r\n    const getVehicleHealth = useVehicleHealthStore(state => state.getVehicleHealth);\r\n\r\n    // Update health info when selectedVehicleId changes\r\n    useEffect(() => {\r\n        if (!selectedVehicleId) {\r\n            setHealthInfo(null);\r\n            return;\r\n        }\r\n\r\n        // Get initial health data\r\n        updateHealthInfo();\r\n\r\n        // Set up interval to periodically update health info\r\n        const interval = setInterval(updateHealthInfo, 500);\r\n\r\n        return () => clearInterval(interval);\r\n\r\n        function updateHealthInfo() {\r\n            const health = getVehicleHealth(selectedVehicleId);\r\n            setHealthInfo(health);\r\n        }\r\n    }, [selectedVehicleId, getVehicleHealth]);\r\n\r\n    if (!healthInfo) {\r\n        return null;\r\n    }\r\n\r\n    // Calculate health percentage for display\r\n    const healthPercent = Math.floor((healthInfo.currentHealth / healthInfo.maxHealth) * 100);\r\n\r\n    // Determine color based on health level\r\n    const getHealthColor = () => {\r\n        if (healthPercent > 70) return '#44ff44'; // Green\r\n        if (healthPercent > 40) return '#ffff44'; // Yellow\r\n        if (healthPercent > 20) return '#ff8844'; // Orange\r\n        return '#ff4444'; // Red\r\n    };\r\n\r\n    // Get a description of the vehicle's status\r\n    const getStatusDescription = () => {\r\n        if (healthInfo.isDead) return 'DESTROYED';\r\n        if (healthInfo.isCritical) return 'CRITICAL';\r\n        if (healthPercent < 60) return 'DAMAGED';\r\n        return 'OPERATIONAL';\r\n    };\r\n\r\n    return (\r\n        <div className=\"vehicle-health-hud\">\r\n            <h3>Vehicle Status: {healthInfo.type.replace(/_/g, ' ').toUpperCase()}</h3>\r\n\r\n            <div className=\"health-bar-container\">\r\n                <div className=\"health-bar-label\">\r\n                    Health: {healthPercent}%\r\n                </div>\r\n                <div className=\"health-bar-outer\">\r\n                    <div\r\n                        className=\"health-bar-inner\"\r\n                        style={{\r\n                            width: `${healthPercent}%`,\r\n                            backgroundColor: getHealthColor()\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"health-status\">\r\n                    Status: {getStatusDescription()}\r\n                </div>\r\n            </div>\r\n\r\n            {healthInfo.mobilityFactor < 1 && (\r\n                <div className=\"mobility-info\">\r\n                    Mobility: {Math.floor(healthInfo.mobilityFactor * 100)}%\r\n                </div>\r\n            )}\r\n\r\n            {healthInfo.visualEffects.length > 0 && (\r\n                <div className=\"damage-effects\">\r\n                    Active Effects: {healthInfo.visualEffects.join(', ')}\r\n                </div>\r\n            )}\r\n\r\n            {healthInfo.damageLog.length > 0 && (\r\n                <div className=\"damage-log\">\r\n                    <h4>Recent Damage:</h4>\r\n                    <ul>\r\n                        {healthInfo.damageLog.slice(-3).map((event, index) => (\r\n                            <li key={index}>\r\n                                {event.weaponType ? getWeaponName(event.weaponType) : 'Unknown'} -\r\n                                {Math.floor(event.finalDamage)} damage\r\n                                {event.hitLocation && ` (${event.hitLocation})`}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VehicleHealthHUD;\r\n\r\n// CSS for the component\r\nexport const VehicleHealthHUDStyles = `\r\n  .vehicle-health-hud {\r\n    position: absolute;\r\n    bottom: 20px;\r\n    left: 20px;\r\n    background-color: rgba(0, 0, 0, 0.7);\r\n    border: 1px solid #444;\r\n    border-radius: 5px;\r\n    padding: 15px;\r\n    color: white;\r\n    font-family: 'Arial', sans-serif;\r\n    width: 300px;\r\n    z-index: 1000;\r\n  }\r\n  \r\n  .vehicle-health-hud h3 {\r\n    margin: 0 0 10px 0;\r\n    font-size: 16px;\r\n    text-transform: uppercase;\r\n    letter-spacing: 1px;\r\n  }\r\n  \r\n  .health-bar-container {\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  .health-bar-label {\r\n    margin-bottom: 5px;\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .health-bar-outer {\r\n    height: 20px;\r\n    background-color: #333;\r\n    border-radius: 10px;\r\n    overflow: hidden;\r\n  }\r\n  \r\n  .health-bar-inner {\r\n    height: 100%;\r\n    transition: width 0.3s ease, background-color 0.3s ease;\r\n  }\r\n  \r\n  .health-status {\r\n    margin-top: 5px;\r\n    font-weight: bold;\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .mobility-info {\r\n    margin-top: 8px;\r\n    font-size: 14px;\r\n    color: #ffaa00;\r\n  }\r\n  \r\n  .damage-effects {\r\n    margin-top: 8px;\r\n    font-size: 14px;\r\n    color: #ff6666;\r\n  }\r\n  \r\n  .damage-log {\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .damage-log h4 {\r\n    margin: 0 0 5px 0;\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .damage-log ul {\r\n    margin: 0;\r\n    padding: 0 0 0 20px;\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .damage-log li {\r\n    margin-bottom: 2px;\r\n  }\r\n`; ","import React from 'react';\nimport './ControlsList.css';\nimport { useDrones, DRONE_TYPES } from '../../utils/GameContext';\n\nexport default function ControlsList() {\n    const { currentDrone } = useDrones();\n\n    // Base controls always shown\n    const baseControls = [\n        { key: 'W', action: 'Move Forward' },\n        { key: 'S', action: 'Move Backward' },\n        { key: 'A', action: 'Strafe Left' },\n        { key: 'D', action: 'Strafe Right' },\n        { key: 'Q', action: 'Turn Left' },\n        { key: 'E', action: 'Turn Right' },\n        { key: 'SPACE', action: 'Move Up' },\n        { key: 'SHIFT', action: 'Move Down' },\n        { key: '1', action: 'Select Grenadier' },\n        { key: '2', action: 'Select Kamikaze' },\n        { key: '3', action: 'Select Bomber' }\n    ];\n\n    // Drone-specific controls\n    const droneSpecificControls = {\n        [DRONE_TYPES.KAMIKAZE]: [\n            { key: 'V', action: 'Toggle First Person View' },\n            { key: 'MOUSE', action: 'Control Direction (in FPV)' }\n        ],\n        [DRONE_TYPES.GRENADIER]: [],\n        [DRONE_TYPES.BOMBER]: []\n    };\n\n    // Combine base controls with drone-specific ones\n    const controls = [...baseControls, ...(droneSpecificControls[currentDrone] || [])];\n\n    return (\n        <div className=\"controls-list\">\n            <div className=\"controls-heading\">Controls</div>\n            <div className=\"controls-items\">\n                {controls.map((control, index) => (\n                    <div key={index} className=\"control-item\">\n                        <span className=\"key\">{control.key}</span>\n                        <span className=\"action\">{control.action}</span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n} ","import React, { useState, useEffect } from 'react';\nimport { useDrones, DRONE_TYPES } from '../utils/GameContext';\nimport { BomberHUD } from './drones/Bomber';\nimport { GrenadierHUD } from './drones/Grenadier';\nimport { KamikazeHUD } from './drones/Kamikaze';\n\nexport default function DroneHUDs() {\n    const { currentDrone } = useDrones();\n    const showHUD = true; // Always show HUD\n\n    // Weapon ammo states - in a real app these would be shared with the drone components\n    const [bomberAmmo, setBomberAmmo] = useState({\n        mineAmmo: 3,\n        mortarAmmo: 5,\n        rpgAmmo: 4\n    });\n\n    const [grenadierAmmo, setGrenadierAmmo] = useState({\n        shotgunAmmo: 12,\n        grenadeAmmo: 6,\n        dartAmmo: 9\n    });\n\n    // Listen for weapon-related events from window\n    useEffect(() => {\n        // Event listeners to update ammo counts\n        const handleAmmoUpdate = (e) => {\n            const { droneType, weaponType, ammoCount } = e.detail;\n\n            if (droneType === DRONE_TYPES.BOMBER) {\n                setBomberAmmo(prev => ({\n                    ...prev,\n                    [weaponType]: ammoCount\n                }));\n            } else if (droneType === DRONE_TYPES.GRENADIER) {\n                setGrenadierAmmo(prev => ({\n                    ...prev,\n                    [weaponType]: ammoCount\n                }));\n            }\n        };\n\n        window.addEventListener('ammoUpdate', handleAmmoUpdate);\n\n        return () => {\n            window.removeEventListener('ammoUpdate', handleAmmoUpdate);\n        };\n    }, []);\n\n    // Render the appropriate HUD based on the current drone\n    switch (currentDrone) {\n        case DRONE_TYPES.BOMBER:\n            return (\n                <BomberHUD\n                    mineAmmo={bomberAmmo.mineAmmo}\n                    mortarAmmo={bomberAmmo.mortarAmmo}\n                    rpgAmmo={bomberAmmo.rpgAmmo}\n                    showHUD={showHUD}\n                />\n            );\n        case DRONE_TYPES.GRENADIER:\n            return (\n                <GrenadierHUD\n                    shotgunAmmo={grenadierAmmo.shotgunAmmo}\n                    grenadeAmmo={grenadierAmmo.grenadeAmmo}\n                    dartAmmo={grenadierAmmo.dartAmmo}\n                    showHUD={showHUD}\n                />\n            );\n        case DRONE_TYPES.KAMIKAZE:\n            return (\n                <KamikazeHUD\n                    showHUD={showHUD}\n                />\n            );\n        default:\n            return null;\n    }\n} ","import React from 'react';\nimport { useMapStore } from '../utils/MapStore';\n\nconst MapSelector = () => {\n    const { currentMapType, setMapType } = useMapStore();\n\n    return (\n        <div className=\"map-selector\">\n            <button\n                className={`map-button ${currentMapType === 'original' ? 'active' : ''}`}\n                onClick={() => setMapType('original')}\n            >\n                Original Map\n            </button>\n            <button\n                className={`map-button ${currentMapType === 'desert' ? 'active' : ''}`}\n                onClick={() => setMapType('desert')}\n            >\n                Desert Map\n            </button>\n        </div>\n    );\n};\n\nexport default MapSelector; ","import React, { Suspense, useState } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { Stats } from '@react-three/drei';\nimport Scene from './components/Scene';\nimport KeyboardControls from './components/KeyboardControls';\nimport DroneSelector from './components/DroneSelector';\nimport VehicleHealthHUD from './components/ui/VehicleHealthHUD';\nimport ControlsList from './components/ui/ControlsList';\nimport DroneHUDs from './components/DroneHUDs';\nimport MapSelector from './components/MapSelector';\nimport './styles/MapSelector.css';\n\nexport default function App() {\n    // State for the selected vehicle\n    const [selectedVehicleId, setSelectedVehicleId] = useState(null);\n\n    // Shared configuration\n    const canvasConfig = {\n        shadows: true,\n        camera: { position: [0, 20, 100], fov: 50 },\n        dpr: [0.75, 1], // Lower resolution for better performance\n        onPointerMissed: () => setSelectedVehicleId(null) // Deselect when clicking empty space\n    };\n\n    return (\n        <div style={{ width: '100%', height: '100vh' }}>\n            <KeyboardControls>\n                <Canvas {...canvasConfig}>\n                    <color attach=\"background\" args={['#87CEEB']} />\n                    <fog attach=\"fog\" args={['#87CEEB', 100, 1000]} />\n\n                    <Suspense fallback={null}>\n                        <Scene onSelectVehicle={setSelectedVehicleId} />\n                    </Suspense>\n\n                    {process.env.NODE_ENV === 'development' && <Stats />}\n                </Canvas>\n\n                {/* UI Layer outside the Canvas */}\n                <div className=\"ui-layer\">\n                    <ControlsList />\n                    <DroneSelector />\n                    <MapSelector />\n                    <VehicleHealthHUD selectedVehicleId={selectedVehicleId} />\n                    <DroneHUDs />\n                </div>\n            </KeyboardControls>\n        </div>\n    );\n} ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.jsx';\nimport './index.css';\nimport './styles/drone.css';\nimport { GameProvider } from './utils/GameContext';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n    <React.StrictMode>\n        <GameProvider>\n            <App />\n        </GameProvider>\n    </React.StrictMode>\n); "],"names":["useMapStore","create","set","currentMapType","mapData","original","name","terrainSize","type","loaded","desert","setMapType","mapType","state","CHUNK_SIZE","OriginalTerrain","chunksCount","useMemo","count","Math","ceil","x","z","segmentsPerChunk","floor","planeGeometry","THREE.PlaneGeometry","planeMaterial","THREE.MeshStandardMaterial","color","roughness","metalness","flatShading","instancedMeshRef","useRef","tempObject","THREE.Object3D","chunks","result","push","position","rotation","PI","useFrame","current","forEach","chunk","i","y","rx","ry","rz","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","jsxRuntimeExports","jsx","ref","args","length","receiveShadow","ORIGINAL_TERRAIN_SIZE","HALF_WIDTH_TERRAIN_SIZE","width","height","ROAD_WIDTH","LANE_MARKER_WIDTH","Road","roadGeometry","roadExtensionGeometry","asphaltColor","asphaltMaterial","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","centerLineMaterial","sideLineMaterial","roadstripeColor","roadsideStripeMaterial","laneMarkers","markers","roadLength","totalMarkers","startOffset","markerPosition","LANE_MARKER_LENGTH","SingleRoad","zPosition","jsxs","children","geometry","material","object","TOTAL_ROAD_WIDTH","map","marker","index","Fragment","ROAD_SPACING","TREE_TYPES","PINE","OAK","PALM","BIRCH","SpatialHashGrid$1","constructor","bounds","dimensions","this","cells","getCell","min","max","getCellKey","cell","insert","key","query","radius","center","cellRadius","item","dx","dz","sqrt","seededRandom","seed","sin","OriginalEnvironmentObjects","halfWidth","halfHeight","trees","rocks","bushes","largeBush","grid","SpatialHashGrid","isOnRoad","abs","pine","oak","palm","birch","isPositionValid","pos","addObject","collection","objectType","baseIndex","minDistance","seedValue","randX","randZ","randScale","randRotation","randType","scale","THREE.Vector3","treeTypeName","Object","values","trees2","MIN_DISTANCE","specialSeed","specialX","specialZ","largeBush2","camera","useThree","treeRefs","trunk","foliage","rocksRef","bushesRef","largeBushRef","THREE.Frustum","THREE.Matrix4","treeMaterials","rockMaterial","bushMaterial","rockGeometry","THREE.IcosahedronGeometry","bushGeometry","THREE.SphereGeometry","treeDimensions","trunkHeight","trunkRadius","foliageOffset","treeGeometries","highDetail","THREE.CylinderGeometry","THREE.ConeGeometry","THREE.DodecahedronGeometry","THREE.OctahedronGeometry","lowDetail","useEffect","entries","treeType","positions","trunkRef","tree","trunkY","computeBoundingSphere","boundingSphere","foliageRef","scaledFoliageOffset","foliageY","setScalar","rock","objectY","bush","copy","matrixAutoUpdate","THREE.Sphere","cameraPosition","FAR_DISTANCE","refs","trunkDistance","distanceTo","foliageDistance","visible","rocksDistance","bushesDistance","largeDistance","highGeo","treeMat","frustumCulled","DRONE_TYPES","GameContext","createContext","GameProvider","currentDrone","setCurrentDrone","useState","isFirstPerson","setIsFirstPerson","value","switchDrone","droneType","toggleFirstPerson","prev","Provider","useDrones","context","useContext","Error","useKamikaze","Controls","KeyboardControls","keys","DreiKeyboardControls","PlayerController","world","playerRef","cameraRef","bulletRef","subscribeKeys","getKeys","useKeyboardControls","velocity","health","setHealth","canShoot","setCanShoot","useHelper","THREE.BoxHelper","delta","player","originalPosition","clone","bulletDirection","applyQuaternion","quaternion","bullet","add","multiplyScalar","direction","createdAt","Date","now","setTimeout","shoot","moveVector","applyMatrix4","makeRotationY","newPosition","lookAt","filter","updatePlayerPosition","PerspectiveCamera","makeDefault","fov","emissive","Html","style","backgroundColor","border","borderRadius","overflow","transform","transition","VEHICLE_HEALTH_DEFAULTS","TANK","maxHealth","criticalThreshold","visualDamageStages","hitboxSize","hitLocations","turret","damageMultiplier","tracks","mobilityEffect","rear","front","body","IFV","wheels","MILITARY_TRUCK","cabin","cargo","engine","CIVILIAN_TRUCK","CAR","VEHICLE_CATEGORY_MAP","tank_a","tank_b","ifv_a","ifv_b","civilian_truck_1","civilian_truck_2","civilian_truck_3","military_truck_1","military_truck_2","military_truck_3","car_a","car_b","car_c","car_d","car_e","useVehicleHealthStore","get","vehicleHealth","respawnTimers","initVehicle","vehicleId","vehicleType","category","healthDefaults","id","currentHealth","isDead","isDestroyed","isCritical","mobilityFactor","visualEffects","damageLog","applyDamage","rawDamage","hitLocation","weaponType","vehicle","locationData","finalDamage","newHealth","healthPercentage","stage","threshold","effects","newMobilityFactor","damageEvent","timestamp","healthBefore","healthAfter","updatedVehicle","destroyVehicle","updatedTimers","respawnTimer","respawnVehicle","repairVehicle","amount","removeVehicle","clearTimeout","_","remainingVehicles","__","remainingTimers","getVehicleHealth","getState","window","currentFps","fpsHistory","lowFpsWarning","frameCount","lastFpsUpdateTime","updateFps","performance","elapsed","instantFps","shift","avgFps","reduce","sum","fps","every","persistentLowFpsWarning","dispatchEvent","CustomEvent","detail","averageFps","requestAnimationFrame","WEAPON_TYPES","DAMAGE_PROFILES","WEAPON_TYPES_ANTI_TANK_MINE","innerRadius","outerRadius","innerDamage","outerDamage","falloff","explodesOnImpact","visualEffect","duration","intensity","secondaryEffects","debris","size","smoke","volume","shockwave","WEAPON_TYPES_RPG","tracer","WEAPON_TYPES_MORTAR","dustCloud","WEAPON_TYPES_DART","energyField","WEAPON_TYPES_GRENADE","fragments","WEAPON_TYPES_SHOTGUN","shape","coneAngle","muzzleFlash","WEAPON_TYPES_KAMIKAZE","calculateDamage","explosionPosition","targetPosition","profile","dy","distanceSquared","ratio","pow","applyExplosionDamage","targets","outerRadiusSquared","potentialTargets","target","processBatch","startIndex","batchSize","endIndex","userData","processVehicleTarget","takeDamage","damage","hit","projectilePosition","vehicleCategory","boundingBoxCenter","vehicleMatrix","makeRotationFromEuler","THREE.Euler","halfExtents","THREE.Box3","sub","containsPoint","localPos","inverseMatrix","invert","location","distanceFromCenter","checkVehicleHit","getWeaponName","createVehicleHitbox","hitbox","depth","halfDepth","isAlongX","xExtent","zExtent","lineBoxIntersection","line","box","start","end","subVectors","normalize","ray","THREE.Ray","intersectBox","checkProjectileVehicleCollision","projectile","scene","previousPosition","simpleCheckResult","collectVehiclesAtPoint","results","isVehiclePart","setFromObject","vehicleObject","partType","parent","child","hitVehicles","checkSimpleVehicleCollision","rayLength","searchRadius","searchCenter","raycaster","THREE.Raycaster","params","Line","Points","collectNearbyVehicles","objects","distanceToSquared","includes","nearbyVehicles","isVehicle","THREE.Line3","intersects","intersectObjects","closestIntersection","hitObject","hitPoint","point","sharedGeometries","sphere","smallSphere","THREE.BoxGeometry","sharedMaterials","fireballBase","transparent","THREE.Color","debrisBase","smokeBase","flashBase","THREE.MeshBasicMaterial","explosionProperties","fireballColor","smokeColor","debrisColor","dustColor","lightIntensity","lightColor","default","PARTICLE_TYPES","ANIM_CONSTANTS","vectorPool","_pool","pop","release","vector","Explosion","onComplete","groupRef","progress","setProgress","setSize","opacity","setOpacity","lifespan","setLifespan","lastProgressUpdate","lastSizeUpdate","materials","props","fireballMaterial","debrisMaterial","smokeMaterial","dustMaterial","fireball","dust","flash","explosionProps","particles","totalDebris","totalSmoke","debrisSize","smokeDuration","twoPI","angle","random","speed","life","cos","active","spawnDelay","rotationSpeed","originalSize","targetOpacity","initialLife","distance","shockwaveCount","dustCount","generateParticles","dispose","newProgress","updateMaterials","growthProgress","growthRate","newSize","chunkSize","particleCount","j","particle","particleProgress","updateShockwaveParticle","updateDustParticle","updateSmokeParticle","updateDebrisParticle","updateParticlesBatch","error","console","resetParticles","activeParticles","PARTICLE_TYPES_DEBRIS","PARTICLE_TYPES_SMOKE","PARTICLE_TYPES_DUST","PARTICLE_TYPES_SHOCKWAVE","emissiveIntensity","attach","ParticleGroup","decay","toArray","getGeometryForParticle","currentRadius","buoyancyFactor","ExplosionsManager","explosions","setExplosions","objectsCacheRef","Map","explosionTimestampsRef","lastShotgunProcessTimeRef","objectsCacheForShotgunRef","updateObjectCache","newCache","processObject","parentVehicleId","isMesh","intervalId","setInterval","clearInterval","handleExplosion","event","damageRadius","cacheKey","objectsInRange","has","objectsInRange2","findObjectsInRadius","oldestKey","Array","from","delete","requestIdleCallback","explosionEffect","fpsAdjustment","noVisual","startTime","shotgunSpecificAdjustment","visual","debrisCount","_a","smokeVolume","_b","_c","_d","quality","createExplosionEffect","explosionId","toString","substr","addEventListener","removeEventListener","cleanupInterval","stuckExplosionsFound","validIds","explosion","searchPosition","radiusSquared","checkObject","worldPosition","getWorldPosition","removeExplosion","triggerExplosion","DamageIndicatorsManager","indicators","setIndicators","React","handleDamage","ShotgunMuzzleFlash","isImpact","setLife","flashRef","particlesRef","particleCountMultiplier","impactMultiplier","pelletCount","spread","timer","defaultDir","targetDir","THREE.Quaternion","setFromUnitVectors","euler","setFromQuaternion","ShotgunEffectsManager","muzzleFlashes","setMuzzleFlashes","pendingFlashesRef","processingBatchRef","lastProcessTimeRef","processPendingFlashes","batchLimit","flashesToProcess","slice","queueMuzzleFlash","handleShotgunFire","throttleTime","log","handleWeaponImpact","handlePersistentLowFps","removeMuzzleFlash","POOL_SIZE","Grenadier","droneRef","velocityRef","propellersRefs","initialRotationRef","setPosition","propellersActive","setPropellersActive","propellersSpeed","setPropellersSpeed","shotgunAmmo","setShotgunAmmo","grenadeAmmo","setGrenadeAmmo","dartAmmo","setDartAmmo","shotgunCooldown","setShotgunCooldown","grenadeCooldown","setGrenadeCooldown","dartCooldown","setDartCooldown","projectilePool","activeProjectiles","setActiveProjectiles","downwardViewActive","setDownwardViewActive","showHUD","setShowHUD","gravity","LIFT_POWER","getProjectileFromPool","pool","find","p","warn","newProjectile","returnProjectileToPool","pooledProjectile","fireShotgun","useCallback","newAmmo","ammoCount","Number","forward","triggerShotgunFire","spreadFactor","order","backward","left","right","up","down","strafeLeft","strafeRight","handleMouseDown","e","button","currentPosition","dropGrenade","handleKeyDown","dropDart","handleContextMenu","preventDefault","toFixed","cloneablePosition","prevProjectiles","stillActiveProjectiles","vehicleHit","forwardVector","rightVector","THRUST","DIVE_POWER","THREE.MathUtils","lerp","ROTATION_SPEED","downSpeed","targetForwardTilt","targetSideTilt","currentYaw","currentQuat","setFromEuler","targetEuler","targetQuat","slerpQuat","slerp","setRotationFromQuaternion","cameraOffset","castShadow","LandingLeg","PropellerUnit","propRef","el","counterClockwise","ProjectileRenderer","projectiles","propellerRef","itemSize","array","Float32Array","geometries","THREE.Group","THREE.Mesh","translateY","THREE.TorusGeometry","translateX","rotateX","rotateY","ProjectileMesh","memo","setRotation","projectilesByType","grouped","typeProjectiles","GrenadierHUD","className","Kamikaze","previousPositionRef","collisionOccurred","mousePos","gl","handleMouseMove","clientX","innerWidth","clientY","innerHeight","code","targetRotationY","pitchAmount","hitPosition","fpOffset","fpDirection","cameraDistance","cameraHeight","KamikazeHUD","onClick","viewBox","cx","cy","r","fill","x1","y1","x2","y2","stroke","strokeWidth","Bomber","mineAmmo","setMineAmmo","mortarAmmo","setMortarAmmo","rpgAmmo","setRpgAmmo","mineCooldown","setMineCooldown","mortarCooldown","setMortarCooldown","rpgCooldown","setRpgCooldown","armLength","translateZ","BomberHUD","DroneSwitcher","TankA","TankB","IFV_A","IFV_B","SHARED_MATERIALS","CivilianTruck1","wheel","wireframe","CivilianTruck2","CivilianTruck3","MilitaryTruck1","MilitaryTruck2","MilitaryTruck3","CarA","CarB","CarC","CarD","CarE","VehicleTypes","withVehicleHealth","VehicleComponent","forwardRef","otherProps","adjustedProps","canMove","EnhancedVehicleTypes","SPEED_MIN","SPEED_MAX","CAR_CIVILIAN_SPEED_MIN","LANE_TYPES","CIVILIAN_MINIMUM_DISTANCE","SAFE_DISTANCE","VEHICLE_LENGTH","CIVILIAN_DETECTION_DISTANCE","CIVILIAN_EMERGENCY_DISTANCE","DESTROYED_VEHICLE_WAIT_PERIOD","MILITARY_COLUMNS","vehicles","tempVector3","VehiclePool","inUse","Set","releaseAll","clear","getRandomItem","getRandomVehicleOfType","vehicleKeys","matchingVehicles","isCarOrCivilianTruck","VehiclesOnRoad","setVehicles","initializedRef","columnSpawnTimersRef","timeoutRefsRef","vehiclePoolRef","congestionMapRef","vehicleRefsMap","vehicleHealthStore","vehiclesById","rotationMap","newVehicles","roadZ","lanes","fastLanes","lane","slowLanes","columnConfig","columnId","randomOffset","currentX","vehicleIndex","vehicleGroup","baseSpeedMin","baseSpeedMax","columnPosition","road","laneType","isInColumn","roadSection","vehiclesPerLane","VEHICLES_PER_ROAD","vehiclePositions","segmentLength","minSegmentLength","effectiveSegmentLength","xPos","zJitter","zPos","hasConflict","conflictResolutionAttempts","MAX_CONFLICT_RESOLUTION_ATTEMPTS","xDistance","zDistance","newZJitter","jamCounter","timeoutId","timerId","cleanupIntervalId","prevVehicles","minX","maxX","validZRanges","isRemoved","validX","validZ","some","range","vehicleLookupMapRef","createNewColumn","newColumnId","substring","startingX","currentTime","allVehicles","newCongestionMap","roadSections","destroyedColumns","activeColumns","healthData","activeId","sectionKey","sectionVehicles","stoppedCount","split","sectionHasDestroyedColumn","totalVehicles","lastDetectedTime","detectCongestion","vehicles2","destroyedVehicles","clearedDestroyedPositions","newlyDestroyedColumns","optimizedDetectCollisionAhead","checkDistance","sectorKey","nextSectorKey","farSectorKey","veryFarSectorKey","sectorsToCheck","laneWidth","adjacentLaneUp","adjacentLaneDown","isCar","adjacentLaneZThreshold","adjacentSectorKeyUp","adjacentSectorKeyDown","nextAdjacentSectorKeyUp","nextAdjacentSectorKeyDown","adjacentLaneVehicles","closestDistance","Infinity","hasCollision","flat","v","otherVehicle","distanceToNext","vehiclesList","hasNotifiedColumn","clearingStarted","clearingTime","columnHasDestroyed","lastDestroyedTime","markedForRemoval","filteredVehicles","laneKey","columnHasRemoval","lastRemovalTime","columnMap","updatedVehicles","originalSpeed","hasCollisionEmergency","hasMinimumDistance","hasCollisionWarning","distanceFactor","lastJamCheck","isInTrafficJam","targetSpeed","previousSpeed","accelerationRate","speedChange","newSpeed","newX","columnVehicles","sort","a","b","leadVehicleIndex","leadVehicle","leadVehicleHealth","newLeadFound","newLeadVehicleIndex","potentialLeadHealth","referenceVehicle","referenceVehicleHealth","hasActiveVehicle","columnSpeed","activeColumnVehicles","destroyedVehicleMap","veh","wasMarkedDestroyed","updateIdx","findIndex","frontmostActiveVehicle","newColumnSpeed","updatedVehicleIndex","shouldWaitInPlace","hasDestroyedVehicleAhead","destroyedVehicle","waitingForVehicleAhead","catchUpBoost","xMovement","frontmostX","scheduleColumnRespawn","processedVehicles","respawnPosition","respawnOffset","MINIMUM_DISTANCE","respawnedVehicle","Boolean","newColumns","vehicleRef","distanceToCamera","renderVehicles","currentVehicleIds","createRef","VehicleSelector","onSelectVehicle","handleClick","rect","domElement","getBoundingClientRect","top","setFromCamera","found","currentObject","canvasElement","OriginalMap","fog","FogExp2","updateProjectionMatrix","skyProps","sunPosition","inclination","azimuth","Environment","preset","Sky","DesertTerrain","vertices","attributes","noise1","noise2","noise3","computeVertexNormals","DesertEnvironmentObjects","cacti","cactiRef","cactusMaterial","cactusGeometry","cactus","cactiDistance","DesertMap","MapContainer","Scene","DroneSelector","VehicleHealthHUD","selectedVehicleId","healthInfo","setHealthInfo","updateHealthInfo","interval","healthPercent","replace","toUpperCase","join","ControlsList","controls","action","DRONE_TYPES_KAMIKAZE","DRONE_TYPES_GRENADIER","DRONE_TYPES_BOMBER","control","DroneHUDs","bomberAmmo","setBomberAmmo","grenadierAmmo","setGrenadierAmmo","handleAmmoUpdate","MapSelector","App","setSelectedVehicleId","canvasConfig","shadows","dpr","onPointerMissed","Canvas","Suspense","fallback","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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"}